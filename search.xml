<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MySQL Group Replication初探]]></title>
    <url>%2FMySQL-Group-Replication%E5%88%9D%E6%8E%A2.html</url>
    <content type="text"><![CDATA[前言MySQL Group Replication简称MGR，又称MySQL组复制，是MySQL官方于2016年12月12日推出的一个全新的高可用与高扩展的解决方案，首发集成于MySQL5.7.17版本中。MySQL组复制提供了高可用、高扩展、高可靠的MySQL集群服务。高一致性，基于原生复制及paxos协议的组复制技术，并以插件的方式提供，提供一致数据安全保证；高容错性，只要不是大多数节点坏掉就可以继续工作，有自动检测机制，当不同节点产生资源急用冲突时时，不会出现错误，按照先到者优先进行处理，并且内置了自动化脑裂防护机制；高扩展性，节点的新增和移除都是自动的，新节点加入后，会自动从其他节点上同步状态，直到新节点和其他节点保持一致，如果某节点被移除了，其他节点自动更新组信息，自动维护新的组信息；高灵活性，有单主模式和多主模式，单主模式下，会自动选主，所有更新操作都在主上进行；多主模式下，所有server都可以处理更新操作。 要求和限制基础结构 数据必须存储在InnoDB存储引擎中 表必须定义一个显式主键 通信引擎仅支持IPv4 需要低延迟，高带宽的网络server实例配置 必须开启binlog 必须开启log-slave-updates binlog格式必须为ROW格式 必须开启GTID模式 复制相关信息必须使用表存储（–master-info-repository = TABLE/–relay-log-info-repository = TABLE） 事务写集合必须打开（Transaction write set extraction）使用限制 不支持binlog的checksum，需要设置–binlog-checksum = NONE 不支持savepoint 不支持可串行serializable事务隔离级别 不支持gap locks 不支持lock tables,unlock tables 多主模式下，不支持多节点同时对一个表进行DDL vs DDL/DML 多主模式下，不支持多级关联外键 工作原理MySQL组复制是一个MySQL插件，它建立在现有的MySQL复制基础结构上，利用了二进制日志，基于行的日志记录和全局事务标识符等功能。它集成了当前的MySQL框架，如性能模式、插件和服务基础设施等。组复制（Group Replication）基于分布式一致性算法(Paxos协议的变体)实现，一个组允许部分节点挂掉，只要保证绝大多数节点仍然存活并且之间的通讯是没有问题的，那么这个组对外仍然能够提供服务，它是一种被使用在容错系统中的技术。Group Replication（复制组）是由能够相互通信的多个服务器（节点）组成的。在通信层，Group replication实现了一系列的机制：比如原子消息（atomic message delivery）和全序化消息（total ordering of messages）。这些原子化，抽象化的机制，为实现更先进的数据库复制方案提供了强有力的支持。MySQL Group Replication正是基于这些技术和概念，实现了一种多主全更新的复制协议。简而言之，一个Group Replication就是一组节点，每个节点都可以独立执行事务，而读写事务则会在于group内的其他节点进行协调之后再commit。因此，当一个事务准备提交时，会自动在group内进行原子性的广播，告知其他节点变更了什么内容/执行了什么事务。这种原子广播的方式，使得这个事务在每一个节点上都保持着同样顺序。这意味着每一个节点都以同样的顺序，接收到了同样的事务日志，所以每一个节点以同样的顺序重演了这些事务日志，最终整个group保持了完全一致的状态。然而，不同的节点上执行的事务之间有可能存在资源争用。这种现象容易出现在两个不同的并发事务上。假设在不同的节点上有两个并发事务，更新了同一行数据，那么就会发生资源争用。面对这种情况，Group Replication判定先提交的事务为有效事务，会在整个group里面重放，后提交的事务会直接中断，或者回滚，最后丢弃掉。因此，这也是一个无共享的复制方案，每一个节点都保存了完整的数据副本。 组织结构 API层 负责完成和MySQL Server的交互，获取server的状态，截获事务提交，干涉事务提交或者回滚。 组件层 特定功能的组件，Capture负责收集事务执行相关信息，Applier负责应用集群事务到本地，Recovery负责新节点的数据恢复。 复制层 负责冲突验证，接收和应用集群事务。 集群通信层 基于Paxos协议的集群通信引擎以及和上层组件的交互接口。 容错MySQL组复制构建在paxos分布式算法实现的基础上，以提供不同server之间的分布式协调。因此，它需要大多数server处于活动状态以达到仲裁成员数，从而做出决定。这对系统可以容忍的不影响其自身及其整体功能的故障数量有直接影响。容忍f个故障所需的server数量(n)为n=2*f+1。在实践中，这意味着为了容忍一个故障，组必须有三个server。因此，如果一个服务器故障，仍然有两个服务器形成大多数(三分之二)来允许系统自动地继续运行。但是，如果第二个server意外地fail掉，则该组(剩下一个server)锁定，因为没有多数可以达成协议。 列表 组大小 多数 允许的即使故障数 1 1 0 2 2 0 3 2 1 4 3 1 5 3 2 6 4 2 7 4 3 8 5 3 9 5 4 实践在单主模式下部署组复制准备IP：192.168.7.50system：Centos 6.5hostname：jiessiedisk：300G ssdmemory：8Gcpu：4core节点数：3 二进制安装包下载二进制包安装目录：/hwdata/data/mysql5.7.20/base下载地址：https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.20-linux-glibc2.12-x86_64.tar.gz目录结构：12345678910111213/hwdata/data/mysql5.7.20/base[root@jiessie base]# lltotal 52-rw-r--r-- 1 7161 31415 17987 Sep 13 23:48 COPYING-rw-r--r-- 1 7161 31415 2478 Sep 13 23:48 READMEdrwxr-xr-x 2 root root 4096 Nov 29 11:22 bindrwxr-xr-x 2 root root 4096 Nov 29 11:22 docsdrwxr-xr-x 3 root root 4096 Nov 29 11:22 includedrwxr-xr-x 5 root root 4096 Nov 29 11:22 libdrwxr-xr-x 4 root root 4096 Nov 29 11:22 mandrwxr-xr-x 28 root root 4096 Nov 29 11:22 sharedrwxr-xr-x 2 root root 4096 Nov 29 11:22 support-files[root@jiessie base]# 数据目录数据目录：/hwdata/data/mysql5.7.20/data三节点的数据，分别存放于data子目录下的s1,s2,s3目录中123456789[root@jiessie mysql5.7.20]# pwd/hwdata/data/mysql5.7.20[root@jiessie mysql5.7.20]# mkdir data/&#123;s1,s2,s3&#125;[root@jiessie mysql5.7.20]# ll data/total 12drwxr-xr-x 2 root root 4096 Nov 29 17:23 s1drwxr-xr-x 2 root root 4096 Nov 29 17:23 s2drwxr-xr-x 2 root root 4096 Nov 29 17:23 s3[root@jiessie mysql5.7.20]# 配置文件配置文件：/hwdata/data/mysql5.7.20/conf三节点的配置文件，分别是conf目录下的s1.cnf,s2.cnf,s3.cnf123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104[root@jiessie mysql5.7.20]# ll conf/total 12-rw-r--r-- 1 root root 948 Nov 29 17:35 s1.cnf-rw-r--r-- 1 root root 948 Nov 29 17:36 s2.cnf-rw-r--r-- 1 root root 948 Nov 29 17:37 s3.cnf[root@jiessie mysql5.7.20]# cat conf/s1.cnf [mysqld]datadir=/hwdata/data/mysql5.7.20/data/s1basedir=/hwdata/data/mysql5.7.20/baseport=9001socket=/hwdata/data/mysql5.7.20/data/s1/s1.sockserver_id=1gtid_mode=ONenforce_gtid_consistency=ONmaster_info_repository=TABLErelay_log_info_repository=TABLEbinlog_checksum=NONElog_slave_updates=ONlog_bin=binlogbinlog_format=ROWinnodb_buffer_pool_instances=4innodb_buffer_pool_size=128Minnodb_flush_log_at_trx_commit=2sync_binlog=0slave-parallel-type=LOGICAL_CLOCKslave-parallel-workers=4slave_preserve_commit_order=on#group replicationtransaction_write_set_extraction=XXHASH64loose-group_replication_group_name="aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"loose-group_replication_start_on_boot=offloose-group_replication_local_address= "127.0.0.1:10011"loose-group_replication_group_seeds= "127.0.0.1:10011,127.0.0.1:10012,127.0.0.1:10013"loose-group_replication_bootstrap_group= offloose-group_replication_single_primary_mode=trueloose-group_replication_ip_whitelist="127.0.0.1/20,192.168.7.50/20"[root@jiessie mysql5.7.20]# [root@jiessie mysql5.7.20]# cat conf/s2.cnf [mysqld]datadir=/hwdata/data/mysql5.7.20/data/s2basedir=/hwdata/data/mysql5.7.20/baseport=9002socket=/hwdata/data/mysql5.7.20/data/s2/s2.sockserver_id=2gtid_mode=ONenforce_gtid_consistency=ONmaster_info_repository=TABLErelay_log_info_repository=TABLEbinlog_checksum=NONElog_slave_updates=ONlog_bin=binlogbinlog_format=ROWinnodb_buffer_pool_instances=4innodb_buffer_pool_size=128Minnodb_flush_log_at_trx_commit=2sync_binlog=0slave-parallel-type=LOGICAL_CLOCKslave-parallel-workers=4slave_preserve_commit_order=on#group replicationtransaction_write_set_extraction=XXHASH64loose-group_replication_group_name="aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"loose-group_replication_start_on_boot=offloose-group_replication_local_address= "127.0.0.1:10012"loose-group_replication_group_seeds= "127.0.0.1:10011,127.0.0.1:10012,127.0.0.1:10013"loose-group_replication_bootstrap_group= offloose-group_replication_single_primary_mode=trueloose-group_replication_ip_whitelist="127.0.0.1/20,192.168.7.50/20"[root@jiessie mysql5.7.20]# [root@jiessie mysql5.7.20]# cat conf/s3.cnf [mysqld]datadir=/hwdata/data/mysql5.7.20/data/s3basedir=/hwdata/data/mysql5.7.20/baseport=9003socket=/hwdata/data/mysql5.7.20/data/s3/s3.sockserver_id=3gtid_mode=ONenforce_gtid_consistency=ONmaster_info_repository=TABLErelay_log_info_repository=TABLEbinlog_checksum=NONElog_slave_updates=ONlog_bin=binlogbinlog_format=ROWinnodb_buffer_pool_instances=4innodb_buffer_pool_size=128Minnodb_flush_log_at_trx_commit=2sync_binlog=0slave-parallel-type=LOGICAL_CLOCKslave-parallel-workers=4slave_preserve_commit_order=on#group replicationtransaction_write_set_extraction=XXHASH64loose-group_replication_group_name="aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"loose-group_replication_start_on_boot=offloose-group_replication_local_address= "127.0.0.1:10013"loose-group_replication_group_seeds= "127.0.0.1:10011,127.0.0.1:10012,127.0.0.1:10013"loose-group_replication_bootstrap_group= offloose-group_replication_single_primary_mode=trueloose-group_replication_ip_whitelist="127.0.0.1/20,192.168.7.50/20"[root@jiessie mysql5.7.20]# 三节点中配置不一致的参数有以下： datadir #数据目录 port #服务端口 socket #socket位置 server_id #服务器标识 group_replication_local_address #组复制的本地地址 组复制相关参数： transaction_write_set_extraction #指示Server必须为每个事务收集写集合，并使用指定算法将其编码为散列 loose-group_replication_group_name #组复制名称 loose-group_replication_start_on_boot #server启动时是否自动启动组复制 loose-group_replication_local_address #绑定的ip和端口接受其他组成员的连接 loose-group_replication_group_seeds #本行为告诉服务器当服务器加入组时，应当连接到此列表的这些种子服务器进行配置。本设置可以不是全部的组成员地址 loose-group_replication_bootstrap_group #配置是否自动启动引导组 loose-group_replication_single_primary_mode #配置单主还是多主模式 loose-group_replication_ip_whitelist #默认情况下只允许127.0.0.1连接到复制组，如果是其他IP则需要配置 初始化使用mysqld分别对s1,s2,s3进行初始化： base/bin/mysqld –initialize-insecure –basedir=/hwdata/data/mysql5.7.20/base –datadir=/hwdata/data/mysql5.7.20/data/s1 base/bin/mysqld –initialize-insecure –basedir=/hwdata/data/mysql5.7.20/base –datadir=/hwdata/data/mysql5.7.20/data/s2 base/bin/mysqld –initialize-insecure –basedir=/hwdata/data/mysql5.7.20/base –datadir=/hwdata/data/mysql5.7.20/data/s312345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455[root@jiessie mysql5.7.20]# base/bin/mysqld --initialize-insecure --basedir=/hwdata/data/mysql5.7.20/base --datadir=/hwdata/data/mysql5.7.20/data/s1 2017-11-30T04:55:56.436002Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).2017-11-30T04:55:57.095836Z 0 [Warning] InnoDB: New log files created, LSN=457902017-11-30T04:55:57.216615Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.2017-11-30T04:55:57.284024Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: c0acc2c7-d58a-11e7-b59f-00163e00dc49.2017-11-30T04:55:57.287290Z 0 [Warning] Gtid table is not ready to be used. Table 'mysql.gtid_executed' cannot be opened.2017-11-30T04:55:57.287678Z 1 [Warning] root@localhost is created with an empty password ! Please consider switching off the --initialize-insecure option.[root@jiessie mysql5.7.20]# [root@jiessie mysql5.7.20]# base/bin/mysqld --initialize-insecure --basedir=/hwdata/data/mysql5.7.20/base --datadir=/hwdata/data/mysql5.7.20/data/s22017-11-30T04:56:20.520937Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).2017-11-30T04:56:21.152584Z 0 [Warning] InnoDB: New log files created, LSN=457902017-11-30T04:56:21.278863Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.2017-11-30T04:56:21.349754Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: cf04e66c-d58a-11e7-b97e-00163e00dc49.2017-11-30T04:56:21.352655Z 0 [Warning] Gtid table is not ready to be used. Table 'mysql.gtid_executed' cannot be opened.2017-11-30T04:56:21.353069Z 1 [Warning] root@localhost is created with an empty password ! Please consider switching off the --initialize-insecure option.[root@jiessie mysql5.7.20]# [root@jiessie mysql5.7.20]# base/bin/mysqld --initialize-insecure --basedir=/hwdata/data/mysql5.7.20/base --datadir=/hwdata/data/mysql5.7.20/data/s32017-11-30T04:56:28.986804Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).2017-11-30T04:56:29.712932Z 0 [Warning] InnoDB: New log files created, LSN=457902017-11-30T04:56:29.902130Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.2017-11-30T04:56:29.970877Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: d4286108-d58a-11e7-807d-00163e00dc49.2017-11-30T04:56:29.973699Z 0 [Warning] Gtid table is not ready to be used. Table 'mysql.gtid_executed' cannot be opened.2017-11-30T04:56:29.974087Z 1 [Warning] root@localhost is created with an empty password ! Please consider switching off the --initialize-insecure option.[root@jiessie mysql5.7.20]# tree -L 2 data/ data/|-- s1| |-- auto.cnf| |-- ib_buffer_pool| |-- ib_logfile0| |-- ib_logfile1| |-- ibdata1| |-- mysql| |-- performance_schema| `-- sys|-- s2| |-- auto.cnf| |-- ib_buffer_pool| |-- ib_logfile0| |-- ib_logfile1| |-- ibdata1| |-- mysql| |-- performance_schema| `-- sys`-- s3 |-- auto.cnf |-- ib_buffer_pool |-- ib_logfile0 |-- ib_logfile1 |-- ibdata1 |-- mysql |-- performance_schema `-- sys12 directories, 15 files[root@jiessie mysql5.7.20]# 启动数据库添加权限：chown -R mysql:mysql /hwdata/data/mysql5.7.20/data/分别启动三个节点数据库： base/bin/mysqld_safe –defaults-file=/hwdata/data/mysql5.7.20/conf/s1.cnf &amp; base/bin/mysqld_safe –defaults-file=/hwdata/data/mysql5.7.20/conf/s2.cnf &amp; base/bin/mysqld_safe –defaults-file=/hwdata/data/mysql5.7.20/conf/s3.cnf &amp;12345678910111213141516[root@jiessie mysql5.7.20]# base/bin/mysqld_safe --defaults-file=/hwdata/data/mysql5.7.20/conf/s1.cnf &amp;[1] 25168[root@jiessie mysql5.7.20]# Logging to '/hwdata/data/mysql5.7.20/data/s1/jiessie.err'.2017-11-30T05:06:34.402042Z mysqld_safe Starting mysqld daemon with databases from /hwdata/data/mysql5.7.20/data/s1[root@jiessie mysql5.7.20]# base/bin/mysqld_safe --defaults-file=/hwdata/data/mysql5.7.20/conf/s2.cnf &amp; [2] 25681[root@jiessie mysql5.7.20]# Logging to '/hwdata/data/mysql5.7.20/data/s2/jiessie.err'.2017-11-30T05:06:48.204177Z mysqld_safe Starting mysqld daemon with databases from /hwdata/data/mysql5.7.20/data/s2[root@jiessie mysql5.7.20]# base/bin/mysqld_safe --defaults-file=/hwdata/data/mysql5.7.20/conf/s3.cnf &amp; [3] 26193[root@jiessie mysql5.7.20]# Logging to '/hwdata/data/mysql5.7.20/data/s3/jiessie.err'.2017-11-30T05:06:59.779426Z mysqld_safe Starting mysqld daemon with databases from /hwdata/data/mysql5.7.20/data/s3[root@jiessie mysql5.7.20]# 查看进程:12345[root@jiessie mysql5.7.20]# netstat -tunlp|grep mysql tcp 0 0 0.0.0.0:9001 0.0.0.0:* LISTEN 25609/mysqld tcp 0 0 0.0.0.0:9002 0.0.0.0:* LISTEN 26122/mysqld tcp 0 0 0.0.0.0:9003 0.0.0.0:* LISTEN 26634/mysqld [root@jiessie mysql5.7.20]# 添加复制用户创建具有replication slave权限的MySQL用户,此操作不应记录到二进制中,以避免将更改传递到其他slave实例.123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100[root@jiessie mysql5.7.20]# base/bin/mysql -uroot -S /hwdata/data/mysql5.7.20/data/s1/s1.sockWelcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 3Server version: 5.7.20-log MySQL Community Server (GPL)Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.mysql&gt; SET SQL_LOG_BIN=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; CREATE USER rpl_user@'%';Query OK, 0 rows affected (0.00 sec)mysql&gt; GRANT REPLICATION SLAVE ON *.* TO rpl_user@'%' IDENTIFIED BY 'rpl_pass';Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; FLUSH PRIVILEGES;Query OK, 0 rows affected (0.00 sec)mysql&gt; SET SQL_LOG_BIN=1;Query OK, 0 rows affected (0.00 sec)mysql&gt; CHANGE MASTER TO MASTER_USER='rpl_user', MASTER_PASSWORD='rpl_pass' FOR CHANNEL 'group_replication_recovery';Query OK, 0 rows affected, 2 warnings (0.04 sec)mysql&gt; exitBye[root@jiessie mysql5.7.20]# base/bin/mysql -uroot -S /hwdata/data/mysql5.7.20/data/s2/s2.sock Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 3Server version: 5.7.20-log MySQL Community Server (GPL)Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.mysql&gt; SET SQL_LOG_BIN=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; CREATE USER rpl_user@'%';Query OK, 0 rows affected (0.00 sec)mysql&gt; GRANT REPLICATION SLAVE ON *.* TO rpl_user@'%' IDENTIFIED BY 'rpl_pass';Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; FLUSH PRIVILEGES;Query OK, 0 rows affected (0.00 sec)mysql&gt; SET SQL_LOG_BIN=1;Query OK, 0 rows affected (0.00 sec)mysql&gt; CHANGE MASTER TO MASTER_USER='rpl_user', MASTER_PASSWORD='rpl_pass' FOR CHANNEL 'group_replication_recovery';Query OK, 0 rows affected, 2 warnings (0.04 sec)mysql&gt; exitBye[root@jiessie mysql5.7.20]# base/bin/mysql -uroot -S /hwdata/data/mysql5.7.20/data/s3/s3.sock Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 3Server version: 5.7.20-log MySQL Community Server (GPL)Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.mysql&gt; SET SQL_LOG_BIN=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; CREATE USER rpl_user@'%';Query OK, 0 rows affected (0.00 sec)mysql&gt; GRANT REPLICATION SLAVE ON *.* TO rpl_user@'%' IDENTIFIED BY 'rpl_pass';Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; FLUSH PRIVILEGES;Query OK, 0 rows affected (0.00 sec)mysql&gt; SET SQL_LOG_BIN=1;Query OK, 0 rows affected (0.00 sec)mysql&gt; CHANGE MASTER TO MASTER_USER='rpl_user', MASTER_PASSWORD='rpl_pass' FOR CHANNEL 'group_replication_recovery';Query OK, 0 rows affected, 2 warnings (0.03 sec)mysql&gt; exitBye[root@jiessie mysql5.7.20]# 启动组复制配置并启动s1后,安装组复制插件,然后连接到server并执行以下命令. 注意:创建一个Group Replication,需要在一个节点初始化,也只需要在一个节点初始化,不可在多个节点都执行.12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788[root@jiessie mysql5.7.20]# base/bin/mysql -uroot -S /hwdata/data/mysql5.7.20/data/s1/s1.sockWelcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 4Server version: 5.7.20-log MySQL Community Server (GPL)Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.mysql&gt; INSTALL PLUGIN group_replication SONAME 'group_replication.so';Query OK, 0 rows affected (0.00 sec)mysql&gt; show plugins;+----------------------------+----------+--------------------+----------------------+---------+| Name | Status | Type | Library | License |+----------------------------+----------+--------------------+----------------------+---------+| binlog | ACTIVE | STORAGE ENGINE | NULL | GPL || mysql_native_password | ACTIVE | AUTHENTICATION | NULL | GPL || sha256_password | ACTIVE | AUTHENTICATION | NULL | GPL || PERFORMANCE_SCHEMA | ACTIVE | STORAGE ENGINE | NULL | GPL || MRG_MYISAM | ACTIVE | STORAGE ENGINE | NULL | GPL || MEMORY | ACTIVE | STORAGE ENGINE | NULL | GPL || InnoDB | ACTIVE | STORAGE ENGINE | NULL | GPL || INNODB_TRX | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_LOCKS | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_LOCK_WAITS | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_CMP | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_CMP_RESET | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_CMPMEM | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_CMPMEM_RESET | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_CMP_PER_INDEX | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_CMP_PER_INDEX_RESET | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_BUFFER_PAGE | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_BUFFER_PAGE_LRU | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_BUFFER_POOL_STATS | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_TEMP_TABLE_INFO | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_METRICS | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_FT_DEFAULT_STOPWORD | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_FT_DELETED | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_FT_BEING_DELETED | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_FT_CONFIG | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_FT_INDEX_CACHE | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_FT_INDEX_TABLE | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_SYS_TABLES | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_SYS_TABLESTATS | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_SYS_INDEXES | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_SYS_COLUMNS | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_SYS_FIELDS | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_SYS_FOREIGN | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_SYS_FOREIGN_COLS | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_SYS_TABLESPACES | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_SYS_DATAFILES | ACTIVE | INFORMATION SCHEMA | NULL | GPL || INNODB_SYS_VIRTUAL | ACTIVE | INFORMATION SCHEMA | NULL | GPL || CSV | ACTIVE | STORAGE ENGINE | NULL | GPL || MyISAM | ACTIVE | STORAGE ENGINE | NULL | GPL || ARCHIVE | ACTIVE | STORAGE ENGINE | NULL | GPL || partition | ACTIVE | STORAGE ENGINE | NULL | GPL || BLACKHOLE | ACTIVE | STORAGE ENGINE | NULL | GPL || FEDERATED | DISABLED | STORAGE ENGINE | NULL | GPL || ngram | ACTIVE | FTPARSER | NULL | GPL || group_replication | ACTIVE | GROUP REPLICATION | group_replication.so | GPL |+----------------------------+----------+--------------------+----------------------+---------+45 rows in set (0.00 sec)mysql&gt; SET GLOBAL group_replication_bootstrap_group=ON;Query OK, 0 rows affected (0.00 sec)mysql&gt; START GROUP_REPLICATION;Query OK, 0 rows affected (3.02 sec)mysql&gt; SET GLOBAL group_replication_bootstrap_group=OFF;Query OK, 0 rows affected (0.00 sec)mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+-------------+-------------+--------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+-------------+-------------+--------------+| group_replication_applier | c0acc2c7-d58a-11e7-b59f-00163e00dc49 | jiessie | 9001 | ONLINE |+---------------------------+--------------------------------------+-------------+-------------+--------------+1 row in set (0.00 sec)mysql&gt; exitBye[root@jiessie mysql5.7.20]# 添加其他组复制节点在其他2个节点上开启组复制12345678910111213141516171819202122232425262728293031323334353637383940414243[root@jiessie mysql5.7.20]# base/bin/mysql -uroot -S /hwdata/data/mysql5.7.20/data/s2/s2.sockWelcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 4Server version: 5.7.20-log MySQL Community Server (GPL)Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.mysql&gt; INSTALL PLUGIN group_replication SONAME 'group_replication.so';Query OK, 0 rows affected (0.00 sec)mysql&gt; START GROUP_REPLICATION;Query OK, 0 rows affected (6.57 sec)mysql&gt; exitBye[root@jiessie mysql5.7.20]# base/bin/mysql -uroot -S /hwdata/data/mysql5.7.20/data/s3/s3.sockWelcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 4Server version: 5.7.20-log MySQL Community Server (GPL)Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.mysql&gt; INSTALL PLUGIN group_replication SONAME 'group_replication.so';Query OK, 0 rows affected (0.00 sec)mysql&gt; START GROUP_REPLICATION;Query OK, 0 rows affected (3.27 sec)mysql&gt; exitBye[root@jiessie mysql5.7.20]# 测试数据同步在s1节点上插入数据，在其他节点上查看数据是否同步及binlog详情 刷新flush logs 1234567891011121314151617181920212223242526272829[root@jiessie mysql5.7.20]# base/bin/mysql -uroot -S /hwdata/data/mysql5.7.20/data/s1/s1.sock -e "flush logs;show binary logs;" +---------------+-----------+| Log_name | File_size |+---------------+-----------+| binlog.000001 | 1101 || binlog.000002 | 1162 || binlog.000003 | 2329 || binlog.000004 | 230 || binlog.000005 | 1017 || binlog.000006 | 190 |+---------------+-----------+[root@jiessie mysql5.7.20]# base/bin/mysql -uroot -S /hwdata/data/mysql5.7.20/data/s2/s2.sock -e "flush logs;show binary logs;" +---------------+-----------+| Log_name | File_size |+---------------+-----------+| binlog.000001 | 169 || binlog.000002 | 2054 || binlog.000003 | 3106 || binlog.000004 | 190 |+---------------+-----------+[root@jiessie mysql5.7.20]# base/bin/mysql -uroot -S /hwdata/data/mysql5.7.20/data/s3/s3.sock -e "flush logs;show binary logs;" +---------------+-----------+| Log_name | File_size |+---------------+-----------+| binlog.000001 | 169 || binlog.000002 | 150 || binlog.000003 | 4970 || binlog.000004 | 190 |+---------------+-----------+[root@jiessie mysql5.7.20]# 节点1插入数据 1234567891011121314151617181920212223242526272829303132[root@jiessie mysql5.7.20]# base/bin/mysql -uroot -S /hwdata/data/mysql5.7.20/data/s1/s1.sock -e "create database if not exists test;create table test.t1(id int unsigned not null auto_increment primary key,name varchar(20))" [root@jiessie mysql5.7.20]# base/bin/mysql -uroot -S /hwdata/data/mysql5.7.20/data/s1/s1.sock -e "desc test.t1;select * from test.t1" +-------+------------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+-------+------------------+------+-----+---------+----------------+| id | int(10) unsigned | NO | PRI | NULL | auto_increment || name | varchar(20) | YES | | NULL | |+-------+------------------+------+-----+---------+----------------+[root@jiessie mysql5.7.20]# base/bin/mysql -uroot -S /hwdata/data/mysql5.7.20/data/s1/s1.sock -e "insert into test.t1 values(null,'111')"[root@jiessie mysql5.7.20]# base/bin/mysql -uroot -S /hwdata/data/mysql5.7.20/data/s1/s1.sock -e "select * from test.t1"+----+------+| id | name |+----+------+| 1 | 111 |+----+------+[root@jiessie mysql5.7.20]# base/bin/mysql -uroot -S /hwdata/data/mysql5.7.20/data/s1/s1.sock -e "show binlog events in 'binlog.000006'" +---------------+-----+----------------+-----------+-------------+--------------------------------------------------------------------------------------------+| Log_name | Pos | Event_type | Server_id | End_log_pos | Info |+---------------+-----+----------------+-----------+-------------+--------------------------------------------------------------------------------------------+| binlog.000006 | 4 | Format_desc | 1 | 123 | Server ver: 5.7.20-log, Binlog ver: 4 || binlog.000006 | 123 | Previous_gtids | 1 | 190 | aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1-19 || binlog.000006 | 190 | Gtid | 1 | 251 | SET @@SESSION.GTID_NEXT= 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:20' || binlog.000006 | 251 | Query | 1 | 360 | create database if not exists test || binlog.000006 | 360 | Gtid | 1 | 421 | SET @@SESSION.GTID_NEXT= 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:21' || binlog.000006 | 421 | Query | 1 | 582 | create table test.t1(id int unsigned not null auto_increment primary key,name varchar(20)) || binlog.000006 | 582 | Gtid | 1 | 643 | SET @@SESSION.GTID_NEXT= 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:22' || binlog.000006 | 643 | Query | 1 | 712 | BEGIN || binlog.000006 | 712 | Table_map | 1 | 756 | table_id: 223 (test.t1) || binlog.000006 | 756 | Write_rows | 1 | 796 | table_id: 223 flags: STMT_END_F || binlog.000006 | 796 | Xid | 1 | 823 | COMMIT /* xid=151 */ |+---------------+-----+----------------+-----------+-------------+--------------------------------------------------------------------------------------------+[root@jiessie mysql5.7.20]# 其他节点查看数据 12345678910111213141516171819202122232425262728293031323334353637383940414243444546[root@jiessie mysql5.7.20]# base/bin/mysql -uroot -S /hwdata/data/mysql5.7.20/data/s2/s2.sock -e "show binlog events in 'binlog.000004'" +---------------+-----+----------------+-----------+-------------+--------------------------------------------------------------------------------------------+| Log_name | Pos | Event_type | Server_id | End_log_pos | Info |+---------------+-----+----------------+-----------+-------------+--------------------------------------------------------------------------------------------+| binlog.000004 | 4 | Format_desc | 2 | 123 | Server ver: 5.7.20-log, Binlog ver: 4 || binlog.000004 | 123 | Previous_gtids | 2 | 190 | aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1-19 || binlog.000004 | 190 | Gtid | 1 | 251 | SET @@SESSION.GTID_NEXT= 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:20' || binlog.000004 | 251 | Query | 1 | 360 | create database if not exists test || binlog.000004 | 360 | Gtid | 1 | 421 | SET @@SESSION.GTID_NEXT= 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:21' || binlog.000004 | 421 | Query | 1 | 582 | create table test.t1(id int unsigned not null auto_increment primary key,name varchar(20)) || binlog.000004 | 582 | Gtid | 1 | 643 | SET @@SESSION.GTID_NEXT= 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:22' || binlog.000004 | 643 | Query | 1 | 707 | BEGIN || binlog.000004 | 707 | Table_map | 1 | 751 | table_id: 221 (test.t1) || binlog.000004 | 751 | Write_rows | 1 | 791 | table_id: 221 flags: STMT_END_F || binlog.000004 | 791 | Xid | 1 | 818 | COMMIT /* xid=71 */ |+---------------+-----+----------------+-----------+-------------+--------------------------------------------------------------------------------------------+[root@jiessie mysql5.7.20]# base/bin/mysql -uroot -S /hwdata/data/mysql5.7.20/data/s3/s3.sock -e "show binlog events in 'binlog.000004'" +---------------+-----+----------------+-----------+-------------+--------------------------------------------------------------------------------------------+| Log_name | Pos | Event_type | Server_id | End_log_pos | Info |+---------------+-----+----------------+-----------+-------------+--------------------------------------------------------------------------------------------+| binlog.000004 | 4 | Format_desc | 3 | 123 | Server ver: 5.7.20-log, Binlog ver: 4 || binlog.000004 | 123 | Previous_gtids | 3 | 190 | aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1-19 || binlog.000004 | 190 | Gtid | 1 | 251 | SET @@SESSION.GTID_NEXT= 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:20' || binlog.000004 | 251 | Query | 1 | 360 | create database if not exists test || binlog.000004 | 360 | Gtid | 1 | 421 | SET @@SESSION.GTID_NEXT= 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:21' || binlog.000004 | 421 | Query | 1 | 582 | create table test.t1(id int unsigned not null auto_increment primary key,name varchar(20)) || binlog.000004 | 582 | Gtid | 1 | 643 | SET @@SESSION.GTID_NEXT= 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:22' || binlog.000004 | 643 | Query | 1 | 707 | BEGIN || binlog.000004 | 707 | Table_map | 1 | 751 | table_id: 221 (test.t1) || binlog.000004 | 751 | Write_rows | 1 | 791 | table_id: 221 flags: STMT_END_F || binlog.000004 | 791 | Xid | 1 | 818 | COMMIT /* xid=58 */ |+---------------+-----+----------------+-----------+-------------+--------------------------------------------------------------------------------------------+[root@jiessie mysql5.7.20]# base/bin/mysql -uroot -S /hwdata/data/mysql5.7.20/data/s2/s2.sock -e "select * from test.t1" +----+------+| id | name |+----+------+| 1 | 111 |+----+------+You have new mail in /var/spool/mail/root[root@jiessie mysql5.7.20]# base/bin/mysql -uroot -S /hwdata/data/mysql5.7.20/data/s3/s3.sock -e "select * from test.t1" +----+------+| id | name |+----+------+| 1 | 111 |+----+------+[root@jiessie mysql5.7.20]# 节点状态查询注意：主机名和/etc/hosts中的信息要保持一致，否则可能会报“There was an error when connecting to the donor server. Please check that group_replication_recovery channel credentials and all MEMBER_HOST column values of performance_schema.replication_group_members table are correct and DNS resolvable.”1234567891011mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+-------------+-------------+--------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+-------------+-------------+--------------+| group_replication_applier | c0acc2c7-d58a-11e7-b59f-00163e00dc49 | jiessie | 9001 | ONLINE || group_replication_applier | cf04e66c-d58a-11e7-b97e-00163e00dc49 | jiessie | 9002 | ONLINE || group_replication_applier | d4286108-d58a-11e7-807d-00163e00dc49 | jiessie | 9003 | ONLINE |+---------------------------+--------------------------------------+-------------+-------------+--------------+3 rows in set (0.00 sec)mysql&gt; 监控组复制假设MySQL已经在启用了性能模式的情况下编译，使用performance_schema表监控组复制 replication_group_member_stats复制组中的每个成员都会验证并应用该组提交的事务,有关验证和应用程序的统计信息对于了解申请队列增长情况,触发了多少冲突,检查了多少事务,哪些事务已被所有成员提交等非常有用,performance_shcema.replication_group_member_stats提供与认证过程相关的以下信息1234567mysql&gt; select * from performance_schema.replication_group_member_stats;+---------------------------+---------------------+--------------------------------------+-----------------------------+----------------------------+--------------------------+------------------------------------+-------------------------------------------+-----------------------------------------+| CHANNEL_NAME | VIEW_ID | MEMBER_ID | COUNT_TRANSACTIONS_IN_QUEUE | COUNT_TRANSACTIONS_CHECKED | COUNT_CONFLICTS_DETECTED | COUNT_TRANSACTIONS_ROWS_VALIDATING | TRANSACTIONS_COMMITTED_ALL_MEMBERS | LAST_CONFLICT_FREE_TRANSACTION |+---------------------------+---------------------+--------------------------------------+-----------------------------+----------------------------+--------------------------+------------------------------------+-------------------------------------------+-----------------------------------------+| group_replication_applier | 15120910223421577:3 | c0acc2c7-d58a-11e7-b59f-00163e00dc49 | 0 | 13 | 0 | 0 | aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1-22 | aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:22 |+---------------------------+---------------------+--------------------------------------+-----------------------------+----------------------------+--------------------------+------------------------------------+-------------------------------------------+-----------------------------------------+1 row in set (0.00 sec) 参数解释 Field 描述 CHANNEL_NAME 组复制通道的名称 VIEW_ID 组复制当前视图标识符 MEMBER_ID 当前连接到server成员的UUID,组中的每个成员具有不同的值 COUNT_TRANSACTIONS_IN_QUEUE 队列中等待冲突检测检查的事务数,冲突检查通过后,他们排队等待应用 COUNT_TRANSACTIONS_CHECKED 已进行过冲突检查的事务数 COUNT_CONFLICTS_DETECTED 未通过冲突检查的事务数 COUNT_TRANSACTIONS_ROWS_VALIDATING 可用于认证的事务行的数量，但没有被垃圾收集 TRANSACTIONS_COMMITTED_ALL_MEMBERS 当前视图的所有成员成功提交的事务,此值为固定的时间间隔更新 LAST_CONFLICT_FREE_TRANSACTION 最后一个经检查无冲突的事务标识符 replication_group_members用于监控在当前视图中的不同server实例的状态123456789mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+-------------+-------------+--------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+-------------+-------------+--------------+| group_replication_applier | c0acc2c7-d58a-11e7-b59f-00163e00dc49 | jiessie | 9001 | ONLINE || group_replication_applier | cf04e66c-d58a-11e7-b97e-00163e00dc49 | jiessie | 9002 | ONLINE || group_replication_applier | d4286108-d58a-11e7-807d-00163e00dc49 | jiessie | 9003 | ONLINE |+---------------------------+--------------------------------------+-------------+-------------+--------------+3 rows in set (0.00 sec) 参数解释 Field 描述 CHANNEL_NAME 组复制通道的名称 MEMBER_ID server成员的UUID MEMBER_HOST 组成员的网络地址 MEMBER_PORT 侦听此成员的MySQL连接端口 MEMBER_STATE 组成员的状态 replication_connection_status此表显示处理从服务器连接主服务器的IO线程的当前状态1234567mysql&gt; select * from performance_schema.replication_connection_status;+---------------------------+--------------------------------------+--------------------------------------+-----------+---------------+---------------------------+--------------------------+-------------------------------------------+-------------------+--------------------+----------------------+| CHANNEL_NAME | GROUP_NAME | SOURCE_UUID | THREAD_ID | SERVICE_STATE | COUNT_RECEIVED_HEARTBEATS | LAST_HEARTBEAT_TIMESTAMP | RECEIVED_TRANSACTION_SET | LAST_ERROR_NUMBER | LAST_ERROR_MESSAGE | LAST_ERROR_TIMESTAMP |+---------------------------+--------------------------------------+--------------------------------------+-----------+---------------+---------------------------+--------------------------+-------------------------------------------+-------------------+--------------------+----------------------+| group_replication_applier | aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa | aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa | NULL | ON | 0 | 0000-00-00 00:00:00 | aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1-22 | 0 | | 0000-00-00 00:00:00 |+---------------------------+--------------------------------------+--------------------------------------+-----------+---------------+---------------------------+--------------------------+-------------------------------------------+-------------------+--------------------+----------------------+1 row in set (0.00 sec) 参数解释 Field 描述 CHANNEL_NAME 组复制通道的名称 GROUP_NAME 如果此服务器是组的成员，则显示服务器所属的组的名称 SOURCE_UUID 组的标识符,类似组名称,被用作组复制期间生成的所有事务的UUID THREAD_ID IO线程ID SERVICE_STATE IO状态,ON（线程存在并处于活动状态或空闲状态）,OFF（线程不再存在）或CONNECTING（线程存在并连接到主控制器） COUNT_RECEIVED_HEARTBEATS 从上次重新启动或复位复制从服务器接收到的心跳信号的总数或发出CHANGE MASTER TO语句 LAST_HEARTBEAT_TIMESTAMP YYMMDD HH:MM:SS格式中 的时间戳，显示复制从站接收到最新的心跳信号的时间 RECEIVED_TRANSACTION_SET 此GTID集合中的事务已由该组的此成员接收 LAST_ERROR_NUMBER 导致IO线程停止的错误号 LAST_ERROR_MESSAGE 导致IO线程停止的错误消息 LAST_ERROR_TIMESTAMP YYMMDD HH:MM:SS格式 的时间戳,IO发生错误的时间 与show slave status的对应关系 replication_connection_status Column SHOW SLAVE STATUS Column SOURCE_UUID Master_UUID THREAD_ID None SERVICE_STATE Slave_IO_Running RECEIVED_TRANSACTION_SET Retrieved_Gtid_Set LAST_ERROR_NUMBER Last_IO_Errno LAST_ERROR_MESSAGE Last_IO_Error LAST_ERROR_TIMESTAMP Last_IO_Error_Timestamp replication_applier_status此表显示从服务器上当前的一般事务执行状态1234567mysql&gt; select * from performance_schema.replication_applier_status;+---------------------------+---------------+-----------------+----------------------------+| CHANNEL_NAME | SERVICE_STATE | REMAINING_DELAY | COUNT_TRANSACTIONS_RETRIES |+---------------------------+---------------+-----------------+----------------------------+| group_replication_applier | ON | NULL | 0 |+---------------------------+---------------+-----------------+----------------------------+1 row in set (0.00 sec) 参数解释 Field 描述 CHANNEL_NAME 组复制通道的名称 SERVICE_STATE 显示复制通道状态是ON还是OFF REMAINING_DELAY 如果从站在DESIRED_DELAY主站应用事件之后等待 秒数，则此字段包含剩余的延迟秒数。 COUNT_TRANSACTIONS_RETRIES 显示由于从属SQL线程未能应用事务而发生的重试次数。 与show slave status的对应关系 replication_connection_status Column SHOW SLAVE STATUS Column SERVICE_STATE None REMAINING_DELAY SQL_Remaining_Delay 组复制中的server状态 Field 描述 Group Synchronized ONLINE 该成员可以作为一个具有所有功能的组成员,这意味着客户端可以连接并开始执行事务 Yes RECOVERING 该成员正在成为该组的有效成员,并且正处于恢复过程中,从数据源节点接收状态信息 No OFFLINE 插件已加载,但成员不属于任何组 No ERROR 本地成员的状态,只要恢复阶段或应用更改时出现错误,server就会进入此状态 No UNREACHABLE 每当本地故障检测器怀疑某个给定的server可能由于已经崩溃或被意外地断开而不可访问时,server的状态显示为”UNREACHABLE” No 故障演练通过模拟其中一个节点故障后,主节点是否会自动迁移,故障节点恢复后,数据是否会自动同步 查看当前组复制状态登录节点1,查看组复制状态,确认当前节点1为主节点1234567891011121314151617181920212223242526272829303132[root@jiessie mysql5.7.20]# base/bin/mysql -uroot -S /hwdata/data/mysql5.7.20/data/s1/s1.sock Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 30Server version: 5.7.20-log MySQL Community Server (GPL)Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+-------------+-------------+--------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+-------------+-------------+--------------+| group_replication_applier | c0acc2c7-d58a-11e7-b59f-00163e00dc49 | jiessie | 9001 | ONLINE || group_replication_applier | cf04e66c-d58a-11e7-b97e-00163e00dc49 | jiessie | 9002 | ONLINE || group_replication_applier | d4286108-d58a-11e7-807d-00163e00dc49 | jiessie | 9003 | ONLINE |+---------------------------+--------------------------------------+-------------+-------------+--------------+3 rows in set (0.00 sec)mysql&gt; select * from performance_schema.global_status where variable_name = 'group_replication_primary_member';+----------------------------------+--------------------------------------+| VARIABLE_NAME | VARIABLE_VALUE |+----------------------------------+--------------------------------------+| group_replication_primary_member | c0acc2c7-d58a-11e7-b59f-00163e00dc49 |+----------------------------------+--------------------------------------+1 row in set (0.00 sec)mysql&gt; 模拟主节点故障12mysql&gt; shutdown;Query OK, 0 rows affected (0.00 sec) 确认当前组复制状态节点1的9001服务已经不存在,通过登录9002查看组成员状态,9002节点已经成为新节点12345678910111213141516171819202122232425262728293031323334[root@jiessie mysql5.7.20]# netstat -tunlp|grep mysql|grep 900 tcp 0 0 0.0.0.0:9002 0.0.0.0:* LISTEN 22034/mysqld tcp 0 0 0.0.0.0:9003 0.0.0.0:* LISTEN 6059/mysqld [root@jiessie mysql5.7.20]# base/bin/mysql -uroot -S /hwdata/data/mysql5.7.20/data/s2/s2.sockWelcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 28Server version: 5.7.20-log MySQL Community Server (GPL)Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+-------------+-------------+--------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+-------------+-------------+--------------+| group_replication_applier | cf04e66c-d58a-11e7-b97e-00163e00dc49 | jiessie | 9002 | ONLINE || group_replication_applier | d4286108-d58a-11e7-807d-00163e00dc49 | jiessie | 9003 | ONLINE |+---------------------------+--------------------------------------+-------------+-------------+--------------+2 rows in set (0.00 sec)mysql&gt; select * from performance_schema.global_status where variable_name = 'group_replication_primary_member';+----------------------------------+--------------------------------------+| VARIABLE_NAME | VARIABLE_VALUE |+----------------------------------+--------------------------------------+| group_replication_primary_member | cf04e66c-d58a-11e7-b97e-00163e00dc49 |+----------------------------------+--------------------------------------+1 row in set (0.00 sec)mysql&gt; 组复制新主节点插入数据123456789101112131415mysql&gt; create table test.t2(id int unsigned not null auto_increment primary key,age int);Query OK, 0 rows affected (0.02 sec)mysql&gt; insert into test.t2 values(null,111111);Query OK, 1 row affected (0.00 sec)mysql&gt; select * from test.t2;+----+--------+| id | age |+----+--------+| 2 | 111111 |+----+--------+1 row in set (0.00 sec)mysql&gt; 从节点查看数据12345678910111213141516171819202122[root@jiessie mysql5.7.20]# base/bin/mysql -uroot -S /hwdata/data/mysql5.7.20/data/s3/s3.sock Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 46Server version: 5.7.20-log MySQL Community Server (GPL)Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.mysql&gt; select * from test.t2;+----+--------+| id | age |+----+--------+| 2 | 111111 |+----+--------+1 row in set (0.00 sec)mysql&gt; 故障节点恢复故障节点恢复后,登录实例,启动组复制1234567891011[root@jiessie mysql5.7.20]# base/bin/mysqld_safe --defaults-file=/hwdata/data/mysql5.7.20/conf/s1.cnf &amp; [6] 22692[root@jiessie mysql5.7.20]# 2017-12-01T07:35:42.377430Z mysqld_safe Logging to '/hwdata/data/mysql5.7.20/data/s1/jiessie.err'.2017-12-01T07:35:42.396416Z mysqld_safe Starting mysqld daemon with databases from /hwdata/data/mysql5.7.20/data/s1[root@jiessie mysql5.7.20]# netstat -tunlp|grep mysql|grep 900tcp 0 0 0.0.0.0:9001 0.0.0.0:* LISTEN 23135/mysqld tcp 0 0 0.0.0.0:9002 0.0.0.0:* LISTEN 22034/mysqld tcp 0 0 0.0.0.0:9003 0.0.0.0:* LISTEN 6059/mysqld [root@jiessie mysql5.7.20]# base/bin/mysql -uroot -S /hwdata/data/mysql5.7.20/data/s1/s1.sock -e "START GROUP_REPLICATION;"[root@jiessie mysql5.7.20]# 再次查看组复制状态及插入数据状态故障节点已经加入到组复制中,同时故障期间插入的数也已经同步过来,主节点还是节点2的9002实例1234567891011121314151617181920212223242526272829303132333435363738[root@jiessie mysql5.7.20]# base/bin/mysql -uroot -S /hwdata/data/mysql5.7.20/data/s1/s1.sockWelcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 48Server version: 5.7.20-log MySQL Community Server (GPL)Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.mysql&gt; SELECT * FROM performance_schema.replication_group_members;+---------------------------+--------------------------------------+-------------+-------------+--------------+| CHANNEL_NAME | MEMBER_ID | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |+---------------------------+--------------------------------------+-------------+-------------+--------------+| group_replication_applier | c0acc2c7-d58a-11e7-b59f-00163e00dc49 | jiessie | 9001 | ONLINE || group_replication_applier | cf04e66c-d58a-11e7-b97e-00163e00dc49 | jiessie | 9002 | ONLINE || group_replication_applier | d4286108-d58a-11e7-807d-00163e00dc49 | jiessie | 9003 | ONLINE |+---------------------------+--------------------------------------+-------------+-------------+--------------+3 rows in set (0.00 sec)mysql&gt; select * from performance_schema.global_status where variable_name = 'group_replication_primary_member';+----------------------------------+--------------------------------------+| VARIABLE_NAME | VARIABLE_VALUE |+----------------------------------+--------------------------------------+| group_replication_primary_member | cf04e66c-d58a-11e7-b97e-00163e00dc49 |+----------------------------------+--------------------------------------+1 row in set (0.00 sec)mysql&gt; select * from test.t2;+----+--------+| id | age |+----+--------+| 2 | 111111 |+----+--------+1 row in set (0.00 sec) 组复制系统变量 变量名 变量范围 动态变量 类型 默认 描述 group_replication_group_name Global Yes string NULL 此server实例所属组名称,须是UUID格式 group_replication_start_on_boot Global Yes boolean ON server是否应在自身启动期间启动组复制 group_replication_local_address Global Yes string NULL 作为本地地址,格式为主机:端口 group_replication_member_weight Global Yes integer 50 可以分配成员的百分比权重,影响成员在发生故障转移时作为主要成员选举的机会 group_replication_group_seeds Global Yes string NULL 提供加入成员的成员列表,其中加入成员需要的数据以获得与该组的同步 group_replication_force_members Global Yes string NULL 以逗号分隔开的组内其他成员的地址列表.此选项用于强制建立新的组成员关系,在此过程中已排除的成员不接收新的视图并且被排除在外.您需要手动移除已排除的server group_replication_bootstrap_group Global Yes boolean OFF 配置此server以引导组,此选项只能在一个server上设置,且只能在首次启动组或重启整个组时设置.组被引导后,将此选项设置为OFF. group_replication_poll_spin_loops Global Yes integer 0 在组通信线程等待传入更多的网络信息之前,等待mutex被释放的次数 group_replication_recovery_retry_count Global Yes integer 10 要加入的成员尝试连接到可用数据源节点的次数 group_replication_recovery_reconnect_interval Global Yes integer 60 在组中找不到数据源节点时,重新尝试连接的时间间隔 group_replication_recovery_use_ssl Global Yes boolean OFF 组复制恢复通道是否使用SSL group_replication_recovery_ssl_ca Global Yes string NULL 包含受信任SSL证书颁发机构列表的文件的路径 group_replication_recovery_ssl_capath Global Yes string NULL 包含受信任SSL证书颁发证书的目录路径 group_replication_recovery_ssl_cert Global Yes string NULL 用于建立安全连接的SSL证书文件的名称 group_replication_recovery_ssl_key Global Yes string NULL 用于建立安全连接的SSL密钥文件的名称 group_replication_recovery_ssl_cipher Global Yes string NULL 用于SSL加密的密码列表 group_replication_recovery_ssl_crl Global Yes string NULL 包含具有证书撤销列表文件的路径 group_replication_recovery_ssl_crlpath Global Yes string NULL 包含具有证书撤销列表文件的路径 group_replication_recovery_ssl_verify_server_cert Global Yes boolean OFF 在恢复过程中用于检查数据源节点发送证书中的”通用名称” group_replication_recovery_complete_at Global Yes enumeration TRANSACTIONS_APPLIED 状态传输后处理缓存中的事务时的恢复策略.此选项指定成员在”接收到加入群组(TRANSACTIONS_CERTIFIED)之前遗漏的所有事务”或”收到并应用了这些事务(TRANSACTIONS_APPLIED)”之后,是否标记在线 group_replication_components_stop_timeout Global Yes integer 31536000 组复制在关闭时等待每个组件的超时时间,以秒为单位 group_replication_allow_local_lower_version_join Global Yes boolean OFF 即使当前server的插件版本比组的插件版本低,也允许它加入组 group_replication_allow_local_disjoint_gtids_join Global Yes boolean OFF 即使含有组中不存在的事务,也允许当前server加入组,此选项要慎重,可能会破坏组内一致性 group_replication_auto_increment_increment Global Yes integer 7 确定在此server实例上执行的连续事务之间的步长 group_replication_compression_threshold Global Yes integer 1000000 以字节为单位,超过该值将强制执行lz4压缩,当设置为0时,压缩设置无效 group_replication_gtid_assignment_block_size Global Yes integer 1000000 为每个成员保留的连接GTID数量,每个成员在开始时会消耗掉一些,当需要时在获取更多个 group_replication_ssl_mode Global Yes enumeration DISABLED 指定组复制成员之间连接的安全状态 group_replication_single_primary_mode Global Yes boolean ON 设置组自动选择一个server来处理读写工作,这个server是主(primary),所有其他都是从(secondaries) group_replication_transaction_size_limit Global Yes integer 0 配置组接受最大事务大小,以字节为单位,大于这个事务被回滚.当设置为0时,无限制 group_replication_unreachable_majority_timeout Global Yes integer 0 配置在离开组之前遭受网络分区且无法连接到大多数成员的成员需要等待多长时间,默认情况为0,这意味着由于网络分区而成为少数的成员永远等待连接组. group_replication_enforce_update_everywhere_checks Global Yes boolean OFF 多主模式下为多主更新或禁用严格一致性检查 group_replication_flow_control_mode Global Yes enumeration QUOTA 指定启用限流模式,不需要重置组复制就可以修改此变量 group_replication_flow_control_certifier_threshold Global Yes integer 25000 触发限流的验证队列的阈值,不需要重置组复制就可以修改此变量 group_replication_flow_control_applier_threshold Global Yes integer 25000 触发限流的应用队列的阈值,不需要重置组复制就可以修改此变量 group_replication_ip_whitelist Global Yes string AUTOMATIC 指定允许哪些主机可以访问组,默认为AUTOMATIC,它允许来自主机上的私有子网的连接,多个以逗号分隔 组复制的多主和单主模式默认为单主模式,组中的成员不可能以不同的模式部署,例如一个配置为多主模式,另一个配置为单主模式.要切换模式,组和服务器之间需要不的操作配置重新启动.无论部署模式如何,组复制不处理客户端故障切换,必须由应用程序本身,连接器或中间件框架如代理或路由器来处理. 单主模式在此模式下,该组具有设置为读写械的单主服务器,组中的所有其他成员都设置为只读模式(超级只读模式super_read_only),所有其他加入的节点自动识别主节点并设置为自己为只读. 选主过程参考官方流程图:在单主机模式下，将禁用在多主机模式下部署的某些检查，因为系统会强制每次只有一个写入节点。例如，允许对具有级联外键的表进行更改，而在多主模式下不允许。在主节点故障时，自动选举机制选择下一个主节点。通过按字典顺序（使用其UUID）并选择列表中的第一个节点来排序剩余的节点来选择下一个主节点,可通过group_replication_member_weight此参数影响选主。如果主节点从组中删除，则执行选择，并从组中的其余节点中选择新的主节点，这个选择按照词典顺序排序节点UUID并选择第一个来执行。一旦选择了新的主节点，其他节点将设置为从节点，从节点为只读。 多主模式在多主模式下，没有单个主模式的概念，也没有选举程序，因为没有节点发挥任何特殊的作用。加入组时，所有服务器都设置为读写模式。在多主模式下部署时,将检查语句以确保他们与模式兼容,以多主模式部署组复制时进行以下检查: 如果一个事务在SERIALIZABLE隔离级别下执行，那么当它自己与该组同步时，它的提交失败。 如果事务针对具有级联约束的外键的表执行，则在与组自身同步时，事务无法提交。这些检查可以通过设置选项来禁用 group_replication_enforce_update_everywhere_checks 到FALSE。在单主模式下部署时，必须将此选项设置为FALSE。客户端故障转移参考官方流程图:运维相关问题故障切换目前MySQL官方没有发布连接组复制专用的客户端（如MongoDB连接复制集的客户端），在实际的应用中如果发生故障，需要客户端自己来处理。对于单主模式的话，如果主节点发生故障，客户端需要判断新的主节点是谁，然后把写切换到新的主节点，基本上和当前的异步同步的主从切换一样，并且新的主节点是集群自动产生，不可控；多主模式需要在客户端进行节点可用性检查，当其中的一个写节点不可用时自动使用其他可用节点。大事务支持问题目前版本测试并发进行大数据操作和DDL操作时，kill掉大事务，有几率造成集群不可用；在insert into …….select……limit……这种大事务支持不好，可能造成集群不用；多主模式进行DDL操作需要集群内所有节点都为ONLINE状态才可执行，处于ERROR和RECOVERING状态时有几率导致集群堵塞，严重时集群不可用。备份问题在组复制集群其中的一个节点上执行数据库备份时，不管使用mysqldump（这个不能使用–single-transaction参数，生产中不建议使用mysqldump备份集群数据）或是使用xtrabackup的QPS下降40%，并且备份节点基本停止读写。在测试备份文件导入数据时，多主模式要比单主模式慢。推荐使用组复制+异步复制方式，在异步复制的从节点上进行数据库备份。二进制日志删除问题因为组复制同步还是基于二进制日志来进行同步的，清理某个节点bin-log时，必须判定这个日志文件是否还在使用，如果在使用，则绝对不能删除，如果删除，则整个集群直接ERROR。同步延迟问题目前MySQL5.7.20的版本中无法直观查看节点同步延迟，也无法获取延迟多少，不管是时间或事物数，这个打开MySQL的Debug模式，可以获取到节点的延迟事务情况。组复制的延迟对集群是有影响的，一旦出现延迟（默认延迟25000个事务），则启动流量控制（Flow Control），每个周期性能衰减当前的10%,直到集群不可用（但集群节点状态为online），单个节点慢整个集群全慢。集群中的每个节点都会验证并应用该组提交的事务，有关校验和应用程序过程的统计信息对于了解应用程序队列如何增长，已找到多少冲突，检查了多少事务，在哪里提交了哪些事务等等非常有用。表 performance_schema.replication_group_member_stats 提供与事务认证过程的相关信息，但没有延迟信息。相关字段解释请参考文件数据一致性问题不管是多写还是单写，都并非是强一致性，均允许有延迟，他在校验完事务是否冲突后把当前广播到各个节点并确定各个节点收到事务后即进入下一个事物的冲突检测，此时每个节点只是拿到了所有事务的执行序列，保证了事务最终顺序执行，从而保证数据的最终一致性，但同一时刻并非强一致性的。 节点故障脑裂问题节点越多性能损耗越大，三个节点比较合适。节点故障可能有脑裂等问题：如5个节点分布在两个机房，机房间网络断掉分为两个部分，2个集群的机房不可用，3个节点的可用，而三个节点的机房网络有问题，此时如果想使两个节点的机房可用，需要重新对两个节点做集群重组，三个节点的就无法恢复到两个节点中去；三节点中其中一个节点宕机，其他两个正常节点可用，故障节点重启没有加入到集群时，此时这个节点以单实例存在可读写，此时会发生脑裂。### 弹性扩展问题MySQL官方网站提到了组复制的弹性自动扩展，经过实际测试，这种扩展在生产中是不现实的。可用于生产的弹性扩展要求新加入一个集群，集群中的数据完全由集群来完成自动同步，但由于组复制是基于二进制日志来进行同步的，生产中是不可能完整保留全部的二进制日志，在新加入的节点需要先备份出集群的全量数据，然后根据同步位置去追事务达到数据的一致后节点状态online状态，其实和之前异步同步搭建主从一样。并且官方提示如果恢复时的延迟过大，可能也无法正常达到追到最新数据的位置。客户端连接问题官方说明中关于故障处理的时候有一句话：组复制不处理客户端故障切换，它必须由应用程序本身，连接器或中间件框架（如代理或路由器）处理。FAQ参考官方文档总结目前MGR还不太成熟,但为MySQL的发展指明了方向,相信在未来的MySQL版本中,MGR能够越来越完善.]]></content>
      <categories>
        <category>集群高可用</category>
      </categories>
      <tags>
        <tag>MGR</tag>
        <tag>Group Replication</tag>
        <tag>MySQL Group Replication</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Aliyun ECS搭建MHA+Keepalived+VIP+MySQL5.7]]></title>
    <url>%2FAliyun-ECS%E6%90%AD%E5%BB%BAMHA-Keepalived-VIP-MySQL5-7.html</url>
    <content type="text"><![CDATA[前言随着云服务的迅速发展，越来越多企业选择将服务托管在云服务中，在数据库领域，AWS RDS、Aliyun RDS等都是不错的选择，默认已经做了高可用，基础运维，可以为企业节省不少的运维成本。由于RDS物理数据、Root权限等其他对象对用户不开放，难免在自动化运维中有些壁垒。本文将围绕在Aliyun ECS结合MHA做MySQL的高可用，ECS不支持VIP，但阿里的产品高可用虚拟IP（HaVip）结合keepliaved等第三方软件可间接实现ip的漂移，可满足我们的需求。 MHA简介MHA是由日本MySQL专家youshimaton(现就职于Facebook公司)用Perl写的一套MySQL故障切换方案，以保障数据库的高可用性。在MySQL故障切换过程中，MHA能做到在0~30s之内实现主MySQL故障转移。该软件由两部分组成：MHA Manager（管理节点）和MHA Node（数据节点）。MHA Manager可以单独部署在一台独立的机器上管理多个master-slave集群，也可以部署在一台slave节点上。MHA Node运行在每台MySQL服务器上，MHA Manager会定时探测集群中的master节点，当master出现故障时，它可以自动将最新数据的slave提升为新的master，然后将所有其他的slave重新指向新的master。整个故障转移过程对应用程序完全透明。 高可用虚拟IP限制 每个VPC中最多只能同时存在5个vip对象 目前VPC中的网络通信不支持多播和广播，只支持单播；所以，如果用户是使用keepalived之类的第三方软件实现高可用，需要通过配置文件把通信方式改成单播；网上可以找到相应的方法 如果是使用keepalived之类的第三方软件，需要把信条消息的源IP改成ECS的私网IP（而不要用HaVip的私网IP进行心跳检查），不然很容易造成脑裂 当HaVip与EIP绑定后，进行公网通信时，持有HaVip的ECS实例应该通过HaVip的私网ip进行公网通信（而不是ECS自己的私网IP）；因为这时EIP是映射在HaVip的私网IP上，而不是映射在ECS的私网IP上 类似的，当使用HaVip做自建SNAT网关的高可用时，SNAT实例上配置的SNAT规则中，source IP应该是havip的私网IP而不是自己的private IP 准备操作系统：Linux Centos 6.5master：192.168.16.80slave: 192.168.16.81vip: 192.168.16.82 （注：需要和HaVip的私网IP一致）其中，使用两台机器，分别部署主库和从库，MHA默认部署在从库上，下方中的VIP通EIP，最终是要把EIP和HaVip绑定在一起 系统初始化修改修改主机名主库修改主机名12345[root@master ~]# cat /etc/sysconfig/network|grep HOSTNAMEHOSTNAME=master[root@master ~]# cat /etc/hosts|grep master192.168.16.80 master[root@master ~]# 从库修改主机名12345[root@slave ~]# cat /etc/sysconfig/network|grep HOSTNAMEHOSTNAME=slave[root@slave ~]# cat /etc/hosts|grep slave192.168.16.81 slave[root@slave ~]# 设置防火墙主库设置，允许从库访问123[root@master ~]# /etc/init.d/iptables status|grep 192.168.16.8111 ACCEPT all -- 192.168.16.81 0.0.0.0/0 [root@master ~]# 其中，192.168.16.81是允许从库的访问规则 从库设置，允许主库访问123[root@slave ~]# /etc/init.d/iptables status|grep 192.168.16.8011 ACCEPT all -- 192.168.16.80 0.0.0.0/0 [root@slave ~]# 其中，192.168.16.80是允许主库的访问规则 关闭SELINUX主库查看123[root@master ~]# cat /etc/sysconfig/selinux |grep -v '#' |grep 'SELINUX=' SELINUX=disabled[root@master ~]# 从库查看123[root@slave ~]# cat /etc/sysconfig/selinux |grep -v '#' |grep 'SELINUX=' SELINUX=disabled[root@slave ~]# 建立SSH无密码登录主库设置修改服务器/etc/ssh/ssh_config文件，把参数GSSAPIAuthentication修改为no修改服务器/etc/ssh/sshd_config文件，把参数PasswordAuthentication修改为yes,参数PermitRootLogin修改为yes,同时AllowUsers把root也添加上,重启ssh服务修改服务器/etc/hosts.allow文件，允许从库连接1234567891011[root@master ~]# sed '/^#/d;/^$/d' /etc/ssh/ssh_config |grep GSSAPIAuthentication GSSAPIAuthentication no[root@master ~]# sed '/^#/d;/^$/d' /etc/ssh/sshd_config |grep -E 'PasswordAuthentication|PermitRootLogin'PermitRootLogin yesPasswordAuthentication yes[root@master ~]# /etc/init.d/sshd restartStopping sshd: [ OK ]Starting sshd: [ OK ][root@master ~]# cat /etc/hosts.allow |grep 192.168.16.81sshd: 192.168.16.81[root@master ~]# 使用命令ssh-keygen生成公钥，发送到从库，同时尝试在主库无密码形式登录从库，而且也要保证本机无密码登录本机12345678910111213141516171819202122232425262728293031323334353637383940414243444546[root@master ~]# ssh-keygen Generating public/private rsa key pair.Enter file in which to save the key (/root/.ssh/id_rsa): Created directory '/root/.ssh'.Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_rsa.Your public key has been saved in /root/.ssh/id_rsa.pub.The key fingerprint is:07:86:76:d6:4a:0f:ea:6e:88:00:eb:3d:5f:7e:08:7a root@masterThe key's randomart image is:+--[ RSA 2048]----+| || . . || o B . ||. . * = ||.. . S o ||o o . ||......o.. || ..+.E+. . || +o... |+-----------------+[root@master ~]# ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.16.81The authenticity of host '192.168.16.81 (192.168.16.81)' can't be established.RSA key fingerprint is 9f:1f:41:f6:2d:e9:20:83:30:be:cd:20:01:31:ea:6d.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '192.168.16.81' (RSA) to the list of known hosts.root@192.168.16.81's password: Now try logging into the machine, with "ssh 'root@192.168.16.81'", and check in: .ssh/authorized_keysto make sure we haven't added extra keys that you weren't expecting.[root@master ~]# ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.16.80The authenticity of host '192.168.16.80 (192.168.16.80)' can't be established.RSA key fingerprint is f2:f8:7d:7d:59:3f:b9:3c:a0:e6:66:54:1f:79:e2:40.Are you sure you want to continue connecting (yes/no)? yesroot@192.168.16.80's password: Now try logging into the machine, with "ssh 'root@192.168.16.80'", and check in: .ssh/authorized_keysto make sure we haven't added extra keys that you weren't expecting.[root@master ~]# 测试登录1234567891011121314151617[root@master ~]# ssh root@192.168.16.81Last login: Wed Oct 11 14:45:10 2017 from 192.168.16.80Welcome to aliyun Elastic Compute Service![root@slave ~]# exitlogoutConnection to 192.168.16.81 closed.[root@master ~]# ssh root@192.168.16.80Last login: Wed Jan 18 16:25:59 2017Welcome to aliyun Elastic Compute Service![root@master ~]# exitlogoutConnection to 192.168.16.80 closed.[root@master ~]# 从库设置和主库保持一致修改服务器/etc/ssh/ssh_config文件，把参数GSSAPIAuthentication修改为no修改服务器/etc/ssh/sshd_config文件，把参数PasswordAuthentication修改为yes,参数PermitRootLogin修改为yes,同时AllowUsers把root也添加上,重启ssh服务修改服务器/etc/hosts.allow文件，允许从库连接 1234567891011[root@slave ~]# sed '/^#/d;/^$/d' /etc/ssh/ssh_config |grep GSSAPIAuthentication GSSAPIAuthentication no[root@slave ~]# sed '/^#/d;/^$/d' /etc/ssh/sshd_config |grep -E 'PasswordAuthentication|PermitRootLogin'PermitRootLogin yesPasswordAuthentication yes[root@slave ~]# /etc/init.d/sshd restartStopping sshd: [ OK ]Starting sshd: [ OK ][root@slave ~]# cat /etc/hosts.allow |grep 192.168.16.80sshd: 192.168.16.80[root@slave ~]# 使用命令ssh-keygen生成公钥，发送到从库，同时尝试在主库无密码形式登录从库，而且也要保证本机无密码登录本机12345678910111213141516171819202122232425262728293031323334353637383940414243444546[root@slave ~]# ssh-keygen Generating public/private rsa key pair.Enter file in which to save the key (/root/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_rsa.Your public key has been saved in /root/.ssh/id_rsa.pub.The key fingerprint is:ae:04:32:4d:3e:d3:b7:5d:4e:d2:50:7a:4c:44:d7:0a root@slaveThe key's randomart image is:+--[ RSA 2048]----+| o= .. || =E. .|| . o o. . || + . + . || o * . S . + || o + o o = || . o . . || . . || . |+-----------------+[root@slave ~]# ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.16.80The authenticity of host '192.168.16.80 (192.168.16.80)' can't be established.RSA key fingerprint is f2:f8:7d:7d:59:3f:b9:3c:a0:e6:66:54:1f:79:e2:40.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '192.168.16.80' (RSA) to the list of known hosts.root@192.168.16.80's password: Now try logging into the machine, with "ssh 'root@192.168.16.80'", and check in: .ssh/authorized_keysto make sure we haven't added extra keys that you weren't expecting.[root@slave ~]# ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.16.81The authenticity of host '192.168.16.81 (192.168.16.81)' can't be established.RSA key fingerprint is 9f:1f:41:f6:2d:e9:20:83:30:be:cd:20:01:31:ea:6d.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '192.168.16.81' (RSA) to the list of known hosts.root@192.168.16.81's password: Now try logging into the machine, with "ssh 'root@192.168.16.81'", and check in: .ssh/authorized_keysto make sure we haven't added extra keys that you weren't expecting.[root@slave ~]# 测试登录1234567891011121314151617[root@slave ~]# ssh root@192.168.16.80Last login: Wed Oct 11 14:48:14 2017 from 192.168.16.80Welcome to aliyun Elastic Compute Service![root@master ~]# exitlogoutConnection to 192.168.16.80 closed.[root@slave ~]# ssh root@192.168.16.81Last login: Wed Oct 11 14:48:10 2017 from 192.168.16.80Welcome to aliyun Elastic Compute Service![root@slave ~]# exitlogoutConnection to 192.168.16.81 closed.[root@slave ~]# MySQL安装使用的是自己打包的RPM包，分别登录主库和从库，直接rpm -ivh percona-server-5.7.18-15.x86_64.rpm 即可，也可使用其他方式安装MySQL1234567891011121314151617[root@master ~]# mv /home/duanwenjie/percona-server-5.7.18-15.x86_64.rpm /usr/src/[root@master ~]# rpm -ivh /usr/src/percona-server-5.7.18-15.x86_64.rpm Preparing... ########################################### [100%]Group 'mail' not found. Creating the user mailbox file with 0600 mode. 1:percona-server ########################################### [100%]error reading information on service /etc/rc.d/init.d/mysqld: No such file or directoryMySQL (Percona Server) PID file could not be found![FAILED]Starting MySQL (Percona Server)...[ OK ]mysqladmin: [Warning] Using a password on the command line interface can be insecure.Warning: Since password will be sent to server in plain text, use ssl connection to ensure password safety.mysql: [Warning] Using a password on the command line interface can be insecure.mysql: [Warning] Using a password on the command line interface can be insecure.mysql: [Warning] Using a password on the command line interface can be insecure.mysql: [Warning] Using a password on the command line interface can be insecure.mysql: [Warning] Using a password on the command line interface can be insecure.mysql: [Warning] Using a password on the command line interface can be insecure.[root@master ~]# 查看是否安装成功,分别登录主库和从库1234567891011121314151617181920212223242526[root@master ~]# mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 12Server version: 5.7.18-15-log PLD/Linux Distribution Percona Server RPMCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [(none)] 15:03:27 &gt; select version();+---------------+| version() |+---------------+| 5.7.18-15-log |+---------------+1 row in set (0.00 sec)MySQL [(none)] 15:03:31 &gt; exitBye[root@master ~]# MySQL互为主备重要参数配置主库必须包含以下参数12345678910[root@master ~]# cat /etc/my.cnf [mysqld]server-id = 1autocommit = 1auto_increment_increment = 1auto_increment_offset = 2log_bin = mysql-bingtid_mode = onenforce_gtid_consistency = 1log_slave_updates 从库必须包含以下参数，注意slave需要动态设置read_only=112345678910111213141516171819202122232425262728[root@slave ~]# cat /etc/my.cnf [mysqld]server-id = 2autocommit = 1auto_increment_increment = 2auto_increment_offset = 2log_bin = mysql-bingtid_mode = onenforce_gtid_consistency = 1log_slave_updatesrelay_log_purge=0[root@slave ~]# mysql -uroot -p -e "show variables like 'read_only'"Enter password: +---------------+-------+| Variable_name | Value |+---------------+-------+| read_only | OFF |+---------------+-------+[root@slave ~]# mysql -uroot -p -e "set global read_only=1"Enter password: [root@slave ~]# mysql -uroot -p -e "show variables like 'read_only'"Enter password: +---------------+-------+| Variable_name | Value |+---------------+-------+| read_only | ON |+---------------+-------+[root@slave ~]# 复制帐号建立由于MySQL版本使用的是5.7，创建用户的方法以之前有些不同 主库创建123456789101112131415161718192021222324252627[root@master ~]# mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 4Server version: 5.7.18-15-log PLD/Linux Distribution Percona Server RPMCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [(none)] 15:09:37 &gt; create user 'slave01'@'192.168.16.81' identified by 'slave123456';Query OK, 0 rows affected (0.00 sec)MySQL [(none)] 15:10:13 &gt; grant replication slave,replication client on *.* to 'slave01'@'192.168.16.81';Query OK, 0 rows affected (0.03 sec)MySQL [(none)] 15:10:39 &gt; flush privileges;Query OK, 0 rows affected (0.00 sec)MySQL [(none)] 15:10:42 &gt; exitBye[root@master ~]# 从库创建123456789101112131415161718192021222324252627[root@slave ~]# mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 7Server version: 5.7.18-15-log PLD/Linux Distribution Percona Server RPMCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [(none)] 15:11:18 &gt; create user 'slave01'@'192.168.16.80' identified by 'slave123456'; Query OK, 0 rows affected (0.01 sec)MySQL [(none)] 15:11:30 &gt; grant replication slave,replication client on *.* to 'slave01'@'192.168.16.80';Query OK, 0 rows affected (0.01 sec)MySQL [(none)] 15:11:40 &gt; flush privileges;Query OK, 0 rows affected (0.00 sec)MySQL [(none)] 15:11:43 &gt; exitBye[root@slave ~]# 复制帐号验证主库登录从库12345678[root@master ~]# mysql -uslave01 -pslave123456 -h192.168.16.81 -e "select version()" mysql: [Warning] Using a password on the command line interface can be insecure.+---------------+| version() |+---------------+| 5.7.18-15-log |+---------------+[root@master ~]# 从库登录主库12345678[root@slave ~]# mysql -uslave01 -pslave123456 -h192.168.16.80 -e "select version()" mysql: [Warning] Using a password on the command line interface can be insecure.+---------------+| version() |+---------------+| 5.7.18-15-log |+---------------+[root@slave ~]# 复制关系配置主库配置登录主库，设置复制关系，来源于从库的复制123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384[root@master ~]# mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 6Server version: 5.7.18-15-log PLD/Linux Distribution Percona Server RPMCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [(none)] 15:14:07 &gt; change master to master_host='192.168.16.81',master_user='slave01',master_password='slave123456',master_auto_position=1;Query OK, 0 rows affected, 2 warnings (0.03 sec)MySQL [(none)] 15:14:46 &gt; start slave;Query OK, 0 rows affected (0.04 sec)MySQL [(none)] 15:14:49 &gt; show slave status\G*************************** 1. row *************************** Slave_IO_State: Waiting for master to send event Master_Host: 192.168.16.81 Master_User: slave01 Master_Port: 3306 Connect_Retry: 60 Master_Log_File: mysql-bin.000002 Read_Master_Log_Pos: 812 Relay_Log_File: master-relay-bin.000002 Relay_Log_Pos: 1025 Relay_Master_Log_File: mysql-bin.000002 Slave_IO_Running: Yes Slave_SQL_Running: Yes Replicate_Do_DB: Replicate_Ignore_DB: Replicate_Do_Table: Replicate_Ignore_Table: Replicate_Wild_Do_Table: Replicate_Wild_Ignore_Table: Last_Errno: 0 Last_Error: Skip_Counter: 0 Exec_Master_Log_Pos: 812 Relay_Log_Space: 1233 Until_Condition: None Until_Log_File: Until_Log_Pos: 0 Master_SSL_Allowed: No Master_SSL_CA_File: Master_SSL_CA_Path: Master_SSL_Cert: Master_SSL_Cipher: Master_SSL_Key: Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No Last_IO_Errno: 0 Last_IO_Error: Last_SQL_Errno: 0 Last_SQL_Error: Replicate_Ignore_Server_Ids: Master_Server_Id: 2 Master_UUID: e1ec82e8-ae51-11e7-8532-00163e128057 Master_Info_File: mysql.slave_master_info SQL_Delay: 0 SQL_Remaining_Delay: NULL Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates Master_Retry_Count: 86400 Master_Bind: Last_IO_Error_Timestamp: Last_SQL_Error_Timestamp: Master_SSL_Crl: Master_SSL_Crlpath: Retrieved_Gtid_Set: e1ec82e8-ae51-11e7-8532-00163e128057:1-3 Executed_Gtid_Set: df5051fc-ae51-11e7-85ee-00163e0f0e4a:1-3,e1ec82e8-ae51-11e7-8532-00163e128057:1-3 Auto_Position: 1 Replicate_Rewrite_DB: Channel_Name: Master_TLS_Version: 1 row in set (0.00 sec)MySQL [(none)] 15:14:56 &gt; 从库配置登录从库，设置复制关系，来源于主库的复制123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384[root@slave ~]# mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 11Server version: 5.7.18-15-log PLD/Linux Distribution Percona Server RPMCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [(none)] 15:15:42 &gt; change master to master_host='192.168.16.80',master_user='slave01',master_password='slave123456',master_auto_position=1;Query OK, 0 rows affected, 2 warnings (0.05 sec)MySQL [(none)] 15:15:53 &gt; start slave;Query OK, 0 rows affected (0.04 sec)MySQL [(none)] 15:15:55 &gt; show slave status\G*************************** 1. row *************************** Slave_IO_State: Waiting for master to send event Master_Host: 192.168.16.80 Master_User: slave01 Master_Port: 3306 Connect_Retry: 60 Master_Log_File: mysql-bin.000002 Read_Master_Log_Pos: 1470 Relay_Log_File: slave-relay-bin.000002 Relay_Log_Pos: 1072 Relay_Master_Log_File: mysql-bin.000002 Slave_IO_Running: Yes Slave_SQL_Running: Yes Replicate_Do_DB: Replicate_Ignore_DB: Replicate_Do_Table: Replicate_Ignore_Table: Replicate_Wild_Do_Table: Replicate_Wild_Ignore_Table: Last_Errno: 0 Last_Error: Skip_Counter: 0 Exec_Master_Log_Pos: 1470 Relay_Log_Space: 1279 Until_Condition: None Until_Log_File: Until_Log_Pos: 0 Master_SSL_Allowed: No Master_SSL_CA_File: Master_SSL_CA_Path: Master_SSL_Cert: Master_SSL_Cipher: Master_SSL_Key: Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No Last_IO_Errno: 0 Last_IO_Error: Last_SQL_Errno: 0 Last_SQL_Error: Replicate_Ignore_Server_Ids: Master_Server_Id: 1 Master_UUID: df5051fc-ae51-11e7-85ee-00163e0f0e4a Master_Info_File: mysql.slave_master_info SQL_Delay: 0 SQL_Remaining_Delay: NULL Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates Master_Retry_Count: 86400 Master_Bind: Last_IO_Error_Timestamp: Last_SQL_Error_Timestamp: Master_SSL_Crl: Master_SSL_Crlpath: Retrieved_Gtid_Set: df5051fc-ae51-11e7-85ee-00163e0f0e4a:1-3 Executed_Gtid_Set: df5051fc-ae51-11e7-85ee-00163e0f0e4a:1-3,e1ec82e8-ae51-11e7-8532-00163e128057:1-3 Auto_Position: 1 Replicate_Rewrite_DB: Channel_Name: Master_TLS_Version: 1 row in set (0.00 sec)MySQL [(none)] 15:16:00 &gt; 复制测试主库登录测试登录主库，插入测试数据12345678910111213MySQL [test11] 15:17:10 &gt; create table if not exists t11(id int unsigned not null auto_increment,name varchar(20),primary key(`id`));Query OK, 0 rows affected (0.04 sec)MySQL [test11] 15:17:20 &gt; insert into t11 values(null,'master11');Query OK, 1 row affected (0.00 sec)MySQL [test11] 15:17:28 &gt; select * from t11;+----+----------+| id | name |+----+----------+| 1 | master11 |+----+----------+1 row in set (0.00 sec) 登录从库，查看测试数据，此时数据已经复制过来12345678[root@slave ~]# mysql -uroot -p test11 -e "select * from t11"Enter password: +----+----------+| id | name |+----+----------+| 1 | master11 |+----+----------+[root@slave ~]# 从库登录测试登录从库，插入测试数据12345678910111213141516171819MySQL [(none)] 15:18:56 &gt; create database if not exists test11;use test11;Query OK, 1 row affected, 1 warning (0.00 sec)Database changedMySQL [test11] 15:19:20 &gt; create table if not exists t22(id int unsigned not null auto_increment,name varchar(20),primary key(`id`));Query OK, 0 rows affected (0.05 sec)MySQL [test11] 15:19:38 &gt; insert into t22 values(null,'slave11'); Query OK, 1 row affected (0.00 sec)MySQL [test11] 15:19:43 &gt; select * from t22;+----+---------+| id | name |+----+---------+| 2 | slave11 |+----+---------+1 row in set (0.00 sec)MySQL [test11] 15:19:51 &gt; 登录主库，查看测试数据，此时数据已经复制过来12345678[root@master ~]# mysql -uroot -p test11 -e "select * from t22"Enter password: +----+---------+| id | name |+----+---------+| 2 | slave11 |+----+---------+[root@master ~]# MHA帐号创建主库创建登录主库，创建允许主库和从库连接的MHA用户信息，再分别尝试使用MHA用户登录(省略)1234567891011121314151617181920212223242526272829[root@master ~]# mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 29Server version: 5.7.18-15-log PLD/Linux Distribution Percona Server RPMCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [(none)] 15:23:16 &gt; create user 'mha01'@'192.168.16.81' identified by 'mha123456';Query OK, 0 rows affected (0.00 sec)MySQL [(none)] 15:24:02 &gt; grant all privileges on *.* to 'mha01'@'192.168.16.81';Query OK, 0 rows affected (0.00 sec)MySQL [(none)] 15:24:27 &gt; create user 'mha01'@'192.168.16.80' identified by 'mha123456'; Query OK, 0 rows affected (0.01 sec)MySQL [(none)] 15:24:35 &gt; grant all privileges on *.* to 'mha01'@'192.168.16.80';Query OK, 0 rows affected (0.02 sec)MySQL [(none)] 15:24:41 &gt; flush privileges;Query OK, 0 rows affected (0.00 sec) 从库创建登录从库，由于复制已经把在主库创建的MHA用户信息复制了过来，尝试登录即可(省略) MHA安装安装依赖分别在主库和从库上安装，执行命令：yum -y install gcc gcc-c++ make openssl-devel perl perl-DBD-MySQL perl-Config-Tiny perl-Log-Dispatch perl-Parallel-ForkManager perl-Config-IniFiles perl-Time-HiRes perl-Module-Install.noarch mailx jwhois cpan 主库安装mha4mysql-nodeMHA管理端安装在从库上，主库上只需要mha4mysql-node即可，由于MySQL使用5.7版本，MHA也使用最新的0.57版本，采用编译安装方式。下载地址：https://mega.nz/#F!G4oRjARB!SWzFS59bUv9VrKwdAeIGVw1234567891011[root@master ~]# cd /usr/src/[root@master src]# tar -zxf mha4mysql-node-0.57.tar.gz[root@master mha4mysql-node-0.57]# perl Makefile.PL #编译过程省略[root@master mha4mysql-node-0.57]# make[root@master mha4mysql-node-0.57]# make install[root@master mha4mysql-node-0.57]# ll /usr/local/bin/ -t #查看安装，有以下文件则mha4mysql-node安装成功total 1760-r-xr-xr-x 1 root root 16381 Jul 21 09:41 apply_diff_relay_logs-r-xr-xr-x 1 root root 8261 Jul 21 09:41 purge_relay_logs-r-xr-xr-x 1 root root 7525 Jul 21 09:41 save_binary_logs-r-xr-xr-x 1 root root 4807 Jul 21 09:41 filter_mysqlbinlog 从库安装mha4mysql-manager和mha4mysql-nodeMHA管理端安装在从库，从库需要安装manager端和node端1234567891011121314151617181920212223242526272829[root@slave ~]# cd /usr/src/[root@slave src]# tar -zxf mha4mysql-manager-0.57.tar.gz [root@slave src]# cd mha4mysql-manager-0.57[root@slave mha4mysql-manager-0.57]# perl Makefile.PL #编译过程省略[root@slave mha4mysql-manager-0.57]# make[root@slave mha4mysql-manager-0.57]# make install [root@slave mha4mysql-manager-0.57]# ll /usr/local/bin/ -t #查看安装，有以下文件则mha4mysql-manager安装成功total 40-r-xr-xr-x 1 root root 1779 Oct 11 15:45 masterha_check_ssh-r-xr-xr-x 1 root root 2517 Oct 11 15:45 masterha_manager-r-xr-xr-x 1 root root 2373 Oct 11 15:45 masterha_master_switch-r-xr-xr-x 1 root root 5171 Oct 11 15:45 masterha_secondary_check-r-xr-xr-x 1 root root 1995 Oct 11 15:45 masterha_check_repl-r-xr-xr-x 1 root root 1865 Oct 11 15:45 masterha_check_status-r-xr-xr-x 1 root root 3201 Oct 11 15:45 masterha_conf_host-r-xr-xr-x 1 root root 2165 Oct 11 15:45 masterha_master_monitor-r-xr-xr-x 1 root root 1739 Oct 11 15:45 masterha_stop[root@slave mha4mysql-manager-0.57]# cd ..[root@slave src]# tar -zxf mha4mysql-node-0.57.tar.gz [root@slave src]# cd mha4mysql-node-0.57[root@slave mha4mysql-node-0.57]# perl Makefile.PL #编译过程省略 [root@slave mha4mysql-node-0.57]# make[root@slave mha4mysql-node-0.57]# make install[root@slave mha4mysql-node-0.57]# ll /usr/local/bin/ -t #查看安装，有以下文件则mha4mysql-node安装成功total 84-r-xr-xr-x 1 root root 16381 Oct 11 15:47 apply_diff_relay_logs-r-xr-xr-x 1 root root 4807 Oct 11 15:47 filter_mysqlbinlog-r-xr-xr-x 1 root root 8261 Oct 11 15:47 purge_relay_logs-r-xr-xr-x 1 root root 7525 Oct 11 15:47 save_binary_logs MHA目录结构说明MHAManagermhamanager工具包主要包括以下工具1234567891011[root@slave ~]# ll /usr/local/bin/总用量 40-r-xr-xr-x 1 root root 1995 Oct 11 15:45 masterha_check_repl #检查MySQL复制情况-r-xr-xr-x 1 root root 1779 Oct 11 15:45 masterha_check_ssh #检查MHA的SSH配置情况-r-xr-xr-x 1 root root 1865 Oct 11 15:45 masterha_check_status #检测当前MHA运行状态-r-xr-xr-x 1 root root 3201 Oct 11 15:45 masterha_conf_host #添加或删除配置的server信息-r-xr-xr-x 1 root root 2517 Oct 11 15:45 masterha_manager #启动MHA-r-xr-xr-x 1 root root 2165 Oct 11 15:45 masterha_master_monitor #检测Master是否宕机-r-xr-xr-x 1 root root 2373 Oct 11 15:45 masterha_master_switch #控制故障转移，自动或者手动-r-xr-xr-x 1 root root 5172 Oct 11 15:45 masterha_secondary_check #通过其他路由检测Master是否真的宕机-r-xr-xr-x 1 root root 1739 Oct 11 15:45 masterha_stop #停止MHA MHANodemhanode工具包主要包括以下工具123456[root@slave ~]# ll /usr/local/bin/ -t total 84-r-xr-xr-x 1 root root 16371 Oct 11 15:47 apply_diff_relay_logs #识别差异日志的中继日志，并将其差异事件应用于其他Slave-r-xr-xr-x 1 root root 4807 Oct 11 15:47 filter_mysqlbinlog #去除不必要的Rollback事件-r-xr-xr-x 1 root root 8263 Oct 11 15:47 purge_relay_logs #删除无用的Relay log，避免延时-r-xr-xr-x 1 root root 7525 Oct 11 15:47 save_binary_logs #保存和复制down掉的主服务器二进制日志 自定义扩展脚本说明secondary_check_script #通过多条网络路由检测master的可用性master_ip_failover_script #自动failover时候的切换脚本，可将vip信息写入此脚本中shutdown_script #强制关闭master节点执行脚本report_script #发送报告init_conf_load_script #加载初始配置参数，如不想在配置中写明文密码master_ip_online_change_script #手动failover时候的切换脚本 keepalived安装MHA作为MySQL的HA软件,借助脚本或者第三方软件如keepalived,可实现自动的failover本次环境使用yum安装keepalived,主库和从库分别执行安装: yum -y install keepalivedkeepalived的配置文件,默认在主库上绑定EIP,priority要比备库高,同时为了避免脑裂,两个state同时设置为BACKUP,由于HaVip不支持组播和广播通讯,因此需要将keepalived的心跳方式设置为单播,添加unicast_src_ip和unicast_peer 配置文件主库配置12345678910111213141516171819202122232425262728293031[root@master ~]# cat /etc/keepalived/keepalived.conf! Configuration File for keepalivedglobal_defs &#123; notification_email &#123; duanwenjie@huan.tv &#125; notification_email_from Alexandre.Cassen@firewall.loc smtp_server 127.0.0.1 smtp_connect_timeout 30 router_id LVS_DEVEL&#125;vrrp_instance VI_1 &#123; state BACKUP interface eth0 virtual_router_id 51 priority 100 advert_int 1 authentication &#123; auth_type PASS auth_pass 1111 &#125; virtual_ipaddress &#123; 192.168.16.82 dev eth0 label eth0:havip &#125; unicast_src_ip 192.168.16.80 unicast_peer &#123; 192.168.16.81 &#125;&#125; 从库配置12345678910111213141516171819202122232425262728293031[root@slave ~]# cat /etc/keepalived/keepalived.conf! Configuration File for keepalivedglobal_defs &#123; notification_email &#123; duanwenjie@huan.tv &#125; notification_email_from Alexandre.Cassen@firewall.loc smtp_server 127.0.0.1 smtp_connect_timeout 30 router_id LVS_DEVEL&#125;vrrp_instance VI_1 &#123; state BACKUP interface eth0 virtual_router_id 51 priority 99 advert_int 1 authentication &#123; auth_type PASS auth_pass 1111 &#125; virtual_ipaddress &#123; 192.168.16.82 dev eth0 label eth0:havip &#125; unicast_src_ip 192.168.16.81 unicast_peer &#123; 192.168.16.80 &#125;&#125; EIP漂移测试分别启动keepalived服务，查看默认EIP在哪台机器上，同时关闭EIP所在机器的keepalived服务，查看EIP是否漂移，最后恢复原状 主库启动keepalived服务123[root@master keepalived]# /etc/init.d/keepalived startStarting keepalived: [ OK ][root@master keepalived]# 从库启动keepalived服务123[root@slave keepalived]# /etc/init.d/keepalived startStarting keepalived: [ OK ][root@slave keepalived]# 查看默认EIP在主库上12345678910111213141516171819202122[root@master ~]# ifconfigeth0 Link encap:Ethernet HWaddr 00:16:3E:0F:0E:4A inet addr:192.168.16.80 Bcast:192.168.31.255 Mask:255.255.240.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:172562 errors:0 dropped:0 overruns:0 frame:0 TX packets:71674 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:200695958 (191.3 MiB) TX bytes:12526649 (11.9 MiB)eth0:havip Link encap:Ethernet HWaddr 00:16:3E:0F:0E:4A inet addr:192.168.16.82 Bcast:0.0.0.0 Mask:255.255.255.255 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:7946 errors:0 dropped:0 overruns:0 frame:0 TX packets:7946 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:510910 (498.9 KiB) TX bytes:510910 (498.9 KiB)[root@master ~]# 关闭主库的keepalived服务关闭主库的keepalived服务后，EIP消失1234567891011121314151617181920[root@master ~]# /etc/init.d/keepalived stopStopping keepalived: [ OK ][root@master ~]# ifconfigeth0 Link encap:Ethernet HWaddr 00:16:3E:0F:0E:4A inet addr:192.168.16.80 Bcast:192.168.31.255 Mask:255.255.240.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:172670 errors:0 dropped:0 overruns:0 frame:0 TX packets:71803 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:200704346 (191.4 MiB) TX bytes:12569281 (11.9 MiB)lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:7976 errors:0 dropped:0 overruns:0 frame:0 TX packets:7976 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:512770 (500.7 KiB) TX bytes:512770 (500.7 KiB)[root@master ~]# 查看EIP是否漂移到从库上此时EIP已经漂移到从库上12345678910111213141516171819202122[root@slave ~]# ifconfigeth0 Link encap:Ethernet HWaddr 00:16:3E:12:80:57 inet addr:192.168.16.81 Bcast:192.168.31.255 Mask:255.255.240.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:164539 errors:0 dropped:0 overruns:0 frame:0 TX packets:77532 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:202145589 (192.7 MiB) TX bytes:12091265 (11.5 MiB)eth0:havip Link encap:Ethernet HWaddr 00:16:3E:12:80:57 inet addr:192.168.16.82 Bcast:0.0.0.0 Mask:255.255.255.255 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:7961 errors:0 dropped:0 overruns:0 frame:0 TX packets:7961 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:508050 (496.1 KiB) TX bytes:508050 (496.1 KiB)[root@slave ~]# 恢复原状主库启动keepalived服务，查看EIP已经又漂移回来123456789101112131415161718192021222324[root@master ~]# /etc/init.d/keepalived startStarting keepalived: [ OK ][root@master ~]# ifconfigeth0 Link encap:Ethernet HWaddr 00:16:3E:0F:0E:4A inet addr:192.168.16.80 Bcast:192.168.31.255 Mask:255.255.240.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:172863 errors:0 dropped:0 overruns:0 frame:0 TX packets:71978 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:200717148 (191.4 MiB) TX bytes:12627987 (12.0 MiB)eth0:havip Link encap:Ethernet HWaddr 00:16:3E:0F:0E:4A inet addr:192.168.16.82 Bcast:0.0.0.0 Mask:255.255.255.255 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:8039 errors:0 dropped:0 overruns:0 frame:0 TX packets:8039 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:516676 (504.5 KiB) TX bytes:516676 (504.5 KiB)[root@master ~]# MHA配置MHAManager创建配置目录/etc/masterha/，同时创建一个项目上的配置文件，仅配置自动FailOver部分，脚本暂时不定义，下文会有MHA引入keepalived。1234567891011121314151617181920212223[server default]manager_workdir=/var/log/masterha/app1 manager_log=/var/log/masterha/app1/manager.log master_binlog_dir=/hwdata/data/percona password=mha123456 user=mha01 ping_interval=1 remote_workdir=/tmp repl_password=slave123456 repl_user=slave01 ssh_user=root #master_ip_failover_script=/usr/local/bin/master_ip_failover #master_ip_online_change_script= /usr/local/bin/master_ip_online_change #report_script=/usr/local/bin/send_report #shutdown_script= secondary_check_script = masterha_secondary_check -s 192.168.16.80 -s 192.168.16.81 --user=root hostname=192.168.16.80 --master_ip=192.168.16.80 --master_port=3306 [server1]hostname=192.168.16.80 port=3306[server2]hostname=192.168.16.81 port=3306candidate_master=1 测试MHAManager SSH12345678910111213[root@slave masterha]# masterha_check_ssh --conf=/etc/masterha/app1.cnf Wed Oct 11 17:21:46 2017 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.Wed Oct 11 17:21:46 2017 - [info] Reading application default configuration from /etc/masterha/app1.cnf..Wed Oct 11 17:21:46 2017 - [info] Reading server configuration from /etc/masterha/app1.cnf..Wed Oct 11 17:21:46 2017 - [info] Starting SSH connection tests..Wed Oct 11 17:21:47 2017 - [debug] Wed Oct 11 17:21:46 2017 - [debug] Connecting via SSH from root@192.168.16.80(192.168.16.80:22) to root@192.168.16.81(192.168.16.81:22)..Wed Oct 11 17:21:47 2017 - [debug] ok.Wed Oct 11 17:21:47 2017 - [debug] Wed Oct 11 17:21:47 2017 - [debug] Connecting via SSH from root@192.168.16.81(192.168.16.81:22) to root@192.168.16.80(192.168.16.80:22)..Wed Oct 11 17:21:47 2017 - [debug] ok.Wed Oct 11 17:21:47 2017 - [info] All SSH connection tests passed successfully.[root@slave masterha]# 测试MHAManager 复制1234567891011121314151617181920212223242526272829303132333435363738394041[root@slave masterha]# masterha_check_repl --conf=/etc/masterha/app1.cnfWed Oct 11 17:22:47 2017 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.Wed Oct 11 17:22:47 2017 - [info] Reading application default configuration from /etc/masterha/app1.cnf..Wed Oct 11 17:22:47 2017 - [info] Reading server configuration from /etc/masterha/app1.cnf..Wed Oct 11 17:22:47 2017 - [info] MHA::MasterMonitor version 0.57.Creating directory /var/log/masterha/app1.. done.Wed Oct 11 17:22:48 2017 - [info] Multi-master configuration is detected. Current primary(writable) master is 192.168.16.80(192.168.16.80:3306)Wed Oct 11 17:22:48 2017 - [info] Master configurations are as below: Master 192.168.16.81(192.168.16.81:3306), replicating from 192.168.16.80(192.168.16.80:3306), read-onlyMaster 192.168.16.80(192.168.16.80:3306), replicating from 192.168.16.81(192.168.16.81:3306)Wed Oct 11 17:22:48 2017 - [info] GTID failover mode = 1Wed Oct 11 17:22:48 2017 - [info] Dead Servers:Wed Oct 11 17:22:48 2017 - [info] Alive Servers:Wed Oct 11 17:22:48 2017 - [info] 192.168.16.80(192.168.16.80:3306)Wed Oct 11 17:22:48 2017 - [info] 192.168.16.81(192.168.16.81:3306)Wed Oct 11 17:22:48 2017 - [info] Alive Slaves:Wed Oct 11 17:22:48 2017 - [info] 192.168.16.81(192.168.16.81:3306) Version=5.7.18-15-log (oldest major version between slaves) log-bin:enabledWed Oct 11 17:22:48 2017 - [info] GTID ONWed Oct 11 17:22:48 2017 - [info] Replicating from 192.168.16.80(192.168.16.80:3306)Wed Oct 11 17:22:48 2017 - [info] Primary candidate for the new Master (candidate_master is set)Wed Oct 11 17:22:48 2017 - [info] Current Alive Master: 192.168.16.80(192.168.16.80:3306)Wed Oct 11 17:22:48 2017 - [info] Checking slave configurations..Wed Oct 11 17:22:48 2017 - [info] Checking replication filtering settings..Wed Oct 11 17:22:48 2017 - [info] binlog_do_db= , binlog_ignore_db= Wed Oct 11 17:22:48 2017 - [info] Replication filtering check ok.Wed Oct 11 17:22:48 2017 - [info] GTID (with auto-pos) is supported. Skipping all SSH and Node package checking.Wed Oct 11 17:22:48 2017 - [info] Checking SSH publickey authentication settings on the current master..Wed Oct 11 17:22:48 2017 - [info] HealthCheck: SSH to 192.168.16.80 is reachable.Wed Oct 11 17:22:48 2017 - [info] 192.168.16.80(192.168.16.80:3306) (current master) +--192.168.16.81(192.168.16.81:3306)Wed Oct 11 17:22:48 2017 - [info] Checking replication health on 192.168.16.81..Wed Oct 11 17:22:48 2017 - [info] ok.Wed Oct 11 17:22:48 2017 - [warning] master_ip_failover_script is not defined.Wed Oct 11 17:22:48 2017 - [warning] shutdown_script is not defined.Wed Oct 11 17:22:48 2017 - [info] Got exit code 0 (Not master dead).MySQL Replication Health is OK.[root@slave masterha]# MHA引入keepalived把keepalived服务引入MHA，需要修改切换是触发的脚本文件master_ip_failover即可，在该脚本中添加在master发生宕机时对keepalived的处理。 master_ip_failover脚本编辑脚本/usr/local/bin/master_ip_failover，修改后如下，这里完整的脚本1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889[root@slave app1]# cat /usr/local/bin/master_ip_failover #!/usr/bin/env perluse strict;use warnings FATAL =&gt; 'all';use Getopt::Long;my ( $command, $ssh_user, $orig_master_host, $orig_master_ip, $orig_master_port, $new_master_host, $new_master_ip, $new_master_port);my $vip = '192.168.16.82';my $ssh_start_vip = "/etc/init.d/keepalived start";my $ssh_stop_vip = "/etc/init.d/keepalived stop";GetOptions( 'command=s' =&gt; \$command, 'ssh_user=s' =&gt; \$ssh_user, 'orig_master_host=s' =&gt; \$orig_master_host, 'orig_master_ip=s' =&gt; \$orig_master_ip, 'orig_master_port=i' =&gt; \$orig_master_port, 'new_master_host=s' =&gt; \$new_master_host, 'new_master_ip=s' =&gt; \$new_master_ip, 'new_master_port=i' =&gt; \$new_master_port,);exit &amp;main();sub main &#123; print "\n\nIN SCRIPT TEST====$ssh_stop_vip==$ssh_start_vip===\n\n"; if ( $command eq "stop" || $command eq "stopssh" ) &#123; my $exit_code = 1; eval &#123; print "Disabling the VIP on old master: $orig_master_host \n"; &amp;stop_vip(); $exit_code = 0; &#125;; if ($@) &#123; warn "Got Error: $@\n"; exit $exit_code; &#125; exit $exit_code; &#125; elsif ( $command eq "start" ) &#123; my $exit_code = 10; eval &#123; print "Enabling the VIP - $vip on the new master - $new_master_host \n"; &amp;start_vip(); $exit_code = 0; &#125;; if ($@) &#123; warn $@; exit $exit_code; &#125; exit $exit_code; &#125; elsif ( $command eq "status" ) &#123; print "Checking the Status of the script.. OK \n"; #`ssh $ssh_user\@$orig_master_ip \" $ssh_start_vip \"`; exit 0; &#125; else &#123; &amp;usage(); exit 1; &#125;&#125;# A simple system call that enable the VIP on the new mastersub start_vip() &#123; `ssh $ssh_user\@$new_master_host \" $ssh_start_vip \"`;&#125;# A simple system call that disable the VIP on the old_mastersub stop_vip() &#123; return 0 unless ($ssh_user); `ssh $ssh_user\@$orig_master_host \" $ssh_stop_vip \"`;&#125;sub usage &#123; print "Usage: master_ip_failover --command=start|stop|stopssh|status --orig_master_host=host --orig_master_ip=ip --orig_master_port=port --new_master_host=host --new_master_ip=ip --new_master_port=port\n";&#125;[root@slave app1]# 添加权限chmod +x /usr/local/bin/master_ip_failover send_report脚本1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556[root@slave masterha]# cat /usr/local/bin/send_report #!/usr/bin/perl use strict;use warnings FATAL =&gt; 'all';use Mail::Sender;use Getopt::Long; #new_master_host and new_slave_hosts are set only when recovering master succeededmy ( $dead_master_host, $new_master_host, $new_slave_hosts, $subject, $body );my $smtp='smtp.126.com';my $mail_from='xxx@126.com';my $mail_user='xxx@126.com';my $mail_pass='xxx';#my $mail_to=['xxx','xxx'];my $mail_to='xxx';GetOptions( 'orig_master_host=s' =&gt; \$dead_master_host, 'new_master_host=s' =&gt; \$new_master_host, 'new_slave_hosts=s' =&gt; \$new_slave_hosts, 'subject=s' =&gt; \$subject, 'body=s' =&gt; \$body,); mailToContacts($smtp,$mail_from,$mail_user,$mail_pass,$mail_to,$subject,$body); sub mailToContacts &#123; my ( $smtp, $mail_from, $user, $passwd, $mail_to, $subject, $msg ) = @_; open my $DEBUG, "&gt; /var/log/masterha/app1/manager.log" or die "Can't open the debug file:$!\n"; my $sender = new Mail::Sender &#123; ctype =&gt; 'text/plain; charset=utf-8', encoding =&gt; 'utf-8', smtp =&gt; $smtp, from =&gt; $mail_from, auth =&gt; 'LOGIN', TLS_allowed =&gt; '0', authid =&gt; $user, authpwd =&gt; $passwd, to =&gt; $mail_to, subject =&gt; $subject, debug =&gt; $DEBUG &#125;; $sender-&gt;MailMsg( &#123; msg =&gt; $msg, debug =&gt; $DEBUG &#125; ) or print $Mail::Sender::Error; return 1;&#125; # Do whatever you want here exit 0;[root@slave masterha]# 添加权限chmod +x /usr/local/bin/send_report MHAManager修改注释12345[root@slave app1]# cat /etc/masterha/app1.cnf |grep master_ip_failover_scriptmaster_ip_failover_script=/usr/local/bin/master_ip_failover [root@slave app1]# cat /etc/masterha/app1.cnf |grep reportreport_script=/usr/local/bin/send_report [root@slave app1]# HaVip绑定EIPkeepalived服务已经配置完成，VIP也可以自动漂移后，但是其还不能在内网中通讯，需要将EIP映射到HaVip中，创建高可用虚拟IP，把master和slave两个实例的绑定在一起，具体步骤省略，见下图 MHA启动123[root@slave masterha]# nohup masterha_manager --conf=/etc/masterha/app1.cnf &amp;[1] 6706[root@slave masterha]# nohup: ignoring input and appending output to `nohup.out' 查看启动日志12345678910111213141516171819202122232425262728293031323334353637383940414243[root@slave app1]# cat /var/log/masterha/app1/manager.logThu Oct 12 09:26:56 2017 - [info] MHA::MasterMonitor version 0.57.Thu Oct 12 09:26:57 2017 - [info] Multi-master configuration is detected. Current primary(writable) master is 192.168.16.80(192.168.16.80:3306)Thu Oct 12 09:26:57 2017 - [info] Master configurations are as below: Master 192.168.16.81(192.168.16.81:3306), replicating from 192.168.16.80(192.168.16.80:3306), read-onlyMaster 192.168.16.80(192.168.16.80:3306), replicating from 192.168.16.81(192.168.16.81:3306)Thu Oct 12 09:26:57 2017 - [info] GTID failover mode = 1Thu Oct 12 09:26:57 2017 - [info] Dead Servers:Thu Oct 12 09:26:57 2017 - [info] Alive Servers:Thu Oct 12 09:26:57 2017 - [info] 192.168.16.80(192.168.16.80:3306)Thu Oct 12 09:26:57 2017 - [info] 192.168.16.81(192.168.16.81:3306)Thu Oct 12 09:26:57 2017 - [info] Alive Slaves:Thu Oct 12 09:26:57 2017 - [info] 192.168.16.81(192.168.16.81:3306) Version=5.7.18-15-log (oldest major version between slaves) log-bin:enabledThu Oct 12 09:26:57 2017 - [info] GTID ONThu Oct 12 09:26:57 2017 - [info] Replicating from 192.168.16.80(192.168.16.80:3306)Thu Oct 12 09:26:57 2017 - [info] Primary candidate for the new Master (candidate_master is set)Thu Oct 12 09:26:57 2017 - [info] Current Alive Master: 192.168.16.80(192.168.16.80:3306)Thu Oct 12 09:26:57 2017 - [info] Checking slave configurations..Thu Oct 12 09:26:57 2017 - [info] Checking replication filtering settings..Thu Oct 12 09:26:57 2017 - [info] binlog_do_db= , binlog_ignore_db= Thu Oct 12 09:26:57 2017 - [info] Replication filtering check ok.Thu Oct 12 09:26:57 2017 - [info] GTID (with auto-pos) is supported. Skipping all SSH and Node package checking.Thu Oct 12 09:26:57 2017 - [info] Checking SSH publickey authentication settings on the current master..Thu Oct 12 09:26:57 2017 - [info] HealthCheck: SSH to 192.168.16.80 is reachable.Thu Oct 12 09:26:57 2017 - [info] 192.168.16.80(192.168.16.80:3306) (current master) +--192.168.16.81(192.168.16.81:3306)Thu Oct 12 09:26:57 2017 - [info] Checking master_ip_failover_script status:Thu Oct 12 09:26:57 2017 - [info] /usr/local/bin/master_ip_failover --command=status --ssh_user=root --orig_master_host=192.168.16.80 --orig_master_ip=192.168.16.80 --orig_master_port=3306 IN SCRIPT TEST====/etc/init.d/keepalived stop==/etc/init.d/keepalived start===Checking the Status of the script.. OK Thu Oct 12 09:26:57 2017 - [info] OK.Thu Oct 12 09:26:57 2017 - [warning] shutdown_script is not defined.Thu Oct 12 09:26:57 2017 - [info] Set master ping interval 1 seconds.Thu Oct 12 09:26:57 2017 - [info] Set secondary check script: masterha_secondary_check -s 192.168.16.80 -s 192.168.16.81 --user=root hostname=192.168.16.80 --master_ip=192.168.16.80 --master_port=3306Thu Oct 12 09:26:57 2017 - [info] Starting ping health check on 192.168.16.80(192.168.16.80:3306)..Thu Oct 12 09:26:57 2017 - [info] Ping(SELECT) succeeded, waiting until MySQL doesn't respond..[root@slave app1]# 模拟主库故障(自动FailOver)确认MHAManager进程状态12345678910111213141516171819202122[root@slave app1]# ps aux|grep masterroot 1217 0.0 0.0 81520 3440 ? Ss Oct11 0:00 /usr/libexec/postfix/masterroot 20887 0.2 0.4 194688 18736 pts/1 S 08:57 0:00 perl /usr/local/bin/masterha_manager --conf=/etc/masterha/app1.cnfroot 20998 0.0 0.0 103252 844 pts/1 S+ 08:59 0:00 grep master[root@slave app1]# ifconfig #VIP不在slave上eth0 Link encap:Ethernet HWaddr 00:16:3E:12:80:57 inet addr:192.168.16.81 Bcast:192.168.31.255 Mask:255.255.240.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:288188 errors:0 dropped:0 overruns:0 frame:0 TX packets:129868 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:211584573 (201.7 MiB) TX bytes:50227849 (47.9 MiB)lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:50346 errors:0 dropped:0 overruns:0 frame:0 TX packets:50346 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:3204922 (3.0 MiB) TX bytes:3204922 (3.0 MiB)[root@slave app1]# 停止主库MySQL服务1234567891011121314151617181920212223242526272829303132333435363738394041[root@master ~]# ifconfig #停止前VIP存在于主库上eth0 Link encap:Ethernet HWaddr 00:16:3E:0F:0E:4A inet addr:192.168.16.80 Bcast:192.168.31.255 Mask:255.255.240.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:278061 errors:0 dropped:0 overruns:0 frame:0 TX packets:223278 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:210643899 (200.8 MiB) TX bytes:57552395 (54.8 MiB)eth0:havip Link encap:Ethernet HWaddr 00:16:3E:0F:0E:4A inet addr:192.168.16.82 Bcast:0.0.0.0 Mask:255.255.255.255 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:50158 errors:0 dropped:0 overruns:0 frame:0 TX packets:50158 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:3130070 (2.9 MiB) TX bytes:3130070 (2.9 MiB)[root@master ~]# /etc/init.d/mysqld stopShutting down MySQL (Percona Server)............ [ OK ][root@master ~]# ifconfig #停止后VIP已经漂移走eth0 Link encap:Ethernet HWaddr 00:16:3E:0F:0E:4A inet addr:192.168.16.80 Bcast:192.168.31.255 Mask:255.255.240.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:278240 errors:0 dropped:0 overruns:0 frame:0 TX packets:223445 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:210664827 (200.9 MiB) TX bytes:57596785 (54.9 MiB)lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:50175 errors:0 dropped:0 overruns:0 frame:0 TX packets:50175 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:3131100 (2.9 MiB) TX bytes:3131100 (2.9 MiB)[root@master ~]# 查看FailOver日志登录从库，查看MHAManager日志123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181[root@slave app1]# tail -f /var/log/masterha/app1/manager.logIN SCRIPT TEST====/etc/init.d/keepalived stop==/etc/init.d/keepalived start===Checking the Status of the script.. OK Thu Oct 12 09:26:57 2017 - [info] OK.Thu Oct 12 09:26:57 2017 - [warning] shutdown_script is not defined.Thu Oct 12 09:26:57 2017 - [info] Set master ping interval 1 seconds.Thu Oct 12 09:26:57 2017 - [info] Set secondary check script: masterha_secondary_check -s 192.168.16.80 -s 192.168.16.81 --user=root hostname=192.168.16.80 --master_ip=192.168.16.80 --master_port=3306Thu Oct 12 09:26:57 2017 - [info] Starting ping health check on 192.168.16.80(192.168.16.80:3306)..Thu Oct 12 09:26:57 2017 - [info] Ping(SELECT) succeeded, waiting until MySQL doesn't respond.. #开始监听服务状态#监控到master故障后，MHA开始做自动FailOverThu Oct 12 09:27:54 2017 - [warning] Got error on MySQL select ping: 2006 (MySQL server has gone away)Thu Oct 12 09:27:54 2017 - [info] Executing secondary network check script: masterha_secondary_check -s 192.168.16.80 -s 192.168.16.81 --user=root hostname=192.168.16.80 --master_ip=192.168.16.80 --master_port=3306 --user=root --master_host=192.168.16.80 --master_ip=192.168.16.80 --master_port=3306 --master_user=mha01 --master_password=mha123456 --ping_type=SELECTThu Oct 12 09:27:54 2017 - [info] Executing SSH check script: exit 0Thu Oct 12 09:27:54 2017 - [info] HealthCheck: SSH to 192.168.16.80 is reachable.Monitoring server 192.168.16.80 is reachable, Master is not reachable from 192.168.16.80. OK.Monitoring server 192.168.16.81 is reachable, Master is not reachable from 192.168.16.81. OK.Thu Oct 12 09:27:54 2017 - [info] Master is not reachable from all other monitoring servers. Failover should start.Thu Oct 12 09:27:55 2017 - [warning] Got error on MySQL connect: 2013 (Lost connection to MySQL server at 'reading initial communication packet', system error: 111)Thu Oct 12 09:27:55 2017 - [warning] Connection failed 2 time(s)..Thu Oct 12 09:27:56 2017 - [warning] Got error on MySQL connect: 2013 (Lost connection to MySQL server at 'reading initial communication packet', system error: 111)Thu Oct 12 09:27:56 2017 - [warning] Connection failed 3 time(s)..Thu Oct 12 09:27:57 2017 - [warning] Got error on MySQL connect: 2013 (Lost connection to MySQL server at 'reading initial communication packet', system error: 111)Thu Oct 12 09:27:57 2017 - [warning] Connection failed 4 time(s)..Thu Oct 12 09:27:57 2017 - [warning] Master is not reachable from health checker!Thu Oct 12 09:27:57 2017 - [warning] Master 192.168.16.80(192.168.16.80:3306) is not reachable!Thu Oct 12 09:27:57 2017 - [warning] SSH is reachable.Thu Oct 12 09:27:57 2017 - [info] Connecting to a master server failed. Reading configuration file /etc/masterha_default.cnf and /etc/masterha/app1.cnf again, and trying to connect to all servers to check server status..Thu Oct 12 09:27:57 2017 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.Thu Oct 12 09:27:57 2017 - [info] Reading application default configuration from /etc/masterha/app1.cnf..Thu Oct 12 09:27:57 2017 - [info] Reading server configuration from /etc/masterha/app1.cnf..Thu Oct 12 09:27:58 2017 - [info] GTID failover mode = 1Thu Oct 12 09:27:58 2017 - [info] Dead Servers:Thu Oct 12 09:27:58 2017 - [info] 192.168.16.80(192.168.16.80:3306)Thu Oct 12 09:27:58 2017 - [info] Alive Servers:Thu Oct 12 09:27:58 2017 - [info] 192.168.16.81(192.168.16.81:3306)Thu Oct 12 09:27:58 2017 - [info] Alive Slaves:Thu Oct 12 09:27:58 2017 - [info] 192.168.16.81(192.168.16.81:3306) Version=5.7.18-15-log (oldest major version between slaves) log-bin:enabledThu Oct 12 09:27:58 2017 - [info] GTID ONThu Oct 12 09:27:58 2017 - [info] Replicating from 192.168.16.80(192.168.16.80:3306)Thu Oct 12 09:27:58 2017 - [info] Primary candidate for the new Master (candidate_master is set)Thu Oct 12 09:27:58 2017 - [info] Checking slave configurations..Thu Oct 12 09:27:58 2017 - [info] Checking replication filtering settings..Thu Oct 12 09:27:58 2017 - [info] Replication filtering check ok.Thu Oct 12 09:27:58 2017 - [info] Master is down!Thu Oct 12 09:27:58 2017 - [info] Terminating monitoring script.Thu Oct 12 09:27:58 2017 - [info] Got exit code 20 (Master dead).Thu Oct 12 09:27:58 2017 - [info] MHA::MasterFailover version 0.57.Thu Oct 12 09:27:58 2017 - [info] Starting master failover.Thu Oct 12 09:27:58 2017 - [info] Thu Oct 12 09:27:58 2017 - [info] * Phase 1: Configuration Check Phase..Thu Oct 12 09:27:58 2017 - [info] Thu Oct 12 09:27:59 2017 - [info] GTID failover mode = 1Thu Oct 12 09:27:59 2017 - [info] Dead Servers:Thu Oct 12 09:27:59 2017 - [info] 192.168.16.80(192.168.16.80:3306)Thu Oct 12 09:27:59 2017 - [info] Checking master reachability via MySQL(double check)...Thu Oct 12 09:27:59 2017 - [info] ok.Thu Oct 12 09:27:59 2017 - [info] Alive Servers:Thu Oct 12 09:27:59 2017 - [info] 192.168.16.81(192.168.16.81:3306)Thu Oct 12 09:27:59 2017 - [info] Alive Slaves:Thu Oct 12 09:27:59 2017 - [info] 192.168.16.81(192.168.16.81:3306) Version=5.7.18-15-log (oldest major version between slaves) log-bin:enabledThu Oct 12 09:27:59 2017 - [info] GTID ONThu Oct 12 09:27:59 2017 - [info] Replicating from 192.168.16.80(192.168.16.80:3306)Thu Oct 12 09:27:59 2017 - [info] Primary candidate for the new Master (candidate_master is set)Thu Oct 12 09:27:59 2017 - [info] Starting GTID based failover.Thu Oct 12 09:27:59 2017 - [info] Thu Oct 12 09:27:59 2017 - [info] ** Phase 1: Configuration Check Phase completed.Thu Oct 12 09:27:59 2017 - [info] Thu Oct 12 09:27:59 2017 - [info] * Phase 2: Dead Master Shutdown Phase..Thu Oct 12 09:27:59 2017 - [info] Thu Oct 12 09:27:59 2017 - [info] Forcing shutdown so that applications never connect to the current master..Thu Oct 12 09:27:59 2017 - [info] Executing master IP deactivation script:Thu Oct 12 09:27:59 2017 - [info] /usr/local/bin/master_ip_failover --orig_master_host=192.168.16.80 --orig_master_ip=192.168.16.80 --orig_master_port=3306 --command=stopssh --ssh_user=root IN SCRIPT TEST====/etc/init.d/keepalived stop==/etc/init.d/keepalived start===Disabling the VIP on old master: 192.168.16.80 Thu Oct 12 09:27:59 2017 - [info] done.Thu Oct 12 09:27:59 2017 - [warning] shutdown_script is not set. Skipping explicit shutting down of the dead master.Thu Oct 12 09:27:59 2017 - [info] * Phase 2: Dead Master Shutdown Phase completed.Thu Oct 12 09:27:59 2017 - [info] Thu Oct 12 09:27:59 2017 - [info] * Phase 3: Master Recovery Phase..Thu Oct 12 09:27:59 2017 - [info] Thu Oct 12 09:27:59 2017 - [info] * Phase 3.1: Getting Latest Slaves Phase..Thu Oct 12 09:27:59 2017 - [info] Thu Oct 12 09:27:59 2017 - [info] The latest binary log file/position on all slaves is mysql-bin.000005:234Thu Oct 12 09:27:59 2017 - [info] Latest slaves (Slaves that received relay log files to the latest):Thu Oct 12 09:27:59 2017 - [info] 192.168.16.81(192.168.16.81:3306) Version=5.7.18-15-log (oldest major version between slaves) log-bin:enabledThu Oct 12 09:27:59 2017 - [info] GTID ONThu Oct 12 09:27:59 2017 - [info] Replicating from 192.168.16.80(192.168.16.80:3306)Thu Oct 12 09:27:59 2017 - [info] Primary candidate for the new Master (candidate_master is set)Thu Oct 12 09:27:59 2017 - [info] The oldest binary log file/position on all slaves is mysql-bin.000005:234Thu Oct 12 09:27:59 2017 - [info] Oldest slaves:Thu Oct 12 09:27:59 2017 - [info] 192.168.16.81(192.168.16.81:3306) Version=5.7.18-15-log (oldest major version between slaves) log-bin:enabledThu Oct 12 09:27:59 2017 - [info] GTID ONThu Oct 12 09:27:59 2017 - [info] Replicating from 192.168.16.80(192.168.16.80:3306)Thu Oct 12 09:27:59 2017 - [info] Primary candidate for the new Master (candidate_master is set)Thu Oct 12 09:27:59 2017 - [info] Thu Oct 12 09:27:59 2017 - [info] * Phase 3.3: Determining New Master Phase..Thu Oct 12 09:27:59 2017 - [info] Thu Oct 12 09:27:59 2017 - [info] Searching new master from slaves..Thu Oct 12 09:27:59 2017 - [info] Candidate masters from the configuration file:Thu Oct 12 09:27:59 2017 - [info] 192.168.16.81(192.168.16.81:3306) Version=5.7.18-15-log (oldest major version between slaves) log-bin:enabledThu Oct 12 09:27:59 2017 - [info] GTID ONThu Oct 12 09:27:59 2017 - [info] Replicating from 192.168.16.80(192.168.16.80:3306)Thu Oct 12 09:27:59 2017 - [info] Primary candidate for the new Master (candidate_master is set)Thu Oct 12 09:27:59 2017 - [info] Non-candidate masters:Thu Oct 12 09:27:59 2017 - [info] Searching from candidate_master slaves which have received the latest relay log events..Thu Oct 12 09:27:59 2017 - [info] New master is 192.168.16.81(192.168.16.81:3306)Thu Oct 12 09:27:59 2017 - [info] Starting master failover..Thu Oct 12 09:27:59 2017 - [info] From:192.168.16.80(192.168.16.80:3306) (current master) +--192.168.16.81(192.168.16.81:3306)To:192.168.16.81(192.168.16.81:3306) (new master)Thu Oct 12 09:27:59 2017 - [info] Thu Oct 12 09:27:59 2017 - [info] * Phase 3.3: New Master Recovery Phase..Thu Oct 12 09:27:59 2017 - [info] Thu Oct 12 09:27:59 2017 - [info] Waiting all logs to be applied.. Thu Oct 12 09:27:59 2017 - [info] done.Thu Oct 12 09:27:59 2017 - [info] Getting new master's binlog name and position..Thu Oct 12 09:27:59 2017 - [info] mysql-bin.000002:4876Thu Oct 12 09:27:59 2017 - [info] All other slaves should start replication from here. Statement should be: CHANGE MASTER TO MASTER_HOST='192.168.16.81', MASTER_PORT=3306, MASTER_AUTO_POSITION=1, MASTER_USER='slave01', MASTER_PASSWORD='xxx';Thu Oct 12 09:27:59 2017 - [info] Master Recovery succeeded. File:Pos:Exec_Gtid_Set: mysql-bin.000002, 4876, df5051fc-ae51-11e7-85ee-00163e0f0e4a:1-15,e1ec82e8-ae51-11e7-8532-00163e128057:1-6Thu Oct 12 09:27:59 2017 - [info] Executing master IP activate script:Thu Oct 12 09:27:59 2017 - [info] /usr/local/bin/master_ip_failover --command=start --ssh_user=root --orig_master_host=192.168.16.80 --orig_master_ip=192.168.16.80 --orig_master_port=3306 --new_master_host=192.168.16.81 --new_master_ip=192.168.16.81 --new_master_port=3306 --new_master_user='mha01' --new_master_password=xxxUnknown option: new_master_userUnknown option: new_master_passwordIN SCRIPT TEST====/etc/init.d/keepalived stop==/etc/init.d/keepalived start===Enabling the VIP - 192.168.16.200 on the new master - 192.168.16.81 Thu Oct 12 09:27:59 2017 - [info] OK.Thu Oct 12 09:27:59 2017 - [info] Setting read_only=0 on 192.168.16.81(192.168.16.81:3306)..Thu Oct 12 09:27:59 2017 - [info] ok.Thu Oct 12 09:27:59 2017 - [info] ** Finished master recovery successfully.Thu Oct 12 09:27:59 2017 - [info] * Phase 3: Master Recovery Phase completed.Thu Oct 12 09:27:59 2017 - [info] Thu Oct 12 09:27:59 2017 - [info] * Phase 4: Slaves Recovery Phase..Thu Oct 12 09:27:59 2017 - [info] Thu Oct 12 09:27:59 2017 - [info] Thu Oct 12 09:27:59 2017 - [info] * Phase 4.1: Starting Slaves in parallel..Thu Oct 12 09:27:59 2017 - [info] Thu Oct 12 09:27:59 2017 - [info] All new slave servers recovered successfully.Thu Oct 12 09:27:59 2017 - [info] Thu Oct 12 09:27:59 2017 - [info] * Phase 5: New master cleanup phase..Thu Oct 12 09:27:59 2017 - [info] Thu Oct 12 09:27:59 2017 - [info] Resetting slave info on the new master..Thu Oct 12 09:27:59 2017 - [info] 192.168.16.81: Resetting slave info succeeded.Thu Oct 12 09:27:59 2017 - [info] Master failover to 192.168.16.81(192.168.16.81:3306) completed successfully.Thu Oct 12 09:27:59 2017 - [info] ----- Failover Report -----app1: MySQL Master failover 192.168.16.80(192.168.16.80:3306) to 192.168.16.81(192.168.16.81:3306) succeededMaster 192.168.16.80(192.168.16.80:3306) is down!Check MHA Manager logs at slave:/var/log/masterha/app1/manager.log for details.Started automated(non-interactive) failover.Invalidated master IP address on 192.168.16.80(192.168.16.80:3306)Selected 192.168.16.81(192.168.16.81:3306) as a new master.192.168.16.81(192.168.16.81:3306): OK: Applying all logs succeeded.192.168.16.81(192.168.16.81:3306): OK: Activated master IP address.192.168.16.81(192.168.16.81:3306): Resetting slave info succeeded.Master failover to 192.168.16.81(192.168.16.81:3306) completed successfully.Thu Oct 12 09:27:59 2017 - [info] Sending mail..Option new_slave_hosts requires an argumentUnknown option: conftail: /var/log/masterha/app1/manager.log: file truncated^C[1]+ Done nohup masterha_manager --conf=/etc/masterha/app1.cnf (wd: /etc/masterha)(wd now: /var/log/masterha/app1)[root@slave app1]# 注意：由于阿里云的ECS默认不允许发送邮件，它们把25端口已经封掉，如果需要开通25端口，主联系阿里云技术支持。本次切换日志在最后没有发送邮件，是由于这个原因导致的。 日志解析过程12345678910111213141516171819202122232425262728293031启动前的准备工作检查数据库服务器状态,获取相关参数设置检查GTID、candidate_master、过滤DB是否设置测试ssh连接是否成功测试MHA node是否可用创建MHA日志目录开始检查slave的差异日志应用权限确定当前的复制架构调试master_ip_failover_script调试shutdown_script设置二次检查的主机masterha_secondary_checkMHA启动完毕,进入监测状态监测master服务器挂了通过定义的二次监测,确认master是否挂了确认master挂了,开始进入failover流程再试尝试连接master和master的ssh通过MHA配置文件,监测其他slave的状态再次监测slave的配置是否有变化,是否符合failover条件正式开始failover再次对slave配置做检查对原Master做master_ip_failover_script和shutdown_script的操作开始差异日志的恢复，获取slave最后得到的binlog位置获取原master的binlog日志确定新的master在new master上应用差异的binlog日志获取new master的binlog位置。执行master_ip_failover_script,调用aws_vip_change.sh，执行VIP漂移开始恢复其他slave的差异日志差异日志应用完成以后,切换所有slave到new master。failover操作完成,生成failover报告最后发送邮件通知 确认FailOver状态登录从库，查看VIP是否漂移过程12345678910111213141516171819202122[root@slave app1]# ifconfig #VIP已经漂移过程eth0 Link encap:Ethernet HWaddr 00:16:3E:12:80:57 inet addr:192.168.16.81 Bcast:192.168.31.255 Mask:255.255.240.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:295022 errors:0 dropped:0 overruns:0 frame:0 TX packets:135929 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:212253710 (202.4 MiB) TX bytes:52246361 (49.8 MiB)eth0:havip Link encap:Ethernet HWaddr 00:16:3E:12:80:57 inet addr:192.168.16.82 Bcast:0.0.0.0 Mask:255.255.255.255 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:52973 errors:0 dropped:0 overruns:0 frame:0 TX packets:52973 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:3597938 (3.4 MiB) TX bytes:3597938 (3.4 MiB)[root@slave app1]# 登录主库，查看VIP是否存在，keepalived服务状态1234567891011121314151617181920[root@master ~]# ifconfig #VIP已经不存在eth0 Link encap:Ethernet HWaddr 00:16:3E:0F:0E:4A inet addr:192.168.16.80 Bcast:192.168.31.255 Mask:255.255.240.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:284277 errors:0 dropped:0 overruns:0 frame:0 TX packets:229786 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:211190989 (201.4 MiB) TX bytes:60010868 (57.2 MiB)lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:51564 errors:0 dropped:0 overruns:0 frame:0 TX packets:51564 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:3217146 (3.0 MiB) TX bytes:3217146 (3.0 MiB)[root@master ~]# /etc/init.d/keepalived status #keepalived服务已经停止keepalived is stopped[root@master ~]# 手动FailOverMHA的手动FailOver不在本文范围，详情理论可参考官方文档。 参数列表请参考之前文章。 参考https://dwj999.github.io/AWS-EC2搭建mha-vip-MySQL5-7.htm 结束语云服务器上MySQL高可用，也可通过云负载均衡产品+MySQL复制来实现，但在数据安全性上，没有MHA+VIP+MySQL相对安全。]]></content>
      <categories>
        <category>集群高可用</category>
      </categories>
      <tags>
        <tag>Aliyun</tag>
        <tag>ECS</tag>
        <tag>MySQL</tag>
        <tag>VIP</tag>
        <tag>MHA</tag>
        <tag>Keepalived</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ProxySQL 安装配置详解及读写分离、负载均衡]]></title>
    <url>%2FProxySQL-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3%E5%8F%8A%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E3%80%81%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.html</url>
    <content type="text"><![CDATA[前言在MySQL的高可用集群环境中，中间件是不可缺少的一部分，它提供了读写分离、负载均衡等各种功能，满足集群的横向、纵向的可扩展。由于官方并没有在这方面推出好的产品，更多的是第三方的产品。如： ProxySQL #Percona MaxScale #MariaDB Atlas #360开源 OneProxy #平民软件楼方鑫 MyCat #社区推广 KingShard #原Atlas作者离职后使用go开发 TDDL #阿里巴巴开源 Cobar #阿里巴巴开源 DBProxy #美团在360Atlas上修改后开源 Fabric #官方产品 DRDS #阿里云分库分表产品 本次以测试ProxySQL为例，逐步了解ProxySQL的使用方式。 准备环境：ProxySQL: 1.4.1Master: 118.190.67.67Slave: 139.196.95.103(192.168.7.50) 安装配置详解官网：http://www.proxysql.com/Percona地址：https://www.percona.com/downloads/proxysql/Github地址：https://github.com/sysown/proxysql/本文通过作者编译好的rpm安装，也可通过编译安装的方式安装，本文省略 安装下载proxysql可以有三种途径,分别为官网、Percona网站和Github网站本文从github上下载最新稳定版本，这里选择centos67对应的rpm包下载：wget -c -O proxysql-1.4.1-1-centos67.x86_64.rpm https://github.com/sysown/proxysql/releases/download/v1.4.1/proxysql-1.4.1-1-centos67.x86_64.rpm123456789101112131415161718192021222324252627282930313233343536[root@iZuf6c08fdv8duubho2b0rZ test]# yum localinstall -y proxysql-1.4.1-1-centos67.x86_64.rpmLoaded plugins: securitydocker-main-repo | 2.9 kB 00:00 Setting up Install ProcessResolving DependenciesThere are unfinished transactions remaining. You might consider running yum-complete-transaction first to finish them.--&gt; Running transaction check---&gt; Package proxysql.x86_64 0:1.4.1-1 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved======================================================================================================================================================================== Package Arch Version Repository Size========================================================================================================================================================================Installing: proxysql x86_64 1.4.1-1 /proxysql-1.4.1-1-centos67.x86_64 19 MTransaction Summary========================================================================================================================================================================Install 1 Package(s)Total size: 19 MInstalled size: 19 MDownloading Packages:Running rpm_check_debugRunning Transaction TestTransaction Test SucceededRunning Transaction Installing : proxysql-1.4.1-1.x86_64 1/1 Verifying : proxysql-1.4.1-1.x86_64 1/1 Installed: proxysql.x86_64 0:1.4.1-1 Complete! ProxySQL默认配置文件为/etc/proxysql.cnf,只在第一次启动的时候有用,后续的所有配置都是通过对SQLite数据库的操作,并且不会更新到proxysql中,而是存储在/var/lib/proxysql/proxysql.db中123456789[root@jiessie test]# proxysql --version #查看版本ProxySQL version 1.4.1-45-gab4e6ee, codename Truls[root@jiessie test]# rpm -ql proxysql #查看安装的具体内容/etc/init.d/proxysql #启动脚本/etc/proxysql.cnf #默认配置文件/usr/bin/proxysql #执行文件/usr/share/proxysql/tools/proxysql_galera_checker.sh #ProxySQL调度程序检查pxc_maint_mode参数状态,持续检测各个节点的状态/usr/share/proxysql/tools/proxysql_galera_writer.pl #ProxySQL指定一个节点直接将流量写入galera[root@jiessie test]# 启动启动之后才会生成存储目录/var/lib/proxysql12345678[root@jiessie test]# /etc/init.d/proxysql startStarting ProxySQL: DONE![root@jiessie test]# ll /var/lib/proxysql/总用量 108-rw------- 1 root root 98304 8月 29 15:37 proxysql.db-rw------- 1 root root 4306 8月 29 16:25 proxysql.log-rw-r--r-- 1 root root 5 8月 29 16:25 proxysql.pid[root@jiessie test]# 内置对象介绍登录启动了6032和6033两个端口,默认管理端口是6032,客户端服务端口是6033,默认的用户名密码都是 admin,通过mysql的客户端可以登录123456789101112131415161718192021222324252627282930[root@jiessie test]# netstat -tunlp|grep proxysqltcp 0 0 0.0.0.0:6032 0.0.0.0:* LISTEN 5181/proxysql tcp 0 0 0.0.0.0:6033 0.0.0.0:* LISTEN 5181/proxysql [root@jiessie test]# mysql -uadmin -padmin -h127.0.0.1 -P6032Warning: Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 1Server version: 5.5.30 (ProxySQL Admin Module)Copyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [(none)] 16:28:32 &gt; show databases;+-----+---------+-------------------------------+| seq | name | file |+-----+---------+-------------------------------+| 0 | main | || 2 | disk | /var/lib/proxysql/proxysql.db || 3 | stats | || 4 | monitor | |+-----+---------+-------------------------------+4 rows in set (0.00 sec)MySQL [(none)] 16:28:41 &gt; 内置库main：默认数据库名,用于存放后端db实例、用户认证、路由规则等信息。表名以runtime开头的表示proxysql当前运行的配置内容，不能通过dml语句修改。只能修改对应的不以runtime开头的（在内存）里的表，然后LOAD使其生效，SAVE使其存到硬盘以供下次重启加载。disk：是持久化到硬盘的配置，sqlite数据文件。stats：是proxysql运行抓取的统计信息，包括到后端各命令的执行次数、流量、processlist、查询各类汇总、执行时间等。monitor：库存储monitor模块收集的信息，主要是对后端db的健康、延迟检查。 main库runtime_表123456789101112131415161718192021222324252627MySQL [main] 17:19:10 &gt; use mainDatabase changedMySQL [main] 17:22:15 &gt; show tables;+--------------------------------------------+| tables |+--------------------------------------------+| global_variables || mysql_collations || mysql_group_replication_hostgroups || mysql_query_rules || mysql_replication_hostgroups || mysql_servers || mysql_users || proxysql_servers || runtime_global_variables || runtime_mysql_group_replication_hostgroups || runtime_mysql_query_rules || runtime_mysql_replication_hostgroups || runtime_mysql_servers || runtime_mysql_users || runtime_proxysql_servers || runtime_scheduler || scheduler |+--------------------------------------------+17 rows in set (0.00 sec)MySQL [main] 17:22:16 &gt; 其中，runtime_开关的表如下： runtime_global_variables：global_variables的运行时版本 runtime_mysql_group_replication_hostgroups：mysql_group_replication_hostgroups的运行时版本 runtime_mysql_query_rules：mysql_query_rules的运行时版本 runtime_mysql_replication_hostgroups：mysql_replication_hostsgroups的运行时版本 runtime_mysql_servers：mysql_servers的运行时版本 runtime_mysql_users：mysql_users的运行时版本 runtime_scheduler：scheduler调度程序的运行时版本 global_variables表内置参数表，参考下文 mysql_servers表12345678910111213141516171819MySQL [main] 17:22:16 &gt; show create table mysql_servers\G*************************** 1. row *************************** table: mysql_serversCreate Table: CREATE TABLE mysql_servers ( hostgroup_id INT NOT NULL DEFAULT 0, hostname VARCHAR NOT NULL, port INT NOT NULL DEFAULT 3306, status VARCHAR CHECK (UPPER(status) IN ('ONLINE','SHUNNED','OFFLINE_SOFT', 'OFFLINE_HARD')) NOT NULL DEFAULT 'ONLINE', weight INT CHECK (weight &gt;= 0) NOT NULL DEFAULT 1, compression INT CHECK (compression &gt;=0 AND compression &lt;= 102400) NOT NULL DEFAULT 0, max_connections INT CHECK (max_connections &gt;=0) NOT NULL DEFAULT 1000, max_replication_lag INT CHECK (max_replication_lag &gt;= 0 AND max_replication_lag &lt;= 126144000) NOT NULL DEFAULT 0, use_ssl INT CHECK (use_ssl IN(0,1)) NOT NULL DEFAULT 0, max_latency_ms INT UNSIGNED CHECK (max_latency_ms&gt;=0) NOT NULL DEFAULT 0, comment VARCHAR NOT NULL DEFAULT '', PRIMARY KEY (hostgroup_id, hostname, port) )1 row in set (0.00 sec)MySQL [main] 17:34:05 &gt; hostgroup_id：ProxySQL通过hostgroup的形式组织后端db实例,一个hostgroup代表同属于一个角色。表的主键是(hostgroup_id, hostname, port),以hostname:port在多个hostgroup中存在。一个hostgroup可以有多个实例，即是多个从库，可能通过weight分配权重。hostgroup_id 0是一个特殊的hostgroup，路由查询的时候，没有匹配到规则则默认选择hostgroup 0。 status：ONLINE：当前后端实例状态正常。SHUNNED：临时被剔除，可能因为后端too many connection error，或者超过了max_replication_lag。OFFLINE_SOFT：软离线状态，不再接受新的连接，但已建立的连接会等待活跃事务完成。OFFLINE_HARD：硬离线状态，不再接受新的连接，已建立的连接或被强制中断，当后端实例宕机或网络不可达，会出现。 max_connections：允许连接到该后端实例的最大连接数，不要大于MySQL的max_connections。如果后端实例hostname:port在多个hostgroup里，以较大者为准，而不是各自独立允许的最大连接数。 max_replication_lag：允许的最大延迟，主库不受影响，默认为0，如果&gt;0，monitor模块监控主从延迟大于阈值时，会临时把它的状态变更为SHUNNED。 max_latency_ms：mysql_ping响应时间，大于这个阈值会把它从连接池剔除，即使是ONLINE。 comment：备注，不建设为空。 其他的字段，可通过字面意思理解。 mysql_users表123456789101112131415161718192021MySQL [main] 09:13:02 &gt; show create table mysql_users\G*************************** 1. row *************************** table: mysql_usersCreate Table: CREATE TABLE mysql_users ( username VARCHAR NOT NULL, password VARCHAR, active INT CHECK (active IN (0,1)) NOT NULL DEFAULT 1, use_ssl INT CHECK (use_ssl IN (0,1)) NOT NULL DEFAULT 0, default_hostgroup INT NOT NULL DEFAULT 0, default_schema VARCHAR, schema_locked INT CHECK (schema_locked IN (0,1)) NOT NULL DEFAULT 0, transaction_persistent INT CHECK (transaction_persistent IN (0,1)) NOT NULL DEFAULT 1, fast_forward INT CHECK (fast_forward IN (0,1)) NOT NULL DEFAULT 0, backend INT CHECK (backend IN (0,1)) NOT NULL DEFAULT 1, frontend INT CHECK (frontend IN (0,1)) NOT NULL DEFAULT 1, max_connections INT CHECK (max_connections &gt;=0) NOT NULL DEFAULT 10000, PRIMARY KEY (username, backend), UNIQUE (username, frontend))1 row in set (0.00 sec)MySQL [main] 09:13:08 &gt; username,password：连接到后端MySQL或ProxySQL实例的凭证,参考密码管理。密码可插入明文，也可通过PASSWORD()插入密文，proxysql以*开头判断插入是否是密文。但是runtime_mysql_users里统一是密文，所以明文插入，再SAVE MYSQL USERS TO MEM，此时看到的也是HASH密文。 active：是否生效该用户，active=0的用户将在数据库中被跟踪，但不会加载到内存中的数据结构中。 default_hostgroup：这个用户的请求没有匹配到规则时，默认发到hostgroup，默认0。 default_schema：这个用户连接时没有指定schema时，默认使用的schema。默认为NULL，实际上受变量mysql-default_schema的影响，默认为information_schema。 transaction_persistent： 如果设置为1，连接上ProxySQL的会话后，如果在一个hostgroup上开启了事务，那么后续的sql都继续维持在这个hostgroup上，不论是否会匹配上其它路由规则，直到事务结束。 frontend：如果设置为1，则用户名、密码对ProxySQL进行身份验证。 backend：如果设置为1，则用户名、密码根据任何主机组向mysqld服务器进行身份验证。注意，目前所有用户都需要将“前端”和“后端“都设置为1，未来版本的ProxySQL将分离前端和后端之间的crendentials。以这种方式，前端将永远不会知道直接连接到后端的凭据，强制所有通过ProxySQL的连接并增加系统的安全性。 mysql_replication_hostgroups表1234567891011MySQL [main] 10:18:15 &gt; show create table mysql_replication_hostgroups\G*************************** 1. row *************************** table: mysql_replication_hostgroupsCreate Table: CREATE TABLE mysql_replication_hostgroups ( writer_hostgroup INT CHECK (writer_hostgroup&gt;=0) NOT NULL PRIMARY KEY, reader_hostgroup INT NOT NULL CHECK (reader_hostgroup&lt;&gt;writer_hostgroup AND reader_hostgroup&gt;0), comment VARCHAR, UNIQUE (reader_hostgroup))1 row in set (0.00 sec)MySQL [main] 10:18:22 &gt; 定义hostgroup的主从关系。ProxySQL monitor模块会监控hostgroup后端所有servers的read_only变量，如果发现从库的read_only变为0、主库变为1，则认为角色互换了，自动改写mysql_servers表里面hostgroup关系，达到failover效果。 mysql_query_rules查询规则表1234567891011121314151617181920212223242526272829303132333435363738MySQL [main] 10:25:22 &gt; show create table mysql_query_rules\G *************************** 1. row *************************** table: mysql_query_rulesCreate Table: CREATE TABLE mysql_query_rules ( rule_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, active INT CHECK (active IN (0,1)) NOT NULL DEFAULT 0, username VARCHAR, schemaname VARCHAR, flagIN INT NOT NULL DEFAULT 0, client_addr VARCHAR, proxy_addr VARCHAR, proxy_port INT, digest VARCHAR, match_digest VARCHAR, match_pattern VARCHAR, negate_match_pattern INT CHECK (negate_match_pattern IN (0,1)) NOT NULL DEFAULT 0, re_modifiers VARCHAR DEFAULT 'CASELESS', flagOUT INT, replace_pattern VARCHAR, destination_hostgroup INT DEFAULT NULL, cache_ttl INT CHECK(cache_ttl &gt; 0), reconnect INT CHECK (reconnect IN (0,1)) DEFAULT NULL, timeout INT UNSIGNED, retries INT CHECK (retries&gt;=0 AND retries &lt;=1000), delay INT UNSIGNED, next_query_flagIN INT UNSIGNED, mirror_flagOUT INT UNSIGNED, mirror_hostgroup INT UNSIGNED, error_msg VARCHAR, OK_msg VARCHAR, sticky_conn INT CHECK (sticky_conn IN (0,1)), multiplex INT CHECK (multiplex IN (0,1,2)), log INT CHECK (log IN (0,1)), apply INT CHECK(apply IN (0,1)) NOT NULL DEFAULT 0, comment VARCHAR)1 row in set (0.00 sec)MySQL [main] 10:25:34 &gt; rule_id：表主键，自增，规则处理是以rule_id为顺序进行。 active：只有active=1时的规则才会参与匹配。 username：过滤匹配用户名的条件，如果是非空值，则仅当连接使用正确的用户名时，查询才匹配。 schemaname：匹配schemaname的过滤条件，如果是非空值，则仅当连接schemaname用作默认模式时，查询才匹配。 flagIN,flagOUT,apply：用来定义路由链chains of rules首先会检查flagIN=0的规则，以rule_id的顺序；如果没有匹配上，则走这个用户的default_hostgroup。当匹配一条规则后，会检查flagOUT。如果不为NULL，并且flagIN!=flagOUT，则进入以flagIN为上一个flagOUT值的新规则链。如果不为NULL，并且flagIN=flagOUT，则应用这条规则。如果为NULL，或者apply=1，则结束，应用这条规则。如果最终没有匹配到，则找到这个用户的default_hostgroup。 client_addr：匹配客户端来源IP。 proxy_addr,proxy_port：匹配本地proxysql的ip、端口。 digest：精确匹配的查询。 match_digest：正则匹配查询。query,digest是指对查询去掉具体值后进行”模糊化“后的查询，类似pt-query-digest的效果。 match_pattern：正则匹配查询。以上都是匹配查询的规则，1.4版本可以通过变量mysql-query_processor_regex设置，支持RE2和PCRE，1.4版本开始默认为PCRE。 negate_match_pattern：反向匹配，相当于对match_digest/match_pattern的匹配取反。 re_modifiers：修改正则匹配的参数，比如默认的：忽略大小写CASELESS、禁用GLOBAL。 下面是匹配后的行为： replace_pattern：查询重写，默认为空。 destination_hostgroup：路由查询到这个hostgroup，当然如果用户显式start transaction且transaction_persistent=1,那么即使匹配到了，也依然按照事务里第一条sql的路由规则去走的。 cache_ttl：查询结果缓存的毫秒数。 timeout：这一类查询执行的的最大时间(毫秒),超时则自动kill。这是对后端DB的保护机制，相当于阿里云RDS的loose_max_statement_time变量的功能，但不同的是，阿里云这个变量的时间时不包括DML操作出现InnoDB行锁等待的时间，而ProxySQL的这个timeout是计算从发送sql到等待响应的时间。默认mysql-default_query_timeout是10h。 retries：语句在执行失败时，重试次数。默认由mysql-query_retries_on_failure变量指定，为1。建议不要重试，有风险。 delay：查询延迟执行，这是ProxySQL提供的限流机制，会让其它的查询优先执行。默认值mysql-default_query_delay为0。 mirror_flagOUT,mirror_hostgroup：与镜像相关的设置。 error_msg：默认为NULL，如果指定了则这个查询直接被block掉，将error_msg返回给客户端。 multiplex：连接是否利用，请参考文章。 log：是否记录查询日志，可以看到log是否记录的对象是根据规则。要开启日志记录，需要设置变量mysql-eventslog_filename来指定文件名，然后这个log标记为1。但是目前proxysql记录的日志是二进制格式，需要特定的工具才能读取：eventslog_reader_sample。这个工具在源码目录 tools下面。 scheduler调度表1234567891011121314151617MySQL [main] 10:27:52 &gt; show create table scheduler\G*************************** 1. row *************************** table: schedulerCreate Table: CREATE TABLE scheduler ( id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, active INT CHECK (active IN (0,1)) NOT NULL DEFAULT 1, interval_ms INTEGER CHECK (interval_ms&gt;=100 AND interval_ms&lt;=100000000) NOT NULL, filename VARCHAR NOT NULL, arg1 VARCHAR, arg2 VARCHAR, arg3 VARCHAR, arg4 VARCHAR, arg5 VARCHAR, comment VARCHAR NOT NULL DEFAULT '')1 row in set (0.00 sec)MySQL [main] 11:09:59 &gt; id：调度程序作业的唯一标识符。 active：如果设置为1，则作业处于活动状态。 interval_ms：工作的开始频率(以毫秒为单位)，最小interval_ms为100毫秒。 filename：可执行文件的完整路径。 arg1-arg5：传递作业的参数。最多5个。 comment：注释。 参考文档disk库1234567891011121314151617MySQL [main] 15:12:14 &gt; show tables from disk;+------------------------------------+| tables |+------------------------------------+| global_variables || mysql_collations || mysql_group_replication_hostgroups || mysql_query_rules || mysql_replication_hostgroups || mysql_servers || mysql_users || proxysql_servers || scheduler |+------------------------------------+9 rows in set (0.00 sec)MySQL [main] 15:12:26 &gt; 具体的表介绍和main库一致。 stats库123456789101112131415161718192021MySQL [main] 15:12:26 &gt; show tables from stats;+-----------------------------------+| tables |+-----------------------------------+| global_variables || stats_memory_metrics || stats_mysql_commands_counters || stats_mysql_connection_pool || stats_mysql_connection_pool_reset || stats_mysql_global || stats_mysql_processlist || stats_mysql_query_digest || stats_mysql_query_digest_reset || stats_mysql_query_rules || stats_mysql_users || stats_proxysql_servers_metrics || stats_proxysql_servers_status |+-----------------------------------+13 rows in set (0.00 sec)MySQL [main] 15:13:53 &gt; stats_mysql_commands_counters表12345678910111213141516171819202122MySQL [stats] 15:15:36 &gt; show create table stats.stats_mysql_commands_counters\G*************************** 1. row *************************** table: stats_mysql_commands_countersCreate Table: CREATE TABLE stats_mysql_commands_counters ( Command VARCHAR NOT NULL PRIMARY KEY, Total_Time_us INT NOT NULL, Total_cnt INT NOT NULL, cnt_100us INT NOT NULL, cnt_500us INT NOT NULL, cnt_1ms INT NOT NULL, cnt_5ms INT NOT NULL, cnt_10ms INT NOT NULL, cnt_50ms INT NOT NULL, cnt_100ms INT NOT NULL, cnt_500ms INT NOT NULL, cnt_1s INT NOT NULL, cnt_5s INT NOT NULL, cnt_10s INT NOT NULL, cnt_INFs)1 row in set (0.00 sec)MySQL [stats] 15:15:58 &gt; command：已执行的SQL命令的类型，如FLUSH、INSERT、KILL、SELECT FOR UPDATE等。 Total_Time_us：执行该类型命令的总时间(以毫秒为单位)。 Total_cnt：执行该类型的命令的总数。 cnt_100us-cnt_INFs：在指定的时间限制内执行的给定类型的命令总数和前一个命令的总数。##### stats_mysql_connection_pool表 12345678910111213141516171819MySQL [stats] 15:15:58 &gt; show create table stats.stats_mysql_connection_pool \G *************************** 1. row *************************** table: stats_mysql_connection_poolCreate Table: CREATE TABLE stats_mysql_connection_pool ( hostgroup INT, srv_host VARCHAR, srv_port INT, status VARCHAR, ConnUsed INT, ConnFree INT, ConnOK INT, ConnERR INT, Queries INT, Bytes_data_sent INT, Bytes_data_recv INT, Latency_us INT)1 row in set (0.00 sec)MySQL [stats] 15:20:08 &gt; hostgroup：后端服务器所属的主机组，单个后端服务器可以属于多个主机组。 srv_host,srv_port：mysqld后端服务器正在侦听连接的TCP端点的IP和Port。 status：后端服务器的状态。可以有ONLINE，SHUNNED，OFFLINE_SOFT，OFFLINE_HARD。 ConnUsed：ProxySQL当前使用多少个连接来向后端服务器发送查询。 ConnFree：目前有多少个连接是空闲。 ConnOK：成功建立了多少个连接。 ConnERR：没有成功建立多少个连接。 Queries：路由到此特定后端服务器的查询数。 Bytes_data_sent：发送到后端的数据量。 Bytes_data_recv：从后端接收的数据量。 Latency_ms：从Monitor报告的当前ping以毫秒为单位的延迟时间。 stats_mysql_global表123456789MySQL [stats] 15:20:08 &gt; show create table stats.stats_mysql_global\G *************************** 1. row *************************** table: stats_mysql_globalCreate Table: CREATE TABLE stats_mysql_global ( Variable_Name VARCHAR NOT NULL PRIMARY KEY, Variable_Value VARCHAR NOT NULL)1 row in set (0.00 sec)MySQL [stats] 15:22:35 &gt; Variable_Name：代表与MySQL相关的代理级别的全局统计如Client_Connections_aborted：由于无效凭据或max_connections而导致的前端连接数已达到；如Client_Connections_connected：当前连接的前端连接数。如Client_Connections_created：到目前为止创建的前端连接数。等等。 Variable_Value：统计所对应的值。 stats_mysql_processlist表123456789101112131415161718192021MySQL [stats] 15:24:11 &gt; show create table stats.stats_mysql_processlist\G*************************** 1. row *************************** table: stats_mysql_processlistCreate Table: CREATE TABLE stats_mysql_processlist ( ThreadID INT NOT NULL, SessionID INTEGER PRIMARY KEY, user VARCHAR, db VARCHAR, cli_host VARCHAR, cli_port INT, hostgroup INT, l_srv_host VARCHAR, l_srv_port INT, srv_host VARCHAR, srv_port INT, command VARCHAR, time_ms INT NOT NULL, info VARCHAR)1 row in set (0.00 sec)MySQL [stats] 15:26:43 &gt; ThreadID：ProxySQL线程的内部ID。 SessionID：ProxySQL会话ID，通过这个ID可以进行kill操作。 user：与MySQL客户端连接到ProxySQL的用户。 db：当前选择的数据库。 cli_host,cli_port：连接ProxySQL的IP和TCP端口。 hostgroup：当前主机组。如果正在处理查询，则是查询已被路由或将要路由的主机组，或默认主机组。可以通过这个查看该SQL到底是到哪个HG里。 l_srv_host,l_srv_port：ProxySQL的IP和TCP端口。 srv_host,srv_port：后端MySQL服务器的IP和端口。 command：正在执行的MySQL查询的类型。 time_ms：命令执行的时间(以毫秒为单位)。 info：正在执行的SQL。 stats_mysql_query_digest表12345678910111213141516171819MySQL [stats] 15:26:43 &gt; show create table stats.stats_mysql_query_digest\G*************************** 1. row *************************** table: stats_mysql_query_digestCreate Table: CREATE TABLE stats_mysql_query_digest ( hostgroup INT, schemaname VARCHAR NOT NULL, username VARCHAR NOT NULL, digest VARCHAR NOT NULL, digest_text VARCHAR NOT NULL, count_star INTEGER NOT NULL, first_seen INTEGER NOT NULL, last_seen INTEGER NOT NULL, sum_time INTEGER NOT NULL, min_time INTEGER NOT NULL, max_time INTEGER NOT NULL, PRIMARY KEY(hostgroup, schemaname, username, digest))1 row in set (0.00 sec)MySQL [stats] 15:29:27 &gt; hostgroup：发送查询的主机组。值-1表示查询查询缓存。 schemaname：查询的数据库。 user：连接ProxySQL的用户名。 digest：一个十六进制散列，表示其参数剥离的SQL。 digest_text：参数剥离的实际SQL文本 count_star：执行查询的总次数（参数的值不同）。 first_seen：unix时间戳，是通过代理路由查询的第一时刻。 last_seen：unix时间戳，当查询通过代理路由时的最后一刻（到目前为止）。 sum_time：执行此类查询的总时间（以微秒为单位）。这对于确定应用程序工作负载中花费的最多时间在哪里是非常有用的，并为改进的地方提供了一个良好的起点。 min_time,max_time - 执行此类查询时期望的持续时间范围。min_time是到目前为止所看到的最小执行时间，而max_time表示最大执行时间，以微秒为单位。 stats_mysql_query_rules表123456789MySQL [stats] 15:29:27 &gt; show create table stats.stats_mysql_query_rules\G *************************** 1. row *************************** table: stats_mysql_query_rulesCreate Table: CREATE TABLE stats_mysql_query_rules ( rule_id INTEGER PRIMARY KEY, hits INT NOT NULL)1 row in set (0.00 sec)MySQL [stats] 15:31:57 &gt; rule_id：路由规则的ID与main.mysql_query_rules的id对应。 hits：此路由规则的匹配总数。 如果当前传入的查询符合规则，则会记录一次命中。monitor库对后端MySQL的健康检查，由变量mysql-monitor_enabled来确定是否开启Monitor模块。 123456789101112131415MySQL [stats] 15:35:32 &gt; show tables from monitor; +------------------------------------+| tables |+------------------------------------+| mysql_server_connect || mysql_server_connect_log || mysql_server_group_replication_log || mysql_server_ping || mysql_server_ping_log || mysql_server_read_only_log || mysql_server_replication_lag_log |+------------------------------------+7 rows in set (0.00 sec)MySQL [stats] 15:35:52 &gt; mysql_server_connect/mysql_server_connect_log表123456789101112131415161718192021222324252627282930313233MySQL [stats] 15:37:39 &gt; show create table monitor.mysql_server_connect\G *************************** 1. row *************************** table: mysql_server_connectCreate Table: CREATE TABLE mysql_server_connect ( hostname VARCHAR NOT NULL, port INT NOT NULL DEFAULT 3306, time_since INT NOT NULL DEFAULT 0, time_until INT NOT NULL DEFAULT 0, connect_success_count INT NOT NULL DEFAULT 0, connect_success_first INT NOT NULL DEFAULT 0, connect_success_last INT NOT NULL DEFAULT 0, connect_success_time_min INT NOT NULL DEFAULT 0, connect_success_time_max INT NOT NULL DEFAULT 0, connect_success_time_total INT NOT NULL DEFAULT 0, connect_failure_count INT NOT NULL DEFAULT 0, connect_failure_first INT NOT NULL DEFAULT 0, connect_failure_last INT NOT NULL DEFAULT 0, PRIMARY KEY (hostname, port))1 row in set (0.00 sec)MySQL [stats] 15:37:46 &gt; show create table monitor.mysql_server_connect_log\G*************************** 1. row *************************** table: mysql_server_connect_logCreate Table: CREATE TABLE mysql_server_connect_log ( hostname VARCHAR NOT NULL, port INT NOT NULL DEFAULT 3306, time_start_us INT NOT NULL DEFAULT 0, connect_success_time_us INT DEFAULT 0, connect_error VARCHAR, PRIMARY KEY (hostname, port, time_start_us))1 row in set (0.00 sec)MySQL [stats] 15:37:51 &gt; 连接到所有MySQL服务器以检查它们是否可用，该表用来存放检测连接的日志。由变量mysql-monitor_connect_interval来控制其检测的时间间隔，由参数mysql-monitor_connect_timeout控制连接是否超时（默认200毫秒）。 mysql_server_ping/mysql_server_ping_log表1234567891011121314151617181920212223242526272829303132MySQL [stats] 15:39:23 &gt; show create table monitor.mysql_server_ping\G *************************** 1. row *************************** table: mysql_server_pingCreate Table: CREATE TABLE mysql_server_ping ( hostname VARCHAR NOT NULL, port INT NOT NULL DEFAULT 3306, time_since INT NOT NULL DEFAULT 0, time_until INT NOT NULL DEFAULT 0, ping_success_count INT NOT NULL DEFAULT 0, ping_success_first INT NOT NULL DEFAULT 0, ping_success_last INT NOT NULL DEFAULT 0, ping_success_time_min INT NOT NULL DEFAULT 0, ping_success_time_max INT NOT NULL DEFAULT 0, ping_success_time_total INT NOT NULL DEFAULT 0, ping_failure_count INT NOT NULL DEFAULT 0, ping_failure_first INT NOT NULL DEFAULT 0, ping_failure_last INT NOT NULL DEFAULT 0, PRIMARY KEY (hostname, port))1 row in set (0.00 sec)MySQL [stats] 15:40:12 &gt; show create table monitor.mysql_server_ping_log\G*************************** 1. row *************************** table: mysql_server_ping_logCreate Table: CREATE TABLE mysql_server_ping_log ( hostname VARCHAR NOT NULL, port INT NOT NULL DEFAULT 3306, time_start_us INT NOT NULL DEFAULT 0, ping_success_time_us INT DEFAULT 0, ping_error VARCHAR, PRIMARY KEY (hostname, port, time_start_us))1 row in set (0.00 sec)MySQL [stats] 15:40:15 &gt; 使用mysql_ping API ping后端MySQL服务器检查它们是否可用，该表用来存放ping的日志。由变量mysql-monitor_ping_interval控制ping的时间间隔，默认值：10000（毫秒，相当于10秒）。 mysql_server_replication_lag_log表1234567891011121314MySQL [stats] 15:40:53 &gt; show create table monitor.mysql_server_replication_lag_log\G*************************** 1. row *************************** table: mysql_server_replication_lag_logCreate Table: CREATE TABLE mysql_server_replication_lag_log ( hostname VARCHAR NOT NULL, port INT NOT NULL DEFAULT 3306, time_start_us INT NOT NULL DEFAULT 0, success_time_us INT DEFAULT 0, repl_lag INT DEFAULT 0, error VARCHAR, PRIMARY KEY (hostname, port, time_start_us))1 row in set (0.00 sec)MySQL [stats] 15:41:12 &gt; 后端MySQL服务主从延迟的检测。由参数mysql-monitor_replication_lag_interval控制检测间隔时间， 如果复制滞后太大，可以暂时关闭从。由mysql_servers.max_replication_lag列控制。默认值：10000（毫秒，相当于10秒）。 内置参数global_variables 1.4版本中有95个参数，参数较多，解释请参考文档。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103MySQL [main] 11:16:22 &gt; show variables;+-----------------------------------------------------+--------------------+| Variable_name | Value |+-----------------------------------------------------+--------------------+| admin-admin_credentials | admin:admin || admin-cluster_check_interval_ms | 1000 || admin-cluster_password | || admin-cluster_username | || admin-hash_passwords | true || admin-mysql_ifaces | 0.0.0.0:6032 || admin-read_only | false || admin-refresh_interval | 2000 || admin-stats_credentials | stats:stats || admin-telnet_admin_ifaces | (null) || admin-telnet_stats_ifaces | (null) || admin-version | 1.4.1-45-gab4e6ee || mysql-client_found_rows | true || mysql-commands_stats | true || mysql-connect_retries_delay | 1 || mysql-connect_retries_on_failure | 10 || mysql-connect_timeout_server | 3000 || mysql-connect_timeout_server_max | 10000 || mysql-connection_delay_multiplex_ms | 0 || mysql-connection_max_age_ms | 0 || mysql-default_charset | utf8 || mysql-default_max_latency_ms | 1000 || mysql-default_query_delay | 0 || mysql-default_query_timeout | 36000000 || mysql-default_reconnect | true || mysql-default_schema | information_schema || mysql-default_sql_mode | || mysql-default_time_zone | SYSTEM || mysql-enforce_autocommit_on_reads | false || mysql-eventslog_filename | || mysql-eventslog_filesize | 104857600 || mysql-forward_autocommit | false || mysql-free_connections_pct | 10 || mysql-have_compress | true || mysql-hostgroup_manager_verbose | 1 || mysql-init_connect | (null) || mysql-interfaces | 0.0.0.0:6033 || mysql-long_query_time | 1000 || mysql-max_allowed_packet | 4194304 || mysql-max_connections | 2048 || mysql-max_stmts_cache | 10000 || mysql-max_stmts_per_connection | 20 || mysql-max_transaction_time | 14400000 || mysql-mirror_max_concurrency | 16 || mysql-mirror_max_queue_length | 32000 || mysql-monitor_connect_interval | 60000 || mysql-monitor_connect_timeout | 600 || mysql-monitor_enabled | true || mysql-monitor_groupreplication_healthcheck_interval | 5000 || mysql-monitor_groupreplication_healthcheck_timeout | 800 || mysql-monitor_history | 600000 || mysql-monitor_password | monitor || mysql-monitor_ping_interval | 10000 || mysql-monitor_ping_max_failures | 3 || mysql-monitor_ping_timeout | 1000 || mysql-monitor_query_interval | 60000 || mysql-monitor_query_timeout | 100 || mysql-monitor_read_only_interval | 1500 || mysql-monitor_read_only_timeout | 500 || mysql-monitor_replication_lag_interval | 10000 || mysql-monitor_replication_lag_timeout | 1000 || mysql-monitor_slave_lag_when_null | 60 || mysql-monitor_username | monitor || mysql-monitor_wait_timeout | true || mysql-monitor_writer_is_also_reader | true || mysql-multiplexing | true || mysql-ping_interval_server_msec | 120000 || mysql-ping_timeout_server | 500 || mysql-poll_timeout | 2000 || mysql-poll_timeout_on_failure | 100 || mysql-query_cache_size_MB | 256 || mysql-query_digests | true || mysql-query_digests_lowercase | false || mysql-query_digests_max_digest_length | 2048 || mysql-query_digests_max_query_length | 65000 || mysql-query_processor_iterations | 0 || mysql-query_processor_regex | 1 || mysql-query_retries_on_failure | 1 || mysql-server_capabilities | 45578 || mysql-server_version | 5.5.30 || mysql-servers_stats | true || mysql-session_idle_ms | 1000 || mysql-session_idle_show_processlist | true || mysql-sessions_sort | true || mysql-shun_on_failures | 5 || mysql-shun_recovery_time_sec | 10 || mysql-ssl_p2s_ca | (null) || mysql-ssl_p2s_cert | (null) || mysql-ssl_p2s_cipher | (null) || mysql-ssl_p2s_key | (null) || mysql-stacksize | 1048576 || mysql-threads | 4 || mysql-threshold_query_length | 524288 || mysql-threshold_resultset_size | 4194304 || mysql-wait_timeout | 28800000 |+-----------------------------------------------------+--------------------+95 rows in set (0.00 sec)MySQL [main] 11:16:33 &gt; ProxySQL多层配置设计ProxySQL设计模型介绍ProxySQL使用多层配置系统，适合满足以下需求： 允许自动更新配置，与MySQL兼容管理界面； 允许在线修改配置，不用重启ProxySQL； 允许回滚配置；多层配置系统的实现，如下图： 1234567891011121314151617+-------------------------+| RUNTIME |+-------------------------+ /|\ | | | [1] | [2] | | \|/+-------------------------+| MEMORY |+-------------------------+ _ /|\ | |\ | | \ [3] | [4] | \ [5] | \|/ \+-------------------------+ +-------------------------+| DISK | | CONFIG FILE |+-------------------------+ +-------------------------+ RUNTIME代表ProxySQL当前生效的配置，包括global_variables、mysql_servers、mysql_users、mysql_query_rules。无法直接修改这里的配置，必须要从下一层load过来。 MEMORY(main)代表平时在mysql命令行修改的main里的配置，可以认为是SQLite数据库在内存的镜像。可修改以下： 12345mysql_server 后端服务器列表mysql_users 连接到ProxySQL的用户列表及其凭据 mysql_query_rules 将流量路由到不同的后端服务器的规则列表global_variables 全局变量列表mysql_collat MySQL排序规则列表 DISK和CONFIG FILE表示磁盘上SQLite数据库，默认位置在$datadir/proxysql.db，在重新启动过程中，内存中未被保存的配置将丢失。/etc/proxysql.cnf文件只在第一次初始化的时候用到。如要修改端口，还是需要在管理命令行里修改，再save到磁盘。 ProxySQL多层配置修改示例 mysql users 12345LOAD MYSQL USERS TO RUNTIME / LOAD MYSQL USERS FROM MEMORYSAVE MYSQL USERS TO MEMORY / SAVE MYSQL USERS FROM RUNTIMELOAD MYSQL USERS TO MEMORY / LOAD MYSQL USERS FROM DISKSAVE MYSQL USERS TO DISK / SAVE MYSQL USERS FROM MEMORYLOAD MYSQL USERS FROM CONFIG mysql servers 12345LOAD MYSQL SERVERS TO RUNTIME 让修改的配置生效SAVE MYSQL SERVERS TO MEMORYLOAD MYSQL SERVERS TO MEMORYSAVE MYSQL SERVERS TO DISK 将修改的配置持久化LOAD MYSQL SERVERS FROM CONFIG mysql query rules 12345load mysql query rules to runsave mysql query rules to memload mysql query rules to memsave mysql query rules to diskload mysql query rules from config mysql variables 12345load mysql variables to runtimesave mysql variables to memoryload mysql variables to memorysave mysql variables to diskload mysql variables from config admin variables 12345load admin variables to runtimesave admin variables to memoryload admin variables to memorysave admin variables to diskload admin variables from config 参考 https://github.com/sysown/proxysql/wiki/Multi-layer-configuration-system https://severalnines.com/blog/mysql-load-balancing-proxysql-overview http://seanlook.com/2017/04/10/mysql-proxysql-install-config/ ProxySQL读写分离示例准备Master:118.190.67.67:3306Slave :139.196.95.103:3306(192.168.7.50)ProxySQL：139.196.95.103:3306(192.168.7.50)版本：percona-server 5.7.18 安装配置主从安装配置省略。 示例目标客户端通过访问ProxySQL的ip，实际访问Master和Slave的效果。 添加后端DB服务100是主库，101是从库，同时主库也处理1/10的读请求，登录ProxySQL管理端设置：12MySQL [(none)] 14:22:06 &gt; insert into mysql_servers(hostgroup_id,hostname,port,weight,comment) values(100, '118.190.67.67', 3306, 1, 'db0,ReadWrite'),(101, '192.168.7.50', 3306, 9, 'db0,ReadOnly');Query OK, 2 rows affected (0.00 sec) 添加访问用户登录Master主库设置监控用户和程序用户(由于是测试使用，权限较大，主机允许所有)：1234567891011MySQL [(none)] 15:51:32 &gt; create user 'monitor'@'%' identified by 'monitor';Query OK, 0 rows affected (0.00 sec)MySQL [(none)] 15:51:37 &gt; grant select,super,process,show databases,replication client,replication slave on *.* to 'monitor'@'%';Query OK, 0 rows affected (0.00 sec)MySQL [(none)] 15:45:23 &gt; create user 'user0'@'%' identified by 'password0'; Query OK, 0 rows affected (0.00 sec)MySQL [(none)] 15:49:42 &gt; GRANT SELECT, RELOAD, PROCESS, SHOW DATABASES, SUPER, LOCK TABLES, EXECUTE, SHOW VIEW, TRIGGER, EVENT ON *.* TO 'read0'@'%';Query OK, 0 rows affected (0.00 sec) 登录ProxySQL管理端设置：这里default_hostgroup指定了hostgroup为100的主库，下文会设置SELECT …FOR UPDATE规则到100，SELECT到101，其他所有的SQL到default_hostgroup，也就是主库。12MySQL [(none)] 14:22:15 &gt; INSERT INTO mysql_users (username, password, active, default_hostgroup, max_connections) VALUES ('user0', 'password0', 1, 100, 1000); Query OK, 2 rows affected (0.00 sec) 添加复制关系登录ProxySQL管理端设置：12345678910111213141516171819202122232425MySQL [main] 17:32:46 &gt; INSERT INTO mysql_replication_hostgroups VALUES(100,101,'db0');Query OK, 1 row affected (0.00 sec)MySQL [main] 17:33:30 &gt; load mysql variables to runtime;Query OK, 0 rows affected (0.00 sec)MySQL [main] 17:33:54 &gt; save mysql variables to disk;Query OK, 83 rows affected (0.01 sec)MySQL [main] 17:35:53 &gt; SELECT * FROM monitor.mysql_server_read_only_log ORDER BY time_start_us DESC LIMIT 10;+---------------+------+------------------+-----------------+-----------+-------+| hostname | port | time_start_us | success_time_us | read_only | error |+---------------+------+------------------+-----------------+-----------+-------+| 192.168.7.50 | 3306 | 1504085770195146 | 630 | 1 | NULL || 118.190.67.67 | 3306 | 1504085770194710 | 23722 | 0 | NULL || 192.168.7.50 | 3306 | 1504085768695087 | 650 | 1 | NULL || 118.190.67.67 | 3306 | 1504085768694620 | 23706 | 0 | NULL || 192.168.7.50 | 3306 | 1504085767194957 | 628 | 1 | NULL || 118.190.67.67 | 3306 | 1504085767194507 | 23686 | 0 | NULL || 192.168.7.50 | 3306 | 1504085765694834 | 634 | 1 | NULL || 118.190.67.67 | 3306 | 1504085765694387 | 23669 | 0 | NULL || 192.168.7.50 | 3306 | 1504085764194744 | 641 | 1 | NULL || 118.190.67.67 | 3306 | 1504085764194301 | 23729 | 0 | NULL |+---------------+------+------------------+-----------------+-----------+-------+10 rows in set (0.00 sec) 修改全局变量登录ProxySQL管理端设置：1234567891011121314151617181920212223242526272829MySQL [(none)] 14:25:07 &gt; set mysql-query_retries_on_failure=0;Query OK, 1 row affected (0.00 sec)MySQL [(none)] 14:25:07 &gt; set mysql-max_stmts_per_connection=1000;Query OK, 1 row affected (0.00 sec)MySQL [(none)] 14:25:07 &gt; set mysql-eventslog_filename='queries.log';Query OK, 1 row affected (0.00 sec)MySQL [(none)] 14:25:07 &gt; set mysql-monitor_slave_lag_when_null=7200;Query OK, 1 row affected (0.00 sec)MySQL [(none)] 14:25:07 &gt; set mysql-ping_timeout_server=1500;Query OK, 1 row affected (0.00 sec)MySQL [(none)] 14:25:07 &gt; set mysql-monitor_connect_timeout=1000;Query OK, 1 row affected (0.00 sec)MySQL [(none)] 14:25:07 &gt; set mysql-default_max_latency_ms=2000;Query OK, 1 row affected (0.00 sec)MySQL [(none)] 14:25:07 &gt; set mysql-monitor_username='monitor';Query OK, 1 row affected (0.00 sec)MySQL [(none)] 14:25:07 &gt; set mysql-monitor_password='monitor';Query OK, 1 row affected (0.00 sec)MySQL [(none)] 14:25:07 &gt; set mysql-server_version='5.7.18';Query OK, 1 row affected (0.00 sec) 全局变量生效并保存到磁盘：登录ProxySQL管理端设置：1234567891011121314151617181920MySQL [(none)] 14:25:07 &gt; load mysql users to runtime;Query OK, 0 rows affected (0.00 sec)MySQL [(none)] 14:25:27 &gt; load mysql servers to runtime;Query OK, 0 rows affected (0.00 sec)MySQL [(none)] 14:25:27 &gt; load mysql variables to runtime;Query OK, 0 rows affected (0.00 sec)MySQL [(none)] 14:25:28 &gt; save mysql users to disk;Query OK, 0 rows affected (0.02 sec)MySQL [(none)] 14:25:36 &gt; save mysql servers to disk;save mysql variables to disk;Query OK, 0 rows affected (0.03 sec)MySQL [(none)] 14:25:37 &gt; save mysql variables to disk;Query OK, 83 rows affected (0.01 sec)MySQL [(none)] 14:25:37 &gt; save mysql users to mem; -- 可以屏蔽看到的明文密码Query OK, 0 rows affected (0.00 sec) 路由规则 ProxySQL使用查询规则来确定路由，如果没有规则用于查询，默认会访问hostgroup 0主机组，会报以下错误：123[root@jiessie ~]# mysql -uuser0 -ppassword0 -h 127.0.0.1 -P6033 -e "SELECT 1"mysql: [Warning] Using a password on the command line interface can be insecure.ERROR 9001 (HY000) at line 1: Max connect timeout reached while reaching hostgroup 1 after 2000ms 设置路由规则：12345678910111213MySQL [(none)] 09:29:14 &gt; use main;Database changedMySQL [main] 09:29:15 &gt; INSERT INTO mysql_query_rules (active, match_pattern, destination_hostgroup, cache_ttl) VALUES (1, '^SELECT .* FOR UPDATE', 100, NULL);Query OK, 1 row affected (0.00 sec)MySQL [main] 09:29:17 &gt; INSERT INTO mysql_query_rules (active, match_pattern, destination_hostgroup, cache_ttl) VALUES (1, '^SELECT .*', 101, NULL);Query OK, 1 row affected (0.00 sec)MySQL [main] 09:29:18 &gt; load mysql query rules to run;Query OK, 0 rows affected (0.00 sec)MySQL [main] 09:29:56 &gt; save mysql query rules to disk;Query OK, 0 rows affected (0.03 sec) 常用查询 查询连接日志： 12345678910111213141516MySQL [(none)] 13:45:08 &gt; SELECT * FROM monitor.mysql_server_connect_log ORDER BY time_start_us DESC LIMIT 10;+---------------+------+------------------+-------------------------+---------------+| hostname | port | time_start_us | connect_success_time_us | connect_error |+---------------+------+------------------+-------------------------+---------------+| 192.168.7.50 | 3306 | 1504590343795072 | 410 | NULL || 118.190.67.67 | 3306 | 1504590343780010 | 69662 | NULL || 192.168.7.50 | 3306 | 1504590283795083 | 521 | NULL || 118.190.67.67 | 3306 | 1504590283779977 | 68310 | NULL || 192.168.7.50 | 3306 | 1504590223794987 | 533 | NULL || 118.190.67.67 | 3306 | 1504590223779913 | 53220 | NULL || 192.168.7.50 | 3306 | 1504590163794887 | 497 | NULL || 118.190.67.67 | 3306 | 1504590163779772 | 71389 | NULL || 192.168.7.50 | 3306 | 1504590103794788 | 487 | NULL || 118.190.67.67 | 3306 | 1504590103779728 | 68372 | NULL |+---------------+------+------------------+-------------------------+---------------+10 rows in set (0.00 sec) 查询ping日志： 12345678910111213141516MySQL [(none)] 13:46:22 &gt; SELECT * FROM monitor.mysql_server_ping_log ORDER BY time_start_us DESC LIMIT 10;+---------------+------+------------------+----------------------+------------+| hostname | port | time_start_us | ping_success_time_us | ping_error |+---------------+------+------------------+----------------------+------------+| 192.168.7.50 | 3306 | 1504590413773092 | 100 | NULL || 118.190.67.67 | 3306 | 1504590413770521 | 23105 | NULL || 192.168.7.50 | 3306 | 1504590403773088 | 168 | NULL || 118.190.67.67 | 3306 | 1504590403770479 | 23080 | NULL || 192.168.7.50 | 3306 | 1504590393772977 | 135 | NULL || 118.190.67.67 | 3306 | 1504590393770364 | 23078 | NULL || 192.168.7.50 | 3306 | 1504590383772899 | 138 | NULL || 118.190.67.67 | 3306 | 1504590383770309 | 23205 | NULL || 192.168.7.50 | 3306 | 1504590373772885 | 102 | NULL || 118.190.67.67 | 3306 | 1504590373770291 | 23099 | NULL |+---------------+------+------------------+----------------------+------------+10 rows in set (0.00 sec) 查询后端DB状态 12345678MySQL [(none)] 13:46:55 &gt; SELECT * FROM mysql_servers;+--------------+---------------+------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------------+| hostgroup_id | hostname | port | status | weight | compression | max_connections | max_replication_lag | use_ssl | max_latency_ms | comment |+--------------+---------------+------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------------+| 100 | 118.190.67.67 | 3306 | ONLINE | 1 | 0 | 1000 | 0 | 0 | 0 | db0,ReadWrite || 101 | 192.168.7.50 | 3306 | ONLINE | 9 | 0 | 1000 | 0 | 0 | 0 | db0,ReadOnly |+--------------+---------------+------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------------+2 rows in set (0.00 sec) 查询监控状态： 12345678910111213141516MySQL [(none)] 13:47:56 &gt; SELECT * FROM monitor.mysql_server_read_only_log ORDER BY time_start_us DESC LIMIT 10; +---------------+------+------------------+-----------------+-----------+-------+| hostname | port | time_start_us | success_time_us | read_only | error |+---------------+------+------------------+-----------------+-----------+-------+| 192.168.7.50 | 3306 | 1504590524103828 | 577 | 1 | NULL || 118.190.67.67 | 3306 | 1504590524103406 | 23499 | 0 | NULL || 192.168.7.50 | 3306 | 1504590522603717 | 646 | 1 | NULL || 118.190.67.67 | 3306 | 1504590522603268 | 23487 | 0 | NULL || 192.168.7.50 | 3306 | 1504590521103641 | 629 | 1 | NULL || 118.190.67.67 | 3306 | 1504590521103182 | 23497 | 0 | NULL || 192.168.7.50 | 3306 | 1504590519603662 | 639 | 1 | NULL || 118.190.67.67 | 3306 | 1504590519603201 | 23525 | 0 | NULL || 192.168.7.50 | 3306 | 1504590518103492 | 618 | 1 | NULL || 118.190.67.67 | 3306 | 1504590518103062 | 23508 | 0 | NULL |+---------------+------+------------------+-----------------+-----------+-------+10 rows in set (0.00 sec) 查询用户信息： 1234567MySQL [(none)] 13:49:28 &gt; SELECT * FROM mysql_users; +----------+-----------+--------+---------+-------------------+----------------+---------------+------------------------+--------------+---------+----------+-----------------+| username | password | active | use_ssl | default_hostgroup | default_schema | schema_locked | transaction_persistent | fast_forward | backend | frontend | max_connections |+----------+-----------+--------+---------+-------------------+----------------+---------------+------------------------+--------------+---------+----------+-----------------+| user0 | password0 | 1 | 0 | 100 | NULL | 0 | 1 | 0 | 1 | 1 | 1000 |+----------+-----------+--------+---------+-------------------+----------------+---------------+------------------------+--------------+---------+----------+-----------------+1 row in set (0.00 sec) 查询连接池： 12345678MySQL [(none)] 13:51:19 &gt; SELECT * FROM stats.stats_mysql_connection_pool;+-----------+---------------+----------+--------+----------+----------+--------+---------+---------+-----------------+-----------------+------------+| hostgroup | srv_host | srv_port | status | ConnUsed | ConnFree | ConnOK | ConnERR | Queries | Bytes_data_sent | Bytes_data_recv | Latency_us |+-----------+---------------+----------+--------+----------+----------+--------+---------+---------+-----------------+-----------------+------------+| 100 | 118.190.67.67 | 3306 | ONLINE | 0 | 1 | 1 | 0 | 3 | 58 | 233 | 23059 || 101 | 192.168.7.50 | 3306 | ONLINE | 0 | 1 | 3 | 88 | 5 | 106 | 360 | 102 |+-----------+---------------+----------+--------+----------+----------+--------+---------+---------+-----------------+-----------------+------------+2 rows in set (0.00 sec) 查询执行命令统计信息： 123456789MySQL [(none)] 13:51:47 &gt; SELECT * FROM stats_mysql_commands_counters WHERE Total_cnt;+---------+---------------+-----------+-----------+-----------+---------+---------+----------+----------+-----------+-----------+--------+--------+---------+----------+| Command | Total_Time_us | Total_cnt | cnt_100us | cnt_500us | cnt_1ms | cnt_5ms | cnt_10ms | cnt_50ms | cnt_100ms | cnt_500ms | cnt_1s | cnt_5s | cnt_10s | cnt_INFs |+---------+---------------+-----------+-----------+-----------+---------+---------+----------+----------+-----------+-----------+--------+--------+---------+----------+| SELECT | 167664 | 27 | 15 | 4 | 0 | 6 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 0 || SET | 0 | 2 | 2 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 || SHOW | 13818 | 1 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 |+---------+---------------+-----------+-----------+-----------+---------+---------+----------+----------+-----------+-----------+--------+--------+---------+----------+3 rows in set (0.00 sec) 查询路由规则的详情： 12345678910111213141516171819202122232425262728293031323334353637MySQL [(none)] 13:53:05 &gt; SELECT * FROM stats_mysql_query_digest ORDER BY sum_time DESC;+-----------+--------------------+----------+--------------------+----------------------------------+------------+------------+------------+----------+----------+----------+| hostgroup | schemaname | username | digest | digest_text | count_star | first_seen | last_seen | sum_time | min_time | max_time |+-----------+--------------------+----------+--------------------+----------------------------------+------------+------------+------------+----------+----------+----------+| 100 | information_schema | user0 | 0xA322907BCBC120DD | select * from tables limit ? | 1 | 1504589288 | 1504589288 | 133826 | 133826 | 133826 || 100 | information_schema | user0 | 0x02033E45904D3DF0 | show databases | 1 | 1504589886 | 1504589886 | 13818 | 13818 | 13818 || 100 | information_schema | user0 | 0x3765930C7143F468 | select * from t1 | 1 | 1504589311 | 1504589311 | 13466 | 13466 | 13466 || 101 | information_schema | user0 | 0xA322907BCBC120DD | select * from tables limit ? | 2 | 1504582304 | 1504583327 | 7325 | 3564 | 3761 || 101 | test | user0 | 0x814EDBB68FBACD5D | select * from neworders limit ? | 2 | 1504583184 | 1504583242 | 5959 | 2964 | 2995 || 101 | test | user0 | 0x3765930C7143F468 | select * from t1 | 3 | 1504583288 | 1504589859 | 3386 | 64 | 3056 || 101 | test | user0 | 0xA322907BCBC120DD | select * from tables limit ? | 2 | 1504583168 | 1504583299 | 3095 | 117 | 2978 || 101 | information_schema | user0 | 0x620B328FE9D6D71A | SELECT DATABASE() | 2 | 1504589729 | 1504589859 | 607 | 193 | 414 || 100 | information_schema | user0 | 0x226CD90D52A2BA0B | select @@version_comment limit ? | 8 | 1504582304 | 1504589886 | 0 | 0 | 0 || 100 | test | user0 | 0x52B8B04283B3A18D | set names utf8 | 1 | 1504583162 | 1504583162 | 0 | 0 | 0 || 100 | information_schema | user0 | 0x52B8B04283B3A18D | set names utf8 | 1 | 1504582582 | 1504582582 | 0 | 0 | 0 || 100 | test | user0 | 0x226CD90D52A2BA0B | select @@version_comment limit ? | 6 | 1504583162 | 1504583299 | 0 | 0 | 0 |+-----------+--------------------+----------+--------------------+----------------------------------+------------+------------+------------+----------+----------+----------+12 rows in set (0.00 sec)MySQL [(none)] 13:55:46 &gt; SELECT hostgroup hg, sum_time, count_star, digest_text FROM stats_mysql_query_digest ORDER BY sum_time DESC;+-----+----------+------------+----------------------------------+| hg | sum_time | count_star | digest_text |+-----+----------+------------+----------------------------------+| 100 | 133826 | 1 | select * from tables limit ? || 100 | 13818 | 1 | show databases || 100 | 13466 | 1 | select * from t1 || 101 | 7325 | 2 | select * from tables limit ? || 101 | 5959 | 2 | select * from neworders limit ? || 101 | 3386 | 3 | select * from t1 || 101 | 3095 | 2 | select * from tables limit ? || 101 | 607 | 2 | SELECT DATABASE() || 100 | 0 | 8 | select @@version_comment limit ? || 100 | 0 | 1 | set names utf8 || 100 | 0 | 1 | set names utf8 || 100 | 0 | 6 | select @@version_comment limit ? |+-----+----------+------------+----------------------------------+12 rows in set (0.00 sec) 查询路由规则： 12345678MySQL [(none)] 13:57:12 &gt; SELECT rule_id, match_digest, match_pattern, replace_pattern, cache_ttl, apply FROM mysql_query_rules ORDER BY rule_id;+---------+--------------+-----------------------+-----------------+-----------+-------+| rule_id | match_digest | match_pattern | replace_pattern | cache_ttl | apply |+---------+--------------+-----------------------+-----------------+-----------+-------+| 10 | NULL | ^SELECT .* FOR UPDATE | NULL | NULL | 0 || 11 | NULL | ^SELECT .* | NULL | NULL | 0 |+---------+--------------+-----------------------+-----------------+-----------+-------+2 rows in set (0.00 sec) 参考： https://github.com/sysown/proxysql/wiki/ProxySQL-Configuration#p6033 http://seanlook.com/2017/04/17/mysql-proxysql-route-rw_split/ http://severalnines.com/blog/how-proxysql-adds-failover-and-query-control-your-mysql-replication-setup ProxySQL监控PMM是Percona推出的一款很好的监控MySQL和MongoDB的开源工具，安装方便，功能丰富，图表美观，同时也支持ProxySQL的监控，故选择PMM作为ProxySQL的监控软件。这里以ProxySQL服务端(192.168.7.50)为例，作为PMM的客户端，PMM服务器为139.196.99.230,仅演示ProxySQL安装PMM客户端，服务器安装配置省略。 PMM Client安装1234567891011121314151617181920212223242526272829303132333435363738394041[root@jiessie ~]# yum localinstall -y /hwdata/duanwenjie/test/proxysql-1.4.1-1-centos67.x86_64.rpm Loaded plugins: securitySetting up Local Package ProcessExamining /hwdata/duanwenjie/test/proxysql-1.4.1-1-centos67.x86_64.rpm: proxysql-1.4.1-1.x86_64Marking /hwdata/duanwenjie/test/proxysql-1.4.1-1-centos67.x86_64.rpm to be installedResolving DependenciesThere are unfinished transactions remaining. You might consider running yum-complete-transaction first to finish them.--&gt; Running transaction check---&gt; Package proxysql.x86_64 0:1.4.1-1 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved======================================================================================================================================================================== Package Arch Version Repository Size========================================================================================================================================================================Installing: proxysql x86_64 1.4.1-1 /proxysql-1.4.1-1-centos67.x86_64 19 MTransaction Summary========================================================================================================================================================================Install 1 Package(s)Total size: 19 MInstalled size: 19 MDownloading Packages:Running rpm_check_debugRunning Transaction TestTransaction Test SucceededRunning TransactionWarning: RPMDB altered outside of yum.** Found 1 pre-existing rpmdb problem(s), 'yum check' output follows:mysql-community-libs-5.7.16-1.el6.x86_64 has missing requires of mysql-community-common(x86-64) &gt;= ('0', '5.7.9', None) Installing : proxysql-1.4.1-1.x86_64 1/1 Verifying : proxysql-1.4.1-1.x86_64 1/1 Installed: proxysql.x86_64 0:1.4.1-1 Complete![root@jiessie ~]# PMM Client配置123456789101112131415161718192021222324252627282930313233343536373839404142434445[root@jiessie ~]# ifconfig #查看IP地址eth0 Link encap:Ethernet HWaddr 00:16:3E:00:DC:49 inet addr:192.168.7.50 Bcast:192.168.15.255 Mask:255.255.240.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:1017660 errors:0 dropped:0 overruns:0 frame:0 TX packets:1380639 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:273791594 (261.1 MiB) TX bytes:116287303 (110.9 MiB)lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:1297762 errors:0 dropped:0 overruns:0 frame:0 TX packets:1297762 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:141606631 (135.0 MiB) TX bytes:141606631 (135.0 MiB)[root@jiessie ~]# pmm-admin config --bind-address 192.168.7.50 --client-address 139.196.95.103 --server 139.196.99.230:8080 --client-name ProxySQL_Test #添加configOK, PMM server is alive.PMM Server | 139.196.99.230:8080 Client Name | ProxySQL_TestClient Address | 139.196.95.103 (192.168.7.50)[root@jiessie ~]# pmm-admin add linux:metrics --force ProxySQL_Test #添加Linux监控OK, now monitoring this system.[root@jiessie ~]# [root@jiessie ~]# pmm-admin add proxysql:metrics --dsn "admin:admin@tcp(127.0.0.1:6032)/" proxysql6032 #添加ProxySQL监控OK, now monitoring ProxySQL metrics using DSN admin:***@tcp(localhost:6032)[root@jiessie ~]# [root@jiessie ~]# pmm-admin list #查看状态pmm-admin 1.3.0PMM Server | 139.196.99.230:8080 Client Name | ProxySQL_TestClient Address | 139.196.95.103 (192.168.7.50)Service Manager | unix-systemv----------------- -------------- ----------- -------- ------------------------------ --------SERVICE TYPE NAME LOCAL PORT RUNNING DATA SOURCE OPTIONS ----------------- -------------- ----------- -------- ------------------------------ --------linux:metrics ProxySQL_Test 42000 YES - mysql:metrics ProxySQL_Test 42002 YES root:***@tcp(127.0.0.1:3306) proxysql:metrics proxysql6032 42004 YES admin:***@tcp(127.0.0.1:6032) [root@jiessie ~]# PMM Server监控展示PMM Server监控项包括： 客户端连接数 客户端总查询 ProxySQL连接池状态 活动连接 失败连接 客户端查询路由详情 客户端延迟状态 网络接口 总结ProxySQL是一款很出色的MySQL中间件，在稳定性上、易用性、高性能等方面表现很不错。由于发布的时间较短，功能可能还不太完善，需要多做测试，特别是查询路由和规则方面需要详情的了解，测试。可重点关注。]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>proxysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[误删除ibdata1(Table doesn't exist)恢复案例]]></title>
    <url>%2F%E5%88%A0%E9%99%A4ibdata1-Table-doesn-t-exist-%E6%81%A2%E5%A4%8D%E6%A1%88%E4%BE%8B.html</url>
    <content type="text"><![CDATA[前言MySQL从5.5版本开始，InnoDB存储引擎已经成为默认存储引擎。从物理文件的结构来看，InnoDB包含ibdata1,ib_logfilexx,数据文件等其他日志文件;其中参数innodb_file_per_table用于设置是否开启独立表空间，当开启独立表空间时数据和索引会存在于ibd文件中，当未开启独立表空间时，此时使用的是共享表空间，数据和索引会存储在ibdata1文件中。如果在清理空间时不小心把ibdata1文件删除了，未开启独立表空间时，数据也会被删除，只能从备份中恢复，没有其他办法。如果开启了独立表空间，可从ibd文件中恢复数据。本文将介绍在开启独立表空间一些恢复案例，前提是无备份。 准备MySQL版本：percona server 5.6.36 案例步骤 启动MySQL实例 插入数据，中间穿插创建删除表，操持ibdata1内部tablespace的ID真实性 模拟删除ibdata1和ib_logfile文件 保存数据文件和表结构文件到其他目录 提取该实例的所有表结构 通过提取的表结构，创建实例下的所有表 通过ALTER TABLE dbName.tableName DISCARD TABLESPACE删除新创建表的ibd文件 拷贝原数据文件到对应的ibd文件目录 修改ibd文件权限 通过ALTER TABLE dbName.tableName IMPORT TABLESPACE导入拷贝的ibd文件 使用mysqldump导出数据 重建实例，导入数据 原理分析 恢复的步骤中，其中修改InnoDB表的tablespace ID最为重要。默认情况下，当开启独立表空间时，即使表数据文件和索引存在于数据目录中，但是每个表都有一个表的空间ID做标识，这部分标识同样存在于ibdata1中，是一个关联的关系。当两者不一致时，数据字典里找不到表，InnoDB引擎就无法加载数据目录下的ibd文件。恢复的目的使两者保持一致，正常加载数据。 ibdata1内部结构 ibd内部结构 图片来源于Jeremy Cole，原理写的很清楚，请参考。 ibdata1中的insert buffer/double buffer等可以不用关心，本次恢复用不到。 案例启动MySQL实例12345678910111213141516171819202122232425262728293031[root@iZuf6c08fdv8duubho2b0rZ ~]# ll /hwdata/data/percona总用量 1341500-rw-rw---- 1 mysql mysql 56 7月 4 23:50 auto.cnf-rw-rw---- 1 mysql mysql 1073741824 7月 27 15:44 ibdata1-rw-rw---- 1 mysql mysql 134217728 7月 27 15:44 ib_logfile0-rw-rw---- 1 mysql mysql 134217728 7月 27 15:44 ib_logfile1drwx------ 2 mysql mysql 4096 6月 20 13:43 mysql-rw-rw---- 1 mysql mysql 151 7月 27 15:44 mysql-bin.000001-rw-rw---- 1 mysql mysql 19 7月 27 15:44 mysql-bin.index-rw-rw---- 1 mysql mysql 26901 7月 27 15:44 mysql-error.log-rw-rw---- 1 mysql mysql 5 7月 27 15:44 mysql.pid-rw-rw---- 1 mysql mysql 1037 7月 27 15:44 mysql-slow.logdrwx------ 2 mysql mysql 4096 6月 20 13:43 performance_schema-rw-rw---- 1 mysql mysql 10485760 7月 27 15:44 undo001-rw-rw---- 1 mysql mysql 10485760 7月 27 15:44 undo002-rw-rw---- 1 mysql mysql 10485760 7月 27 15:44 undo003[root@iZuf6c08fdv8duubho2b0rZ ~]# /etc/init.d/mysqld stopShutting down MySQL (Percona Server).. [确定][root@iZuf6c08fdv8duubho2b0rZ ~]# rm -rf /hwdata/data/percona/ib* /hwdata/data/percona/undo00*[root@iZuf6c08fdv8duubho2b0rZ ~]# ll /hwdata/data/percona 总用量 60-rw-rw---- 1 mysql mysql 56 7月 4 23:50 auto.cnfdrwx------ 2 mysql mysql 4096 6月 20 13:43 mysql-rw-rw---- 1 mysql mysql 174 7月 27 15:45 mysql-bin.000001-rw-rw---- 1 mysql mysql 19 7月 27 15:44 mysql-bin.index-rw-rw---- 1 mysql mysql 31528 7月 27 15:45 mysql-error.log-rw-rw---- 1 mysql mysql 1037 7月 27 15:44 mysql-slow.logdrwx------ 2 mysql mysql 4096 6月 20 13:43 performance_schema[root@iZuf6c08fdv8duubho2b0rZ ~]# /etc/init.d/mysqld startStarting MySQL (Percona Server)............ [确定][root@iZuf6c08fdv8duubho2b0rZ ~]# 插入数据1234567891011121314151617181920212223242526272829303132333435[root@iZuf6c08fdv8duubho2b0rZ ~]# cat auto_insert_data.sh #简单的插入脚本#!/bin/bash# Name: auto_insert_data# Author: jiessie# Describe: auto insert data# Date: 20170727# basic variablesMySQL_CMD=/usr/local/mysql/bin/mysqlMySQL_User=rootMySQL_Pass=123456MySQL_Host=localhostMySQL_Db=test1# create database$MySQL_CMD -h$MySQL_Host -u$MySQL_User -p$MySQL_Pass -e "create database if not exists $MySQL_Db;"# insert datafor ((i=1;i&lt;=10;i++));do $MySQL_CMD -h$MySQL_Host -u$MySQL_User -p$MySQL_Pass $MySQL_Db -e "create table employee$i(id int(10) unsigned NOT NULL AUTO_INCREMENT,empname varchar(64) NOT NULL DEFAULT '',PRIMARY KEY (id));" for((j=1;j&lt;=1000;j++)); do $MySQL_CMD -h$MySQL_Host -u$MySQL_User -p$MySQL_Pass $MySQL_Db -e "insert into employee$i values(null,'employee$j');" done # create other table and delete $MySQL_CMD -h$MySQL_Host -u$MySQL_User -p$MySQL_Pass $MySQL_Db -e "create table tmp$i(id int);drop table tmp$i;"done[root@iZuf6c08fdv8duubho2b0rZ ~]# nohup ./auto_insert_data.sh &amp; #执行插入数据[1] 4562[root@iZuf6c08fdv8duubho2b0rZ ~]# nohup: 忽略输入并把输出追加到"nohup.out"[root@iZuf6c08fdv8duubho2b0rZ ~]# 查看数据12345678910111213141516171819202122232425262728293031323334353637383940414243[root@iZuf6c08fdv8duubho2b0rZ ~]# mysql -uroot -p123456 test1Warning: Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 10202Server version: 5.6.36-82.0-log Source distributionCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [test1] 17:04:40 &gt; show tables;+-----------------+| Tables_in_test1 |+-----------------+| employee1 || employee10 || employee2 || employee3 || employee4 || employee5 || employee6 || employee7 || employee8 || employee9 |+-----------------+10 rows in set (0.00 sec)MySQL [test1] 17:04:42 &gt; select count(*) from employee1;+----------+| count(*) |+----------+| 1000 |+----------+1 row in set (0.00 sec)MySQL [test1] 17:04:44 &gt; exitBye[root@iZuf6c08fdv8duubho2b0rZ ~]# 删除ibdata1123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566[root@iZuf6c08fdv8duubho2b0rZ ~]# cd /hwdata/data/percona[root@iZuf6c08fdv8duubho2b0rZ percona]# ll总用量 1345228-rw-rw---- 1 mysql mysql 56 7月 4 23:50 auto.cnf-rw-rw---- 1 mysql mysql 14522 7月 27 17:02 ib_buffer_pool-rw-rw---- 1 mysql mysql 1073741824 7月 27 17:03 ibdata1-rw-rw---- 1 mysql mysql 134217728 7月 27 17:03 ib_logfile0-rw-rw---- 1 mysql mysql 134217728 7月 27 17:02 ib_logfile1drwx------ 2 mysql mysql 4096 6月 20 13:43 mysql-rw-rw---- 1 mysql mysql 3325813 7月 27 17:03 mysql-bin.000001-rw-rw---- 1 mysql mysql 19 7月 27 17:02 mysql-bin.index-rw-rw---- 1 mysql mysql 496222 7月 27 17:05 mysql-error.log-rw-rw---- 1 mysql mysql 5 7月 27 17:02 mysql.pid-rw-rw---- 1 mysql mysql 2383 7月 27 17:04 mysql-slow.logdrwx------ 2 mysql mysql 4096 6月 20 13:43 performance_schemadrwx------ 2 mysql mysql 4096 7月 27 17:03 test1-rw-rw---- 1 mysql mysql 10485760 7月 27 17:03 undo001-rw-rw---- 1 mysql mysql 10485760 7月 27 17:03 undo002-rw-rw---- 1 mysql mysql 10485760 7月 27 17:03 undo003[root@iZuf6c08fdv8duubho2b0rZ percona]# rm -rf ib_buffer_pool ib_logfile* undo00* ibdata1 #删除ibdata1相关信息[root@iZuf6c08fdv8duubho2b0rZ percona]# /etc/init.d/mysqld restart #重启服务Shutting down MySQL (Percona Server).. [确定]Starting MySQL (Percona Server)............ [确定][root@iZuf6c08fdv8duubho2b0rZ percona]# mysql -uroot -p123456 test1Warning: Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 17Server version: 5.6.36-82.0-log Source distributionCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [test1] 17:08:29 &gt; select count(*) from employee1; #提示表不存在ERROR 1146 (42S02): Table 'test1.employee1' doesn't existMySQL [test1] 17:08:32 &gt; exitBye[root@iZuf6c08fdv8duubho2b0rZ percona]# ll test1/ #查看frm和ibd文件存在总用量 1404-rw-rw---- 1 mysql mysql 59 7月 27 17:03 db.opt-rw-rw---- 1 mysql mysql 8592 7月 27 17:03 employee10.frm-rw-rw---- 1 mysql mysql 131072 7月 27 17:03 employee10.ibd-rw-rw---- 1 mysql mysql 8592 7月 27 17:03 employee1.frm-rw-rw---- 1 mysql mysql 131072 7月 27 17:03 employee1.ibd-rw-rw---- 1 mysql mysql 8592 7月 27 17:03 employee2.frm-rw-rw---- 1 mysql mysql 131072 7月 27 17:03 employee2.ibd-rw-rw---- 1 mysql mysql 8592 7月 27 17:03 employee3.frm-rw-rw---- 1 mysql mysql 131072 7月 27 17:03 employee3.ibd-rw-rw---- 1 mysql mysql 8592 7月 27 17:03 employee4.frm-rw-rw---- 1 mysql mysql 131072 7月 27 17:03 employee4.ibd-rw-rw---- 1 mysql mysql 8592 7月 27 17:03 employee5.frm-rw-rw---- 1 mysql mysql 131072 7月 27 17:03 employee5.ibd-rw-rw---- 1 mysql mysql 8592 7月 27 17:03 employee6.frm-rw-rw---- 1 mysql mysql 131072 7月 27 17:03 employee6.ibd-rw-rw---- 1 mysql mysql 8592 7月 27 17:03 employee7.frm-rw-rw---- 1 mysql mysql 131072 7月 27 17:03 employee7.ibd-rw-rw---- 1 mysql mysql 8592 7月 27 17:03 employee8.frm-rw-rw---- 1 mysql mysql 131072 7月 27 17:03 employee8.ibd-rw-rw---- 1 mysql mysql 8592 7月 27 17:03 employee9.frm-rw-rw---- 1 mysql mysql 131072 7月 27 17:03 employee9.ibd[root@iZuf6c08fdv8duubho2b0rZ percona]# 保存数据文件1234[root@iZuf6c08fdv8duubho2b0rZ percona]# cp -a test1/ /usr/src/ #数据暂时保存到/usr/src目录下[root@iZuf6c08fdv8duubho2b0rZ percona]# ll /usr/src/test1 |wc -l22[root@iZuf6c08fdv8duubho2b0rZ percona]# 恢复表结构如果表结构保存的有，不需要此步骤，直接按照表结构重新创建表此步骤使用官方工具mysql-utilities通过frm文件提取表结构，地址： mysql-utilities原理 默认以再生实例启动，读取frm文件，再生实例关闭，清理临时文件 另一个模式是诊断模式，需要指定 –diagnostic 选项。byte-by-byte读取.frm文件，该模式有更多的局限性，不能校验字符集 请参考官网： 注意事项 某些引擎表在默认模式下不可读取的。如PARTITION, PERFORMANCE_SCHEMA，必需在诊断模式下可读。 要在创建语句中改变存储引擎，可使用–new-storage-engine 选项。如果有指定该选项，同时必须指定–frmdir选项，该工具生成新的.frm文件，前缀为new_，并保存在–frmdir目录下。 关掉所有信息除了CREATE 语句和警告或错误信息，使用–quiet选项。 使用–show-stats 选项统计每个.frm文件信息。 使用–user 选项指定再生的实例以哪个权限运行。 如果再生的实例超过10秒启动，需调大–start-timeout 选项参数。 mysql-utilities安装由于yum安装的是1.3的版本，1.6有bug，使用1.5.6版本，故采用源码包的形式安装，安装过程中如报错，请先安装驱动程序Connector/Python1234567891011121314151617181920212223242526272829303132[root@iZuf6c08fdv8duubho2b0rZ ~]# cd /usr/src/[root@iZuf6c08fdv8duubho2b0rZ src]# wget https://dev.mysql.com/get/Downloads/MySQLGUITools/mysql-utilities-1.5.6.tar.gz[root@iZuf6c08fdv8duubho2b0rZ src]# tar -zxf mysql-utilities-1.5.6.tar.gz [root@iZuf6c08fdv8duubho2b0rZ src]# cd mysql-utilities-1.5.6[root@iZuf6c08fdv8duubho2b0rZ mysql-utilities-1.5.6]# [root@iZuf6c08fdv8duubho2b0rZ mysql-utilities-1.5.6]# python ./setup.py build #编译,过程省略[root@iZuf6c08fdv8duubho2b0rZ mysql-utilities-1.5.6]# python ./setup.py install #安装,过程省略[root@iZuf6c08fdv8duubho2b0rZ mysql-utilities-1.5.6]# ll /usr/bin/mysql* -t #以下为生成的可执行文件-rwxr-xr-x 1 root root 11966 7月 27 11:50 /usr/bin/mysqlauditadmin-rwxr-xr-x 1 root root 12217 7月 27 11:50 /usr/bin/mysqlauditgrep-rwxr-xr-x 1 root root 16680 7月 27 11:50 /usr/bin/mysqldbcompare-rwxr-xr-x 1 root root 13918 7月 27 11:50 /usr/bin/mysqldbcopy-rwxr-xr-x 1 root root 14815 7月 27 11:50 /usr/bin/mysqldbexport-rwxr-xr-x 1 root root 13605 7月 27 11:50 /usr/bin/mysqldbimport-rwxr-xr-x 1 root root 10722 7月 27 11:50 /usr/bin/mysqldiff-rwxr-xr-x 1 root root 7385 7月 27 11:50 /usr/bin/mysqldiskusage-rwxr-xr-x 1 root root 14197 7月 27 11:50 /usr/bin/mysqlfabric-rwxr-xr-x 1 root root 15457 7月 27 11:50 /usr/bin/mysqlfailover-rwxr-xr-x 1 root root 18222 7月 27 11:50 /usr/bin/mysqlfrm-rwxr-xr-x 1 root root 6251 7月 27 11:50 /usr/bin/mysqlindexcheck-rwxr-xr-x 1 root root 5356 7月 27 11:50 /usr/bin/mysqlmetagrep-rwxr-xr-x 1 root root 5984 7月 27 11:50 /usr/bin/mysqlprocgrep-rwxr-xr-x 1 root root 7694 7月 27 11:50 /usr/bin/mysqlreplicate-rwxr-xr-x 1 root root 16669 7月 27 11:50 /usr/bin/mysqlrpladmin-rwxr-xr-x 1 root root 6407 7月 27 11:50 /usr/bin/mysqlrplcheck-rwxr-xr-x 1 root root 15542 7月 27 11:50 /usr/bin/mysqlrplms-rwxr-xr-x 1 root root 6695 7月 27 11:50 /usr/bin/mysqlrplshow-rwxr-xr-x 1 root root 11489 7月 27 11:50 /usr/bin/mysqlrplsync-rwxr-xr-x 1 root root 8642 7月 27 11:50 /usr/bin/mysqlserverclone-rwxr-xr-x 1 root root 5945 7月 27 11:50 /usr/bin/mysqlserverinfo-rwxr-xr-x 1 root root 6923 7月 27 11:50 /usr/bin/mysqluc-rwxr-xr-x 1 root root 8048 7月 27 11:50 /usr/bin/mysqluserclone 以上为生成的可执行文件中，我们只需要用到mysqlfrm，用于表结构恢复 开始提取frm表结构此用法启动了3333的实例，读取hwdata/data/percona/test1/下的所有frm文件，没有指定数据库，生成了以最后一个文件夹为DB名字的表结构123456789[root@iZuf6c08fdv8duubho2b0rZ percona]# mysqlfrm --basedir=/usr/local/mysql --port=3333 --user=mysql /hwdata/data/percona/test1/ &gt; table_frm.sql[root@iZuf6c08fdv8duubho2b0rZ percona]# mysqlfrm --help #其他使用方法请参考帮助[root@iZuf6c08fdv8duubho2b0rZ percona]# sed '/^#/d;/^$/d' table_frm.sql |head -5 #如下显示CREATE TABLE `test1`.`employee1` ( `id` int(10) unsigned NOT NULL AUTO_INCREMENT, `empname` varchar(64) NOT NULL DEFAULT '', PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=gbk[root@iZuf6c08fdv8duubho2b0rZ percona]# sed -i 's@CHARSET=gbk@CHARSET=gbk;@g' table_frm.sql #由于导出后没有以分号结尾，此命令处理添加上分号 导入frm表结构确认数据文件已经保存至其他目录123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111[root@iZuf6c08fdv8duubho2b0rZ percona]# ll /usr/src/test1/ #确认下数据文件是否保存在此总用量 1404-rw-rw---- 1 mysql mysql 59 7月 27 17:03 db.opt-rw-rw---- 1 mysql mysql 8592 7月 27 17:03 employee10.frm-rw-rw---- 1 mysql mysql 131072 7月 27 17:03 employee10.ibd-rw-rw---- 1 mysql mysql 8592 7月 27 17:03 employee1.frm-rw-rw---- 1 mysql mysql 131072 7月 27 17:03 employee1.ibd-rw-rw---- 1 mysql mysql 8592 7月 27 17:03 employee2.frm-rw-rw---- 1 mysql mysql 131072 7月 27 17:03 employee2.ibd-rw-rw---- 1 mysql mysql 8592 7月 27 17:03 employee3.frm-rw-rw---- 1 mysql mysql 131072 7月 27 17:03 employee3.ibd-rw-rw---- 1 mysql mysql 8592 7月 27 17:03 employee4.frm-rw-rw---- 1 mysql mysql 131072 7月 27 17:03 employee4.ibd-rw-rw---- 1 mysql mysql 8592 7月 27 17:03 employee5.frm-rw-rw---- 1 mysql mysql 131072 7月 27 17:03 employee5.ibd-rw-rw---- 1 mysql mysql 8592 7月 27 17:03 employee6.frm-rw-rw---- 1 mysql mysql 131072 7月 27 17:03 employee6.ibd-rw-rw---- 1 mysql mysql 8592 7月 27 17:03 employee7.frm-rw-rw---- 1 mysql mysql 131072 7月 27 17:03 employee7.ibd-rw-rw---- 1 mysql mysql 8592 7月 27 17:03 employee8.frm-rw-rw---- 1 mysql mysql 131072 7月 27 17:03 employee8.ibd-rw-rw---- 1 mysql mysql 8592 7月 27 17:03 employee9.frm-rw-rw---- 1 mysql mysql 131072 7月 27 17:03 employee9.ibd[root@iZuf6c08fdv8duubho2b0rZ percona]# ll总用量 1351956-rw-rw---- 1 mysql mysql 56 7月 4 23:50 auto.cnf-rw-r--r-- 1 root root 0 7月 27 17:08 exit-rw-rw---- 1 mysql mysql 2563 7月 27 17:08 ib_buffer_pool-rw-rw---- 1 mysql mysql 1073741824 7月 27 17:08 ibdata1-rw-rw---- 1 mysql mysql 134217728 7月 27 17:08 ib_logfile0-rw-rw---- 1 mysql mysql 134217728 7月 27 17:08 ib_logfile1drwx------ 2 mysql mysql 4096 6月 20 13:43 mysql-rw-rw---- 1 mysql mysql 3325836 7月 27 17:08 mysql-bin.000001-rw-rw---- 1 mysql mysql 191 7月 27 17:08 mysql-bin.000002-rw-rw---- 1 mysql mysql 38 7月 27 17:08 mysql-bin.index-rw-rw---- 1 mysql mysql 7003893 7月 28 10:44 mysql-error.log-rw-rw---- 1 mysql mysql 6 7月 27 17:08 mysql.pid-rw-rw---- 1 mysql mysql 387620 7月 28 10:37 mysql-slow.logdrwx------ 2 mysql mysql 4096 6月 20 13:43 performance_schema-rw-r--r-- 1 root root 0 7月 27 17:08 show-rw-r--r-- 1 root root 3064 7月 28 10:42 table_frm.sqldrwx------ 2 mysql mysql 4096 7月 28 10:27 test1-rw-rw---- 1 mysql mysql 10485760 7月 27 17:08 undo001-rw-rw---- 1 mysql mysql 10485760 7月 27 17:08 undo002 w-rw---- 1 mysql mysql 10485760 7月 27 17:08 undo003[root@iZuf6c08fdv8duubho2b0rZ percona]# rm -rf test1/*[root@iZuf6c08fdv8duubho2b0rZ percona]# /etc/init.d/mysqld restartShutting down MySQL (Percona Server).. [确定]Starting MySQL (Percona Server).. [确定][root@iZuf6c08fdv8duubho2b0rZ percona]# mysql -uroot -p123456 test1Warning: Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 4Server version: 5.6.36-82.0-log Source distributionCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [test1] 10:47:30 &gt; source /hwdata/data/percona/table_frm.sql;Query OK, 0 rows affected (0.02 sec)Query OK, 0 rows affected (0.03 sec)Query OK, 0 rows affected (0.02 sec)Query OK, 0 rows affected (0.01 sec)Query OK, 0 rows affected (0.02 sec)Query OK, 0 rows affected (0.02 sec)Query OK, 0 rows affected (0.02 sec)Query OK, 0 rows affected (0.01 sec)Query OK, 0 rows affected (0.02 sec)Query OK, 0 rows affected (0.02 sec)MySQL [test1] 10:47:31 &gt; show tables; #新表已创建+-----------------+| Tables_in_test1 |+-----------------+| employee1 || employee10 || employee2 || employee3 || employee4 || employee5 || employee6 || employee7 || employee8 || employee9 |+-----------------+10 rows in set (0.00 sec)MySQL [test1] 10:49:54 &gt; select count(*) from employee1; #目录无数据+----------+| count(*) |+----------+| 0 |+----------+1 row in set (0.00 sec)MySQL [test1] 10:50:01 &gt; 删除新创建表的ibd文件由于表比较多，通过脚本的形式去执行批量删除操作1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283[root@iZuf6c08fdv8duubho2b0rZ ~]# cat auto_delete_tablespace.sh #简单的批量删除表空间脚本#!/bin/bash# Name: auto_delete_tablespace# Author: jiessie# Describe: auto delete create table tablespace# Date: 20170727# basic variablesMySQL_CMD=/usr/local/mysql/bin/mysqlMySQL_User=rootMySQL_Pass=123456MySQL_Host=localhostMySQL_Db=test1MySQL_Table_list=/tmp/table_list.sql# generate table list and exec delete tablespace sql$MySQL_CMD -h$MySQL_Host -u$MySQL_User -p$MySQL_Pass $MySQL_Db -e "select concat('alter table $MySQL_Db.',table_name,' discard tablespace;') from information_schema.tables where table_schema='$MySQL_Db'" &gt; $MySQL_Table_listsed -i '1d' $MySQL_Table_list[root@iZuf6c08fdv8duubho2b0rZ ~]# ./auto_delete_tablespace.sh #执行获取删除表空间脚本mysql: [Warning] Using a password on the command line interface can be insecure.[root@iZuf6c08fdv8duubho2b0rZ ~]# cat /tmp/table_list.sql #查看生成的删除表空间的SQL语句alter table test1.employee1 discard tablespace;alter table test1.employee10 discard tablespace;alter table test1.employee2 discard tablespace;alter table test1.employee3 discard tablespace;alter table test1.employee4 discard tablespace;alter table test1.employee5 discard tablespace;alter table test1.employee6 discard tablespace;alter table test1.employee7 discard tablespace;alter table test1.employee8 discard tablespace;alter table test1.employee9 discard tablespace;[root@iZuf6c08fdv8duubho2b0rZ ~]# ll /hwdata/data/percona/test1/*.ibd #查询新创建表后生成的ibd文件-rw-rw---- 1 mysql mysql 98304 7月 28 10:47 /hwdata/data/percona/test1/employee10.ibd-rw-rw---- 1 mysql mysql 98304 7月 28 10:47 /hwdata/data/percona/test1/employee1.ibd-rw-rw---- 1 mysql mysql 98304 7月 28 10:47 /hwdata/data/percona/test1/employee2.ibd-rw-rw---- 1 mysql mysql 98304 7月 28 10:47 /hwdata/data/percona/test1/employee3.ibd-rw-rw---- 1 mysql mysql 98304 7月 28 10:47 /hwdata/data/percona/test1/employee4.ibd-rw-rw---- 1 mysql mysql 98304 7月 28 10:47 /hwdata/data/percona/test1/employee5.ibd-rw-rw---- 1 mysql mysql 98304 7月 28 10:47 /hwdata/data/percona/test1/employee6.ibd-rw-rw---- 1 mysql mysql 98304 7月 28 10:47 /hwdata/data/percona/test1/employee7.ibd-rw-rw---- 1 mysql mysql 98304 7月 28 10:47 /hwdata/data/percona/test1/employee8.ibd-rw-rw---- 1 mysql mysql 98304 7月 28 10:47 /hwdata/data/percona/test1/employee9.ibd[root@iZuf6c08fdv8duubho2b0rZ ~]# mysql -uroot -p123456 test1 Warning: Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 1753Server version: 5.6.36-82.0-log Source distributionCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [test1] 11:10:40 &gt; source /tmp/table_list.sql; #执行删除表空间Query OK, 0 rows affected (0.00 sec)Query OK, 0 rows affected (0.00 sec)Query OK, 0 rows affected (0.00 sec)Query OK, 0 rows affected (0.00 sec)Query OK, 0 rows affected (0.00 sec)Query OK, 0 rows affected (0.00 sec)Query OK, 0 rows affected (0.00 sec)Query OK, 0 rows affected (0.00 sec)Query OK, 0 rows affected (0.00 sec)Query OK, 0 rows affected (0.00 sec)MySQL [test1] 11:10:46 &gt; exitBye[root@iZuf6c08fdv8duubho2b0rZ ~]# ll /hwdata/data/percona/test1/*.ibd #验证表空间已经删除ls: 无法访问/hwdata/data/percona/test1/*.ibd: 没有那个文件或目录[root@iZuf6c08fdv8duubho2b0rZ ~]# 导入原数据ibd文件由于原表过多，通过脚本实现12345678910111213141516171819202122232425262728293031323334353637383940414243[root@iZuf6c08fdv8duubho2b0rZ ~]# cat auto_recovery_data.sh #恢复ibd文件脚本#!/bin/bash# Name: auto_delete_tablespace# Author: jiessie# Describe: auto delete create table tablespace# Date: 20170727# basic variablesMySQL_CMD=/usr/local/mysql/bin/mysqlMySQL_User=rootMySQL_Pass=123456MySQL_Host=localhostMySQL_Db=test1MySQL_Ibd_filepath=/usr/src/test1/MySQL_Table_list=/tmp/tables.sqlMySQL_Table_path=/hwdata/data/percona/test1# import ibd file/etc/init.d/mysqld stopcd $MySQL_Ibd_filepath &amp;&amp; cp -a * $MySQL_Table_pathchown -R mysql:mysql $MySQL_Table_path/etc/init.d/mysqld start$MySQL_CMD -h$MySQL_Host -u$MySQL_User -p$MySQL_Pass $MySQL_Db -e "select table_name from information_schema.tables where table_schema='$MySQL_Db'" &gt; $MySQL_Table_listsed -i '1d' $MySQL_Table_listcat $MySQL_Table_list | while read linedo $MySQL_CMD -h$MySQL_Host -u$MySQL_User -p$MySQL_Pass $MySQL_Db -e "alter table $MySQL_Db.$line import tablespace;"done[root@iZuf6c08fdv8duubho2b0rZ ~]# ./auto_recovery_data.sh #执行恢复脚本Shutting down MySQL (Percona Server)... [确定]Starting MySQL (Percona Server).. [确定]mysql: [Warning] Using a password on the command line interface can be insecure.mysql: [Warning] Using a password on the command line interface can be insecure.mysql: [Warning] Using a password on the command line interface can be insecure.mysql: [Warning] Using a password on the command line interface can be insecure.mysql: [Warning] Using a password on the command line interface can be insecure.mysql: [Warning] Using a password on the command line interface can be insecure.mysql: [Warning] Using a password on the command line interface can be insecure.mysql: [Warning] Using a password on the command line interface can be insecure.mysql: [Warning] Using a password on the command line interface can be insecure.mysql: [Warning] Using a password on the command line interface can be insecure.mysql: [Warning] Using a password on the command line interface can be insecure.[root@iZuf6c08fdv8duubho2b0rZ ~]# 数据验证通过count计数，比较数据是否恢复正常123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051[root@iZuf6c08fdv8duubho2b0rZ ~]# mysql -uroot -p123456 test1Warning: Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 704Server version: 5.6.36-82.0-log Source distributionCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [test1] 14:51:58 &gt; select count(*) from employee1 -&gt; union all -&gt; select count(*) from employee2 -&gt; union all -&gt; select count(*) from employee3 -&gt; union all -&gt; select count(*) from employee4 -&gt; union all -&gt; select count(*) from employee5 -&gt; union all -&gt; select count(*) from employee6 -&gt; union all -&gt; select count(*) from employee7 -&gt; union all -&gt; select count(*) from employee8 -&gt; union all -&gt; select count(*) from employee9 -&gt; union all -&gt; select count(*) from employee10;+----------+| count(*) |+----------+| 1000 || 1000 || 1000 || 1000 || 1000 || 1000 || 1000 || 1000 || 1000 || 1000 |+----------+10 rows in set (0.01 sec)MySQL [test1] 14:52:04 &gt; mysqldump导出12345[root@iZuf6c08fdv8duubho2b0rZ ~]# mysqldump -uroot -p123456 test1 --set-gtid-purged=OFF --opt -q --master-data=2 --single-transaction -R --events --triggers &gt; test1_20170728.sqlWarning: Using a password on the command line interface can be insecure.[root@iZuf6c08fdv8duubho2b0rZ ~]# ll test1_20170728.sql -rw-r--r-- 1 root root 206957 7月 28 15:16 test1_20170728.sql[root@iZuf6c08fdv8duubho2b0rZ ~]# 重启导入可把test1库删除后，重启服务，重新创建test1库，把mysqldump出的文件再次导入。 总结 像实验中案例，误删除ibdata1数据的经常会出现。 但是在最新的5.6.36版本中，不管是当前实验案例，还是直接从其他实例拷贝frm和ibd文件，在当前实例中重新创建表，再discard掉ibd文件，最后再import ibd文件，竟然没有报表空间ID不一致的错误。以前在5.5版本中，确认是会报表空间ID不一致情况，不确定是不是5.6版本改进了这方面的功能。 5.5版本版本恢复案例请参考(https://dbarobin.com/2016/04/23/ibd-recovery/)，思路不错。]]></content>
      <categories>
        <category>备份恢复</category>
      </categories>
      <tags>
        <tag>percona</tag>
        <tag>mysql</tag>
        <tag>ibdata1</tag>
        <tag>innodb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AWS EC2搭建MHA+VIP+MySQL5.7]]></title>
    <url>%2FAWS-EC2%E6%90%AD%E5%BB%BAmha-vip-MySQL5-7.html</url>
    <content type="text"><![CDATA[前言随着云服务的迅速发展，越来越多企业选择将服务托管在云服务中，在数据库领域，AWS RDS、Aliyun RDS等都是不错的选择，默认已经做了高可用，基础运维，可以为企业节省不少的运维成本。由于RDS物理数据、Root权限等其他对象对用户不开放，难免在自动化运维中有些壁垒。本文将围绕在AWS EC2结合MHA做MySQL的高可用，EC2不支持VIP，可通过绑定私有IP的方式来实现。 MHA简介MHA是由日本MySQL专家youshimaton(现就职于Facebook公司)用Perl写的一套MySQL故障切换方案，以保障数据库的高可用性。在MySQL故障切换过程中，MHA能做到在0~30s之内实现主MySQL故障转移。该软件由两部分组成：MHA Manager（管理节点）和MHA Node（数据节点）。MHA Manager可以单独部署在一台独立的机器上管理多个master-slave集群，也可以部署在一台slave节点上。MHA Node运行在每台MySQL服务器上，MHA Manager会定时探测集群中的master节点，当master出现故障时，它可以自动将最新数据的slave提升为新的master，然后将所有其他的slave重新指向新的master。整个故障转移过程对应用程序完全透明。 准备操作系统：Amazon Linuxmaster:172.31.13.126slave:172.31.9.182vip:172.31.0.200其中，使用两台机器，分别部署主库和从库，MHA默认部署在从库上，下方中的VIP通指私有IP。 系统初始化修改修改主机名主库修改主机名123[root@master ~]# cat /etc/sysconfig/networkNETWORKING=yesHOSTNAME=master 从库修改主机名123[root@slave ~]# cat /etc/sysconfig/networkNETWORKING=yesHOSTNAME=slave 修改时区Amazon Linux默认安装好后英国时间，需要在主库和从库修改时区12[root@master ~]# ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime[root@master ~]# /usr/sbin/ntpdate 0.centos.pool.ntp.org &amp;&amp; /sbin/hwclock -w &amp;&gt;/dev/null 设置防火墙主库设置，允许从库访问123[root@master ~]# /etc/init.d/iptables status|grep 172.31.9.18215 ACCEPT all -- 172.31.9.182 0.0.0.0/0 [root@master ~]# 其中，172.31.9.182是允许从库的访问规则 从库设置，允许主库访问123[root@slave ~]# /etc/init.d/iptables status|grep 172.31.13.126 15 ACCEPT all -- 172.31.13.126 0.0.0.0/0 [root@slave ~]# 其中，172.31.13.126是允许主库的访问规则 关闭SELINUX由于使用的操作系统为Amazon Linux，通过查看无selinux设置。 建立SSH无密码登录主库设置修改服务器/etc/ssh/ssh_config文件，把参数GSSAPIAuthentication修改为no。修改服务器/etc/ssh/sshd_config文件，把参数PasswordAuthentication修改为yes,参数PermitRootLogin修改为yes,重启ssh服务修改服务器/etc/hosts.allow文件，允许从库连接123456789[root@master ~]# sed '/^#/d;/^$/d' /etc/ssh/ssh_config |grep GSSAPIAuthentication GSSAPIAuthentication no[root@master ~]# sed '/^#/d;/^$/d' /etc/ssh/sshd_config |grep -E 'PasswordAuthentication|PermitRootLogin'PermitRootLogin yesPermitRootLogin forced-commands-onlyPasswordAuthentication yes[root@master ~]# /etc/init.d/sshd restart停止 sshd： [确定]正在启动 sshd： [确定] 使用命令ssh-keygen生成公钥，发送到从库，同时尝试在主库无密码形式登录从库，而且也要保证本机无密码登录本机12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364[root@master ~]# ssh-keygenGenerating public/private rsa key pair.Enter file in which to save the key (/root/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_rsa.Your public key has been saved in /root/.ssh/id_rsa.pub.The key fingerprint is:43:a3:80:f1:8c:d4:5e:8d:3c:99:e5:39:39:e3:89:9a root@masterThe key's randomart image is:+--[ RSA 2048]----+| o. . *. || . *. B..o || o.+. .X || .. = * || o S || o . || E || || |+-----------------+[root@master ~]# ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.31.9.182The authenticity of host '172.31.9.182 (172.31.9.182)' can't be established.ECDSA key fingerprint is 72:71:66:dc:6c:b0:31:e7:6c:77:4c:8d:32:69:e0:88.Are you sure you want to continue connecting (yes/no)? yesroot@172.31.9.182's password: Number of key(s) added: 1Now try logging into the machine, with: "ssh 'root@172.31.9.182'"and check to make sure that only the key(s) you wanted were added.[root@master ~]# ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.31.13.126The authenticity of host '172.31.13.126 (172.31.13.126)' can't be established.ECDSA key fingerprint is b6:ef:9f:f0:5e:fd:8f:49:ef:be:79:fb:44:ea:63:08.Are you sure you want to continue connecting (yes/no)? yesroot@172.31.13.126's password: Number of key(s) added: 1Now try logging into the machine, with: "ssh 'root@172.31.13.126'"and check to make sure that only the key(s) you wanted were added.[root@master ~]# ssh 'root@172.31.9.182'Last login: Thu Jul 20 04:51:07 2017 __| __|_ ) _| ( / Amazon Linux AMI ___|\___|___|https://aws.amazon.com/amazon-linux-ami/2017.03-release-notes/[root@slave ~]# exitlogoutConnection to 172.31.9.182 closed.[root@master ~]# ssh 'root@172.31.13.126'Last login: Thu Jul 20 04:37:13 2017 __| __|_ ) _| ( / Amazon Linux AMI ___|\___|___|https://aws.amazon.com/amazon-linux-ami/2017.03-release-notes/[root@master ~]# exitlogoutConnection to 172.31.13.126 closed. 从库设置和主库的配置相同修改服务器/etc/ssh/ssh_config文件，把参数GSSAPIAuthentication修改为no。修改服务器/etc/ssh/sshd_config文件，把参数PasswordAuthentication修改为yes,参数PermitRootLogin修改为yes,重启ssh服务修改服务器/etc/hosts.allow文件，允许从库连接123456789[root@slave ~]# sed '/^#/d;/^$/d' /etc/ssh/ssh_config |grep GSSAPIAuthentication GSSAPIAuthentication no[root@slave ~]# sed '/^#/d;/^$/d' /etc/ssh/sshd_config |grep -E 'PasswordAuthentication|PermitRootLogin'PermitRootLogin yesPermitRootLogin forced-commands-onlyPasswordAuthentication yes[root@slave ~]# /etc/init.d/sshd restart停止 sshd： [确定]正在启动 sshd： [确定] 使用命令ssh-keygen生成公钥，发送到主库，同时尝试在从库无密码形式登录主库，而且也要保证本机无密码登录本机1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586[root@slave ~]# ssh-keygenGenerating public/private rsa key pair.Enter file in which to save the key (/root/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_rsa.Your public key has been saved in /root/.ssh/id_rsa.pub.The key fingerprint is:7d:57:15:e0:20:6f:6f:45:00:76:c4:ba:66:32:fd:b3 root@slaveThe key's randomart image is:+--[ RSA 2048]----+| . ++=ooo|| + +.. .|| o.. ..|| .... .. || S o oo. || o *.. || = . || o || Eo |+-----------------+[root@slave ~]# ssh-keygenGenerating public/private rsa key pair.Enter file in which to save the key (/root/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_rsa.Your public key has been saved in /root/.ssh/id_rsa.pub.The key fingerprint is:da:ea:e3:1c:fb:4b:f5:84:da:a3:47:ea:2c:fa:3c:a6 root@slaveThe key's randomart image is:+--[ RSA 2048]----+| || || || . || S o . || o +.o || o +oo . || o=*.... || EBO**o |+-----------------+[root@slave ~]# ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.31.13.126The authenticity of host '172.31.13.126 (172.31.13.126)' can't be established.ECDSA key fingerprint is b6:ef:9f:f0:5e:fd:8f:49:ef:be:79:fb:44:ea:63:08.Are you sure you want to continue connecting (yes/no)? yesroot@172.31.13.126's password: Number of key(s) added: 1Now try logging into the machine, with: "ssh 'root@172.31.13.126'"and check to make sure that only the key(s) you wanted were added.[root@slave ~]# ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.31.9.182The authenticity of host '172.31.9.182 (172.31.9.182)' can't be established.ECDSA key fingerprint is 72:71:66:dc:6c:b0:31:e7:6c:77:4c:8d:32:69:e0:88.Are you sure you want to continue connecting (yes/no)? yesroot@172.31.9.182's password: Number of key(s) added: 1Now try logging into the machine, with: "ssh 'root@172.31.9.182'"and check to make sure that only the key(s) you wanted were added.[root@slave ~]# ssh 'root@172.31.13.126'Last login: Thu Jul 20 05:36:57 2017 from 172.31.13.126 __| __|_ ) _| ( / Amazon Linux AMI ___|\___|___|https://aws.amazon.com/amazon-linux-ami/2017.03-release-notes/[root@master ~]# exitlogoutConnection to 172.31.13.126 closed.[root@slave ~]# ssh 'root@172.31.9.182' Last login: Thu Jul 20 05:36:46 2017 from 172.31.13.126 __| __|_ ) _| ( / Amazon Linux AMI ___|\___|___|https://aws.amazon.com/amazon-linux-ami/2017.03-release-notes/[root@slave ~]# exitlogoutConnection to 172.31.9.182 closed. MySQL安装使用的是自己打包的RPM包，分别登录主库和从库，直接rpm -ivh percona-server-5.7.18-15.x86_64.rpm 即可，也可使用其他方式安装MySQL12345678910111213141516[root@master ~]# mv /home/zhouting/percona-server-5.7.18-15.x86_64.rpm /usr/src/[root@master ~]# rpm -ivh /usr/src/percona-server-5.7.18-15.x86_64.rpm Preparing... ################################# [100%]Updating / installing... 1:percona-server-5.7.18-15 ################################# [100%]error reading information on service /etc/rc.d/init.d/mysqld: No such file or directory ERROR! MySQL (Percona Server) PID file could not be found!Starting MySQL (Percona Server).. SUCCESS! mysqladmin: [Warning] Using a password on the command line interface can be insecure.Warning: Since password will be sent to server in plain text, use ssl connection to ensure password safety.mysql: [Warning] Using a password on the command line interface can be insecure.mysql: [Warning] Using a password on the command line interface can be insecure.mysql: [Warning] Using a password on the command line interface can be insecure.mysql: [Warning] Using a password on the command line interface can be insecure.mysql: [Warning] Using a password on the command line interface can be insecure.mysql: [Warning] Using a password on the command line interface can be insecure. 查看是否安装成功，分别登录主库和从库查看123456789101112131415161718192021222324[root@master ~]# mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 11Server version: 5.7.18-15-log PLD/Linux Distribution Percona Server RPMCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [(none)] 16:57:43 &gt; select version();+---------------+| version() |+---------------+| 5.7.18-15-log |+---------------+1 row in set (0.00 sec)MySQL [(none)] 16:57:47 &gt; MySQL互为主备重要参数配置主库必须包含以下参数12345678910[root@master ~]# cat /etc/my.cnf [mysqld]server-id = 1autocommit = 1auto_increment_increment = 1auto_increment_offset = 2log_bin = mysql-bingtid_mode = onenforce_gtid_consistency = 1log_slave_updates 从库必须包含以下参数，注意slave需要动态设置read_only=1，12345678910111213141516171819202122232425262728[root@slave ~]# cat /etc/my.cnf [mysqld]server-id = 2autocommit = 1auto_increment_increment = 2auto_increment_offset = 2log_bin = mysql-bingtid_mode = onenforce_gtid_consistency = 1log_slave_updatesrelay_log_purge=0[root@slave ~]# mysql -uroot -p -e "show variables like 'read_only'"Enter password: +---------------+-------+| Variable_name | Value |+---------------+-------+| read_only | OFF |+---------------+-------+[root@slave ~]# mysql -uroot -p -e "set global read_only=1"Enter password: [root@slave ~]# mysql -uroot -p -e "show variables like 'read_only'"Enter password: +---------------+-------+| Variable_name | Value |+---------------+-------+| read_only | ON |+---------------+-------+[root@slave ~]# 复制帐号建立由于MySQL版本使用的是5.7，创建用户的方法以之前有些不同 主库创建12345678910111213141516171819202122232425[root@master ~]# mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 6Server version: 5.7.18-15-log PLD/Linux Distribution Percona Server RPMCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [(none)] 17:16:52 &gt; create user 'slave01'@'172.31.9.182' identified by 'slave123456';Query OK, 0 rows affected (0.00 sec)MySQL [(none)] 17:17:21 &gt; grant replication slave,replication client on *.* to 'slave01'@'172.31.9.182';Query OK, 0 rows affected (0.01 sec)MySQL [(none)] 17:17:34 &gt; flush privileges;Query OK, 0 rows affected (0.00 sec)MySQL [(none)] 17:17:38 &gt; exit 从库创建12345678910111213141516171819202122232425[root@slave ~]# mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 6Server version: 5.7.18-15-log PLD/Linux Distribution Percona Server RPMCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [(none)] 17:19:24 &gt; create user 'slave01'@'172.31.13.126' identified by 'slave123456';Query OK, 0 rows affected (0.01 sec)MySQL [(none)] 17:19:49 &gt; grant replication slave,replication client on *.* to 'slave01'@'172.31.13.126';Query OK, 0 rows affected (0.00 sec)MySQL [(none)] 17:20:02 &gt; flush privileges;Query OK, 0 rows affected (0.00 sec)MySQL [(none)] 17:20:05 &gt; exit 复制帐号验证主库登录从库12345678910111213141516[root@master ~]# mysql -h172.31.9.182 -uslave01 -pslave123456mysql: [Warning] Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 7Server version: 5.7.18-15-log PLD/Linux Distribution Percona Server RPMCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [(none)] 17:22:15 &gt; exit 从库登录主库12345678910111213141516[root@slave ~]# mysql -h172.31.13.126 -uslave01 -pslave123456 mysql: [Warning] Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 7Server version: 5.7.18-15-log PLD/Linux Distribution Percona Server RPMCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [(none)] 17:22:57 &gt; exit 复制关系配置主库配置登录主库，设置复制关系，来源于从库的复制123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687[root@master ~]# mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 17Server version: 5.7.18-15-log PLD/Linux Distribution Percona Server RPMCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [(none)] 17:32:19 &gt; change master to master_host='172.31.9.182',master_user='slave01',master_password='slave123456',master_auto_position=1;Query OK, 0 rows affected, 2 warnings (0.04 sec)MySQL [(none)] 17:33:03 &gt; start slave;Query OK, 0 rows affected (0.03 sec)MySQL [(none)] 17:33:47 &gt; show slave status\G;*************************** 1. row *************************** Slave_IO_State: Waiting for master to send event Master_Host: 172.31.9.182 Master_User: slave01 Master_Port: 3306 Connect_Retry: 60 Master_Log_File: mysql-bin.000003 Read_Master_Log_Pos: 810 Relay_Log_File: master-relay-bin.000002 Relay_Log_Pos: 1023 Relay_Master_Log_File: mysql-bin.000003 Slave_IO_Running: Yes Slave_SQL_Running: Yes Replicate_Do_DB: Replicate_Ignore_DB: Replicate_Do_Table: Replicate_Ignore_Table: Replicate_Wild_Do_Table: Replicate_Wild_Ignore_Table: Last_Errno: 0 Last_Error: Skip_Counter: 0 Exec_Master_Log_Pos: 810 Relay_Log_Space: 1231 Until_Condition: None Until_Log_File: Until_Log_Pos: 0 Master_SSL_Allowed: No Master_SSL_CA_File: Master_SSL_CA_Path: Master_SSL_Cert: Master_SSL_Cipher: Master_SSL_Key: Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No Last_IO_Errno: 0 Last_IO_Error: Last_SQL_Errno: 0 Last_SQL_Error: Replicate_Ignore_Server_Ids: Master_Server_Id: 2 Master_UUID: a1c1d189-6b96-11e7-9825-02a13635a5ca Master_Info_File: mysql.slave_master_info SQL_Delay: 0 SQL_Remaining_Delay: NULL Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates Master_Retry_Count: 86400 Master_Bind: Last_IO_Error_Timestamp: Last_SQL_Error_Timestamp: Master_SSL_Crl: Master_SSL_Crlpath: Retrieved_Gtid_Set: a1c1d189-6b96-11e7-9825-02a13635a5ca:1-3 Executed_Gtid_Set: 9a7b78fc-6b96-11e7-9856-0232d9c5deea:1-17,a1c1d189-6b96-11e7-9825-02a13635a5ca:1-3 Auto_Position: 1 Replicate_Rewrite_DB: Channel_Name: Master_TLS_Version: 1 row in set (0.00 sec)ERROR: No query specifiedMySQL [(none)] 17:33:54 &gt; 从库配置登录从库，设置复制关系，来源于主库的复制123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687[root@slave ~]# mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 10Server version: 5.7.18-15-log PLD/Linux Distribution Percona Server RPMCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [(none)] 17:34:41 &gt; change master to master_host='172.31.13.126',master_user='slave01',master_password='slave123456',master_auto_position=1;Query OK, 0 rows affected, 2 warnings (0.03 sec)MySQL [(none)] 17:35:14 &gt; start slave;Query OK, 0 rows affected (0.03 sec)MySQL [(none)] 17:35:15 &gt; show slave status\G;*************************** 1. row *************************** Slave_IO_State: Waiting for master to send event Master_Host: 172.31.0.139 Master_User: slave01 Master_Port: 3306 Connect_Retry: 60 Master_Log_File: mysql-bin.000002 Read_Master_Log_Pos: 4455 Relay_Log_File: slave-relay-bin.000002 Relay_Log_Pos: 4059 Relay_Master_Log_File: mysql-bin.000002 Slave_IO_Running: Yes Slave_SQL_Running: Yes Replicate_Do_DB: Replicate_Ignore_DB: Replicate_Do_Table: Replicate_Ignore_Table: Replicate_Wild_Do_Table: Replicate_Wild_Ignore_Table: Last_Errno: 0 Last_Error: Skip_Counter: 0 Exec_Master_Log_Pos: 4455 Relay_Log_Space: 4266 Until_Condition: None Until_Log_File: Until_Log_Pos: 0 Master_SSL_Allowed: No Master_SSL_CA_File: Master_SSL_CA_Path: Master_SSL_Cert: Master_SSL_Cipher: Master_SSL_Key: Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No Last_IO_Errno: 0 Last_IO_Error: Last_SQL_Errno: 0 Last_SQL_Error: Replicate_Ignore_Server_Ids: Master_Server_Id: 1 Master_UUID: 9a7b78fc-6b96-11e7-9856-0232d9c5deea Master_Info_File: mysql.slave_master_info SQL_Delay: 0 SQL_Remaining_Delay: NULL Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates Master_Retry_Count: 86400 Master_Bind: Last_IO_Error_Timestamp: Last_SQL_Error_Timestamp: Master_SSL_Crl: Master_SSL_Crlpath: Retrieved_Gtid_Set: 9a7b78fc-6b96-11e7-9856-0232d9c5deea:1-17 Executed_Gtid_Set: 9a7b78fc-6b96-11e7-9856-0232d9c5deea:1-17,a1c1d189-6b96-11e7-9825-02a13635a5ca:1-3 Auto_Position: 1 Replicate_Rewrite_DB: Channel_Name: Master_TLS_Version: 1 row in set (0.00 sec)ERROR: No query specifiedMySQL [(none)] 17:35:18 &gt; 复制测试主库登录测试登录主库，插入测试数据12345678910111213141516171819202122232425262728293031323334[root@master ~]# mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 37Server version: 5.7.18-15-log PLD/Linux Distribution Percona Server RPMCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [(none)] 17:35:48 &gt; create database if not exists test11;use test11; Query OK, 1 row affected (0.00 sec)Database changedMySQL [test11] 17:35:52 &gt; create table if not exists t11(id int unsigned not null auto_increment,name varchar(20),primary key(`id`));Query OK, 0 rows affected (0.02 sec)MySQL [test11] 17:35:55 &gt; insert into t11 values(null,'master11');Query OK, 1 row affected (0.01 sec)MySQL [test11] 17:35:58 &gt; select * from t11;+----+----------+| id | name |+----+----------+| 1 | master11 |+----+----------+1 row in set (0.00 sec)MySQL [test11] 17:36:02 &gt; 登录从库，查看测试数据，此时数据已经复制过来123456789101112131415161718192021222324[root@slave ~]# mysql -uroot -p Enter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 29Server version: 5.7.18-15-log PLD/Linux Distribution Percona Server RPMCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [(none)] 17:36:25 &gt; select * from test11.t11;+----+----------+| id | name |+----+----------+| 1 | master11 |+----+----------+1 row in set (0.00 sec)MySQL [(none)] 17:36:30 &gt; 从库登录测试登录从库，插入测试数据12345678910111213141516171819202122232425262728293031323334[root@slave ~]# mysql -uroot -p Enter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 32Server version: 5.7.18-15-log PLD/Linux Distribution Percona Server RPMCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [(none)] 17:37:59 &gt; create database if not exists test11;use test11;Query OK, 1 row affected, 1 warning (0.01 sec)Database changedMySQL [test11] 17:38:03 &gt; create table if not exists t22(id int unsigned not null auto_increment,name varchar(20),primary key(`id`)); Query OK, 0 rows affected (0.03 sec)MySQL [test11] 17:38:18 &gt; insert into t22 values(null,'slave11'); Query OK, 1 row affected (0.00 sec)MySQL [test11] 17:38:30 &gt; select * from t22;+----+---------+| id | name |+----+---------+| 2 | slave11 |+----+---------+1 row in set (0.00 sec)MySQL [test11] 17:38:35 &gt; 登录主库，查看测试数据，此时数据已经复制过来123456789101112131415161718192021222324[root@master ~]# mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 38Server version: 5.7.18-15-log PLD/Linux Distribution Percona Server RPMCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [(none)] 17:39:09 &gt; select * from test11.t22;+----+---------+| id | name |+----+---------+| 2 | slave11 |+----+---------+1 row in set (0.00 sec)MySQL [(none)] 17:39:15 &gt; MHA帐号建立主库创建登录主库，创建允许主库和从库连接的MHA用户信息，再分别尝试使用MHA用户登录(省略)1234567891011121314151617181920212223242526272829[root@master ~]# mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 41Server version: 5.7.18-15-log PLD/Linux Distribution Percona Server RPMCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [(none)] 09:36:55 &gt; create user 'mha01'@'172.31.9.182' identified by 'mha123456';Query OK, 0 rows affected (0.00 sec)MySQL [(none)] 09:37:14 &gt; grant all privileges on *.* to 'mha01'@'172.31.9.182';Query OK, 0 rows affected (0.01 sec)MySQL [(none)] 09:38:02 &gt; create user 'mha01'@'172.31.13.126' identified by 'mha123456';Query OK, 0 rows affected (0.00 sec)MySQL [(none)] 09:38:14 &gt; grant all privileges on *.* to 'mha01'@'172.31.13.126';Query OK, 0 rows affected (0.01 sec)MySQL [(none)] 09:38:18 &gt; flush privileges;Query OK, 0 rows affected (0.00 sec) 从库创建登录从库，由于复制已经把在主库创建的MHA用户信息复制了过来，尝试登录即可(省略) MHA安装安装依赖分别在主库和从库上安装，执行命令：yum -y install gcc gcc-c++ make openssl-devel perl perl-DBD-MySQL perl-Config-Tiny perl-Log-Dispatch perl-Parallel-ForkManager perl-Config-IniFiles perl-Time-HiRes perl-Module-Install.noarch mailx jwhois 主库安装mha4mysql-nodeMHA管理端安装在从库上，主库上只需要mha4mysql-node即可，由于MySQL使用5.7版本，MHA也使用最新的0.57版本，采用编译安装方式。下载地址：https://mega.nz/#F!G4oRjARB!SWzFS59bUv9VrKwdAeIGVw1234567891011[root@master ~]# cd /usr/src/[root@master src]# tar -zxf mha4mysql-node-0.57.tar.gz[root@master mha4mysql-node-0.57]# perl Makefile.PL #编译过程省略[root@master mha4mysql-node-0.57]# make[root@master mha4mysql-node-0.57]# make install[root@master mha4mysql-node-0.57]# ll /usr/local/bin/ -t #查看安装，有以下文件则mha4mysql-node安装成功total 1760-r-xr-xr-x 1 root root 16381 Jul 21 09:41 apply_diff_relay_logs-r-xr-xr-x 1 root root 8261 Jul 21 09:41 purge_relay_logs-r-xr-xr-x 1 root root 7525 Jul 21 09:41 save_binary_logs-r-xr-xr-x 1 root root 4807 Jul 21 09:41 filter_mysqlbinlog 从库安装mha4mysql-manager和mha4mysql-nodeMHA管理端安装在从库，从库需要安装manager端和node端1234567891011121314151617181920212223242526272829[root@slave ~]# cd /usr/src/[root@slave src]# tar -zxf mha4mysql-manager-0.57.tar.gz [root@slave src]# cd mha4mysql-manager-0.57[root@slave mha4mysql-manager-0.57]# perl Makefile.PL #编译过程省略[root@slave mha4mysql-manager-0.57]# make[root@slave mha4mysql-manager-0.57]# make install [root@slave mha4mysql-manager-0.57]# ll /usr/local/bin/ -t #查看安装，有以下文件则mha4mysql-manager安装成功total 1756-r-xr-xr-x 1 root root 1779 Jul 21 09:48 masterha_check_ssh-r-xr-xr-x 1 root root 2517 Jul 21 09:48 masterha_manager-r-xr-xr-x 1 root root 2373 Jul 21 09:48 masterha_master_switch-r-xr-xr-x 1 root root 5171 Jul 21 09:48 masterha_secondary_check-r-xr-xr-x 1 root root 1995 Jul 21 09:48 masterha_check_repl-r-xr-xr-x 1 root root 1865 Jul 21 09:48 masterha_check_status-r-xr-xr-x 1 root root 3201 Jul 21 09:48 masterha_conf_host-r-xr-xr-x 1 root root 2165 Jul 21 09:48 masterha_master_monitor-r-xr-xr-x 1 root root 1739 Jul 21 09:48 masterha_stop[root@slave mha4mysql-manager-0.57]# cd ..[root@slave src]# tar -zxf mha4mysql-node-0.57.tar.gz [root@slave src]# cd mha4mysql-node-0.57[root@slave mha4mysql-node-0.57]# perl Makefile.PL #编译过程省略 [root@slave mha4mysql-node-0.57]# make[root@slave mha4mysql-node-0.57]# make install[root@slave mha4mysql-node-0.57]# ll /usr/local/bin/ -t #查看安装，有以下文件则mha4mysql-node安装成功total 1800-r-xr-xr-x 1 root root 16381 Jul 21 09:54 apply_diff_relay_logs-r-xr-xr-x 1 root root 8261 Jul 21 09:54 purge_relay_logs-r-xr-xr-x 1 root root 7525 Jul 21 09:54 save_binary_logs-r-xr-xr-x 1 root root 4807 Jul 21 09:54 filter_mysqlbinlog MHA目录结构说明MHAManagermhamanager工具包主要包括以下工具1234567891011[root@slave ~]# ll /usr/local/bin/总用量 84-r-xr-xr-x 1 root root 1995 7月 19 11:49 masterha_check_repl #检查MySQL复制情况-r-xr-xr-x 1 root root 1779 7月 19 11:49 masterha_check_ssh #检查MHA的SSH配置情况-r-xr-xr-x 1 root root 1865 7月 19 11:49 masterha_check_status #检测当前MHA运行状态-r-xr-xr-x 1 root root 3201 7月 19 11:49 masterha_conf_host #添加或删除配置的server信息-r-xr-xr-x 1 root root 2517 7月 19 11:49 masterha_manager #启动MHA-r-xr-xr-x 1 root root 2165 7月 19 11:49 masterha_master_monitor #检测Master是否宕机-r-xr-xr-x 1 root root 2373 7月 19 11:49 masterha_master_switch #控制故障转移，自动或者手动-r-xr-xr-x 1 root root 5172 7月 19 11:49 masterha_secondary_check #通过其他路由检测Master是否真的宕机-r-xr-xr-x 1 root root 1739 7月 19 11:49 masterha_stop #停止MHA MHANodemhanode工具包主要包括以下工具123456[root@master ~]# ll /usr/local/bin/总用量 44-r-xr-xr-x 1 root root 16371 7月 19 11:41 apply_diff_relay_logs #识别差异日志的中继日志，并将其差异事件应用于其他Slave-r-xr-xr-x 1 root root 4807 7月 19 11:41 filter_mysqlbinlog #去除不必要的Rollback事件-r-xr-xr-x 1 root root 8263 7月 19 11:41 purge_relay_logs #删除无用的Relay log，避免延时-r-xr-xr-x 1 root root 7525 7月 19 11:41 save_binary_logs #保存和复制down掉的主服务器二进制日志 自定义扩展脚本说明secondary_check_script #通过多条网络路由检测master的可用性master_ip_failover_script #自动failover时候的切换脚本，可将vip信息写入此脚本中shutdown_script #强制关闭master节点执行脚本report_script #发送报告init_conf_load_script #加载初始配置参数，如不想在配置中写明文密码master_ip_online_change_script #手动failover时候的切换脚本 MHA扩展脚本由于使用的AWS EC2，不支持VIP，可通过辅助IP的形式实现，这里使用脚本来辅助实现HA。 aws_vip_change.sh1234567891011121314151617181920212223242526272829303132333435363738394041[root@slave masterha]# cat /usr/local/bin/aws_vip_change.sh #!/bin/bashif [ $# -lt 2 ]; then echo "Illegal param count.count = $#" exit 1fi# High Availability IP variables# Other node's IP to ping and VIP to swap if other node goes downVIP_ENI_ID=eni-7a5c7722NEW_MASTER_IP=$1OLD_MASTER_IP=$2echo "NEW_MASTER_IP=$&#123;NEW_MASTER_IP&#125;,OLD_MASTER_IP=$&#123;OLD_MASTER_IP&#125;"# Specify the EC2 region that this will be running in #以下为当前用户能够执行aws cli命令的key信息REGION=cn-north-1AWSAccessKeyId=AKIAPUXGZV6F6EKCOK7QAWSSecretKey=D71xc7BLd58OPKIiPbHa7S+JknHq8wdFiUZwQUiq # Run aws-apitools-common.sh to set up default environment variables and to# leverage AWS security credentials provided by EC2 roles. /etc/profile.d/aws-apitools-common.shACCESS_USER_OPTION="--aws-access-key $&#123;AWSAccessKeyId&#125; --aws-secret-key $&#123;AWSSecretKey&#125;"ssh -t -t root@$&#123;OLD_MASTER_IP&#125; /sbin/ifconfig eth4 down #其中eth4网卡名要与下文中，新申请ENI并绑定实例ID对应的网卡名相同VIP_ATTACHMENT_ID=`ec2-describe-network-interface-attribute $&#123;VIP_ENI_ID&#125; $&#123;ACCESS_USER_OPTION&#125; --region $&#123;REGION&#125; -a | grep ATTACHMENT -m 1 | awk '&#123;print $3;&#125;'`echo "VIP_ATTACHMENT_ID=$&#123;VIP_ATTACHMENT_ID&#125;"/opt/aws/bin/ec2-detach-network-interface $&#123;VIP_ATTACHMENT_ID&#125; $&#123;ACCESS_USER_OPTION&#125; --force --region $&#123;REGION&#125;sleep 10INSTANCE_ID=`ssh root@$&#123;NEW_MASTER_IP&#125; /usr/bin/curl --silent http://169.254.169.254/latest/meta-data/instance-id` #其中169.254.169.254从本地链路中获取实例IDecho "INSTANCE_ID=$&#123;INSTANCE_ID&#125;"/opt/aws/bin/ec2-attach-network-interface $&#123;VIP_ENI_ID&#125; -i $&#123;INSTANCE_ID&#125; -d 1 $&#123;ACCESS_USER_OPTION&#125; --region $&#123;REGION&#125;[root@slave masterha]# master_ip_failover123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596[root@slave masterha]# cat /usr/local/bin/master_ip_failover #!/usr/bin/env perl# Copyright (C) 2011 DeNA Co.,Ltd.## This program is free software; you can redistribute it and/or modify# it under the terms of the GNU General Public License as published by# the Free Software Foundation; either version 2 of the License, or# (at your option) any later version.## This program is distributed in the hope that it will be useful,# but WITHOUT ANY WARRANTY; without even the implied warranty of# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the# GNU General Public License for more details.## You should have received a copy of the GNU General Public License# along with this program; if not, write to the Free Software# Foundation, Inc.,# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA## Note: This is a sample script and is not complete. Modify the script based on your environment.use strict;use warnings FATAL =&gt; 'all';use Getopt::Long;use MHA::DBHelper;my ( $command, $ssh_user, $orig_master_host, $orig_master_ip, $orig_master_port, $new_master_host, $new_master_ip, $new_master_port, $new_master_user, $new_master_password);GetOptions( 'command=s' =&gt; \$command, 'ssh_user=s' =&gt; \$ssh_user, 'orig_master_host=s' =&gt; \$orig_master_host, 'orig_master_ip=s' =&gt; \$orig_master_ip, 'orig_master_port=i' =&gt; \$orig_master_port, 'new_master_host=s' =&gt; \$new_master_host, 'new_master_ip=s' =&gt; \$new_master_ip, 'new_master_port=i' =&gt; \$new_master_port, 'new_master_user=s' =&gt; \$new_master_user, 'new_master_password=s' =&gt; \$new_master_password,);exit &amp;main();sub main &#123; if ( $command eq "stop" || $command eq "stopssh" ) &#123; # $orig_master_host, $orig_master_ip, $orig_master_port are passed. # If you manage master ip address at global catalog database, # invalidate orig_master_ip here. my $exit_code = 1; eval &#123; # updating global catalog, etc $exit_code = 0; &#125;; if ($@) &#123; warn "Got Error: $@\n"; exit $exit_code; &#125; exit $exit_code; &#125; elsif ( $command eq "start" ) &#123; my $exit_code = 10; my @vip_change_cmd = ("/usr/local/bin/aws_vip_change.sh",$new_master_host,$orig_master_host); system @vip_change_cmd; $exit_code = 0; if ($@) &#123; warn $@; # If you want to continue failover, exit 10. exit $exit_code; &#125; exit $exit_code; &#125; elsif ( $command eq "status" ) &#123; # do nothing exit 0; &#125; else &#123; &amp;usage(); exit 1; &#125;&#125;sub usage &#123; print"Usage: master_ip_failover --command=start|stop|stopssh|status --orig_master_host=host --orig_master_ip=ip --orig_master_port=port --new_master_host=host --new_master_ip=ip --new_master_port=port\n";&#125;[root@slave masterha]# send_report12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455[root@slave masterha]# cat /usr/local/bin/send_report #!/usr/bin/perl use strict;use warnings FATAL =&gt; 'all';use Mail::Sender;use Getopt::Long; #new_master_host and new_slave_hosts are set only when recovering master succeededmy ( $dead_master_host, $new_master_host, $new_slave_hosts, $subject, $body );my $smtp='smtp.126.com';my $mail_from='xxx@126.com';my $mail_user='xxx@126.com';my $mail_pass='xxx';#my $mail_to=['xxx','xxx'];my $mail_to='xxx';GetOptions( 'orig_master_host=s' =&gt; \$dead_master_host, 'new_master_host=s' =&gt; \$new_master_host, 'new_slave_hosts=s' =&gt; \$new_slave_hosts, 'subject=s' =&gt; \$subject, 'body=s' =&gt; \$body,); mailToContacts($smtp,$mail_from,$mail_user,$mail_pass,$mail_to,$subject,$body); sub mailToContacts &#123; my ( $smtp, $mail_from, $user, $passwd, $mail_to, $subject, $msg ) = @_; open my $DEBUG, "&gt; /var/log/masterha/app1/manager.log" or die "Can't open the debug file:$!\n"; my $sender = new Mail::Sender &#123; ctype =&gt; 'text/plain; charset=utf-8', encoding =&gt; 'utf-8', smtp =&gt; $smtp, from =&gt; $mail_from, auth =&gt; 'LOGIN', TLS_allowed =&gt; '0', authid =&gt; $user, authpwd =&gt; $passwd, to =&gt; $mail_to, subject =&gt; $subject, debug =&gt; $DEBUG &#125;; $sender-&gt;MailMsg( &#123; msg =&gt; $msg, debug =&gt; $DEBUG &#125; ) or print $Mail::Sender::Error; return 1;&#125; # Do whatever you want here exit 0; 主库手动绑定ENI和实例关系在主库上先申请新的ENI，注意申请时先绑定的group，以满足其他EC2能够连接些ENI。申请成功后，根据新的ENI和当前主实例的实例ID绑定，最终确认新的VIP是否绑定上。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990[root@master ~]# ifconfigeth0 Link encap:Ethernet HWaddr 02:E6:0B:68:5C:1C inet addr:172.31.13.126 Bcast:172.31.15.255 Mask:255.255.240.0 inet6 addr: fe80::e6:bff:fe68:5c1c/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:9001 Metric:1 RX packets:4063 errors:0 dropped:0 overruns:0 frame:0 TX packets:3292 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:691839 (675.6 KiB) TX bytes:390499 (381.3 KiB)lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:79 errors:0 dropped:0 overruns:0 frame:0 TX packets:79 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1 RX bytes:16736 (16.3 KiB) TX bytes:16736 (16.3 KiB)[root@master ~]# aws ec2 create-network-interface --subnet-id subnet-33859151 --private-ip-address 172.31.0.200 --groups sg-e50a1c87 sg-6b1f0809&#123; "NetworkInterface": &#123; "Status": "pending", "MacAddress": "02:12:25:83:a0:22", "SourceDestCheck": true, "VpcId": "vpc-b18195d3", "Description": "", "NetworkInterfaceId": "eni-7a5c7722", #新申请的ENI名字 "PrivateIpAddresses": [ &#123; "PrivateDnsName": "ip-172-31-0-200.cn-north-1.compute.internal", "Primary": true, "PrivateIpAddress": "172.31.0.200" #新ENI绑定的私有IP &#125; ], "RequesterManaged": false, "Groups": [ &#123; "GroupName": "For Mysql", "GroupId": "sg-e50a1c87" &#125;, &#123; "GroupName": "OnlySSH-Allow", "GroupId": "sg-6b1f0809" &#125; ], "PrivateDnsName": "ip-172-31-0-200.cn-north-1.compute.internal", "AvailabilityZone": "cn-north-1a", "RequesterId": "AIDAPVDKK6NLF6SZ553KS", "SubnetId": "subnet-33859151", "OwnerId": "981100955930", "TagSet": [], "PrivateIpAddress": "172.31.0.200" &#125;&#125;[root@master ~]# aws ec2 attach-network-interface --network-interface-id eni-7a5c7722 --instance-id i-0a259e4950b0b3cf9 --device-index 1 #将ENI和实例绑定&#123; "AttachmentId": "eni-attach-2b2c9345"&#125;&#125;[root@master ~]# ifconfig #查看ip：172.31.0.200已绑定成功，同时要在其他EC2确定此安全组是否能够满足需求，否则还需要重新调整。eth0 Link encap:Ethernet HWaddr 02:E6:0B:68:5C:1C inet addr:172.31.13.126 Bcast:172.31.15.255 Mask:255.255.240.0 inet6 addr: fe80::e6:bff:fe68:5c1c/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:9001 Metric:1 RX packets:5435 errors:0 dropped:0 overruns:0 frame:0 TX packets:4190 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:810999 (791.9 KiB) TX bytes:501986 (490.2 KiB)eth4 Link encap:Ethernet HWaddr 02:12:25:83:A0:22 inet addr:172.31.0.200 Bcast:172.31.15.255 Mask:255.255.240.0 inet6 addr: fe80::12:25ff:fe83:a022/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:9001 Metric:1 RX packets:11 errors:0 dropped:0 overruns:0 frame:0 TX packets:26 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1218 (1.1 KiB) TX bytes:2664 (2.6 KiB)lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:79 errors:0 dropped:0 overruns:0 frame:0 TX packets:79 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1 RX bytes:16736 (16.3 KiB) TX bytes:16736 (16.3 KiB)[root@master ~]# 从库配置MHAManager创建配置目录/etc/masterha/，同时创建一个项目上的配置文件，仅配置自动FailOver部分，只需要master_ip_failover和report_script脚本，其他脚本暂时不定义。1234567891011121314151617181920212223242526272829[root@slave ~]# mkdir -p /etc/masterha/[root@slave ~]# cd /etc/masterha/[root@slave masterha]# [root@slave masterha]# cat app1.cnf [server default]manager_workdir=/var/log/masterha/app1 #manager工作目录manager_log=/var/log/masterha/app1/manager.log #manager日志master_binlog_dir=/hwdata/data/percona #mysql数据目录password=mha123456 #mha连接密码user=mha01 #mha连接用户ping_interval=1 #监控主库，发送ping包的时间间隔，默认是3秒，尝试三次没有回应的时候自动进行failoverremote_workdir=/tmp #远端mysql在发生切换时binlog的保存位置repl_password=slave123456 #复制密码repl_user=slave01 #复制用户ssh_user=root #ssh用户master_ip_failover_script=/usr/local/bin/master_ip_failover #自动failover切换脚本#master_ip_online_change_script= /usr/local/bin/master_ip_online_change #手动failover切换脚本report_script=/usr/local/bin/send_report #报告发送脚本(不是必须)#shutdown_script= #故障发生后关闭主机的脚本(不是必须)secondary_check_script = masterha_secondary_check -s 172.31.13.126 -s 172.31.9.182 --user=root hostname=172.31.13.126 --master_ip=172.31.13.126 --master_port=3306 #通过第三方机器确认目标主库是否存活，这里的ip可换成其他机器，用于检测[server1]hostname=172.31.13.126 #主库地址port=3306[server2]hostname=172.31.9.182 #从库地址port=3306candidate_master=1 #候选master 测试MHAManager SSH12345678910111213[root@slave masterha]# masterha_check_ssh --conf=/etc/masterha/app1.cnf Mon Jul 24 13:58:04 2017 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.Mon Jul 24 13:58:04 2017 - [info] Reading application default configuration from /etc/masterha/app1.cnf..Mon Jul 24 13:58:04 2017 - [info] Reading server configuration from /etc/masterha/app1.cnf..Mon Jul 24 13:58:04 2017 - [info] Starting SSH connection tests..Mon Jul 24 13:58:04 2017 - [debug] Mon Jul 24 13:58:04 2017 - [debug] Connecting via SSH from root@172.31.13.126(172.31.13.126:22) to root@172.31.9.182(172.31.9.182:22)..Mon Jul 24 13:58:04 2017 - [debug] ok.Mon Jul 24 13:58:05 2017 - [debug] Mon Jul 24 13:58:04 2017 - [debug] Connecting via SSH from root@172.31.9.182(172.31.9.182:22) to root@172.31.13.126(172.31.13.126:22)..Mon Jul 24 13:58:04 2017 - [debug] ok.Mon Jul 24 13:58:05 2017 - [info] All SSH connection tests passed successfully.[root@slave masterha]# 测试MHAManager 复制123456789101112131415161718192021222324252627282930313233343536373839404142[root@slave masterha]# masterha_check_repl --conf=/etc/masterha/app1.cnf Mon Jul 24 13:58:17 2017 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.Mon Jul 24 13:58:17 2017 - [info] Reading application default configuration from /etc/masterha/app1.cnf..Mon Jul 24 13:58:17 2017 - [info] Reading server configuration from /etc/masterha/app1.cnf..Mon Jul 24 13:58:17 2017 - [info] MHA::MasterMonitor version 0.57.Mon Jul 24 13:58:18 2017 - [info] Multi-master configuration is detected. Current primary(writable) master is 172.31.13.126(172.31.13.126:3306)Mon Jul 24 13:58:18 2017 - [info] Master configurations are as below: Master 172.31.13.126(172.31.13.126:3306), replicating from 172.31.9.182(172.31.9.182:3306)Master 172.31.9.182(172.31.9.182:3306), replicating from 172.31.13.126(172.31.13.126:3306), read-onlyMon Jul 24 13:58:18 2017 - [info] GTID failover mode = 1Mon Jul 24 13:58:18 2017 - [info] Dead Servers:Mon Jul 24 13:58:18 2017 - [info] Alive Servers:Mon Jul 24 13:58:18 2017 - [info] 172.31.13.126(172.31.13.126:3306)Mon Jul 24 13:58:18 2017 - [info] 172.31.9.182(172.31.9.182:3306)Mon Jul 24 13:58:18 2017 - [info] Alive Slaves:Mon Jul 24 13:58:18 2017 - [info] 172.31.9.182(172.31.9.182:3306) Version=5.7.18-15-log (oldest major version between slaves) log-bin:enabledMon Jul 24 13:58:18 2017 - [info] GTID ONMon Jul 24 13:58:18 2017 - [info] Replicating from 172.31.13.126(172.31.13.126:3306)Mon Jul 24 13:58:18 2017 - [info] Primary candidate for the new Master (candidate_master is set)Mon Jul 24 13:58:18 2017 - [info] Current Alive Master: 172.31.13.126(172.31.13.126:3306)Mon Jul 24 13:58:18 2017 - [info] Checking slave configurations..Mon Jul 24 13:58:18 2017 - [info] Checking replication filtering settings..Mon Jul 24 13:58:18 2017 - [info] binlog_do_db= , binlog_ignore_db= Mon Jul 24 13:58:18 2017 - [info] Replication filtering check ok.Mon Jul 24 13:58:18 2017 - [info] GTID (with auto-pos) is supported. Skipping all SSH and Node package checking.Mon Jul 24 13:58:18 2017 - [info] Checking SSH publickey authentication settings on the current master..Mon Jul 24 13:58:18 2017 - [info] HealthCheck: SSH to 172.31.13.126 is reachable.Mon Jul 24 13:58:18 2017 - [info] 172.31.13.126(172.31.13.126:3306) (current master) +--172.31.9.182(172.31.9.182:3306)Mon Jul 24 13:58:18 2017 - [info] Checking replication health on 172.31.9.182..Mon Jul 24 13:58:18 2017 - [info] ok.Mon Jul 24 13:58:18 2017 - [info] Checking master_ip_failover_script status:Mon Jul 24 13:58:18 2017 - [info] /usr/local/bin/master_ip_failover --command=status --ssh_user=root --orig_master_host=172.31.13.126 --orig_master_ip=172.31.13.126 --orig_master_port=3306 Mon Jul 24 13:58:18 2017 - [info] OK.Mon Jul 24 13:58:18 2017 - [warning] shutdown_script is not defined.Mon Jul 24 13:58:18 2017 - [info] Got exit code 0 (Not master dead).MySQL Replication Health is OK.[root@slave masterha]# 启动MHAManager启动进程12345[root@slave masterha]# nohup masterha_manager --conf=/etc/masterha/app1.cnf &amp;[1] 4439[root@slave masterha]# nohup: ignoring input and appending output to ‘nohup.out’[root@slave masterha]# 查看启动日志1234567891011121314151617181920212223242526272829303132333435363738394041[root@slave ~]# cat /var/log/masterha/app1/manager.log Mon Jul 24 14:04:10 2017 - [info] MHA::MasterMonitor version 0.57. #检查版本Mon Jul 24 14:04:11 2017 - [info] Multi-master configuration is detected. Current primary(writable) master is 172.31.13.126(172.31.13.126:3306) #获取当前主节点ipMon Jul 24 14:04:11 2017 - [info] Master configurations are as below: #获取复制结构Master 172.31.13.126(172.31.13.126:3306), replicating from 172.31.9.182(172.31.9.182:3306)Master 172.31.9.182(172.31.9.182:3306), replicating from 172.31.13.126(172.31.13.126:3306), read-onlyMon Jul 24 14:04:11 2017 - [info] GTID failover mode = 1 #GTID模式Mon Jul 24 14:04:11 2017 - [info] Dead Servers:Mon Jul 24 14:04:11 2017 - [info] Alive Servers: #当前在线实例列表Mon Jul 24 14:04:11 2017 - [info] 172.31.13.126(172.31.13.126:3306)Mon Jul 24 14:04:11 2017 - [info] 172.31.9.182(172.31.9.182:3306)Mon Jul 24 14:04:11 2017 - [info] Alive Slaves: #当前在线slave列表及版本信息Mon Jul 24 14:04:11 2017 - [info] 172.31.9.182(172.31.9.182:3306) Version=5.7.18-15-log (oldest major version between slaves) log-bin:enabledMon Jul 24 14:04:11 2017 - [info] GTID ONMon Jul 24 14:04:11 2017 - [info] Replicating from 172.31.13.126(172.31.13.126:3306)Mon Jul 24 14:04:11 2017 - [info] Primary candidate for the new Master (candidate_master is set)Mon Jul 24 14:04:11 2017 - [info] Current Alive Master: 172.31.13.126(172.31.13.126:3306) #当前主实例信息Mon Jul 24 14:04:11 2017 - [info] Checking slave configurations..Mon Jul 24 14:04:11 2017 - [info] Checking replication filtering settings..Mon Jul 24 14:04:11 2017 - [info] binlog_do_db= , binlog_ignore_db= #复制过滤Mon Jul 24 14:04:11 2017 - [info] Replication filtering check ok.Mon Jul 24 14:04:11 2017 - [info] GTID (with auto-pos) is supported. Skipping all SSH and Node package checking.Mon Jul 24 14:04:11 2017 - [info] Checking SSH publickey authentication settings on the current master..Mon Jul 24 14:04:11 2017 - [info] HealthCheck: SSH to 172.31.13.126 is reachable. #ssh可用Mon Jul 24 14:04:11 2017 - [info] 172.31.13.126(172.31.13.126:3306) (current master) #再次确认当前复制架构 +--172.31.9.182(172.31.9.182:3306)Mon Jul 24 14:04:11 2017 - [info] Checking master_ip_failover_script status:Mon Jul 24 14:04:11 2017 - [info] /usr/local/bin/master_ip_failover --command=status --ssh_user=root --orig_master_host=172.31.13.126 --orig_master_ip=172.31.13.126 --orig_master_port=3306 Mon Jul 24 14:04:11 2017 - [info] OK.Mon Jul 24 14:04:11 2017 - [warning] shutdown_script is not defined. #shutdown_script脚本未定义 Mon Jul 24 14:04:11 2017 - [info] Set master ping interval 1 seconds.Mon Jul 24 14:04:11 2017 - [info] Set secondary check script: masterha_secondary_check -s 172.31.13.126 -s 172.31.9.182 --user=root hostname=172.31.13.126 --master_ip=172.31.13.126 --master_port=3306 #第三方检查登录Mon Jul 24 14:04:11 2017 - [info] Starting ping health check on 172.31.13.126(172.31.13.126:3306)..Mon Jul 24 14:04:11 2017 - [info] Ping(SELECT) succeeded, waiting until MySQL doesn't respond.. #启动成功，等待failover[root@slave masterha]# ps aux|grep masterroot 4439 0.0 0.2 287004 23636 pts/0 S 14:04 0:00 perl /usr/local/bin/masterha_manager --conf=/etc/masterha/app1.cnf #进程存在root 5008 0.0 0.0 110456 2092 pts/0 S+ 14:13 0:00 grep --color=auto master[root@slave masterha]# 模拟主库故障确认当前VIP状态在主库上执行停止服务，观察MHAManager日志，并确认VIP是否切换到从库上1234567891011121314151617181920212223242526272829[root@master ~]# ifconfig #确认当前VIP：172.31.0.200在主库上eth0 Link encap:Ethernet HWaddr 02:E6:0B:68:5C:1C inet addr:172.31.13.126 Bcast:172.31.15.255 Mask:255.255.240.0 inet6 addr: fe80::e6:bff:fe68:5c1c/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:9001 Metric:1 RX packets:9629 errors:0 dropped:0 overruns:0 frame:0 TX packets:8119 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1202679 (1.1 MiB) TX bytes:1113439 (1.0 MiB)eth4 Link encap:Ethernet HWaddr 02:12:25:83:A0:22 inet addr:172.31.0.200 Bcast:172.31.15.255 Mask:255.255.240.0 inet6 addr: fe80::12:25ff:fe83:a022/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:9001 Metric:1 RX packets:4 errors:0 dropped:0 overruns:0 frame:0 TX packets:4 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:562 (562.0 b) TX bytes:600 (600.0 b)lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:90 errors:0 dropped:0 overruns:0 frame:0 TX packets:90 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1 RX bytes:17324 (16.9 KiB) TX bytes:17324 (16.9 KiB)[root@master ~]# 确认MHAManger进程状态12345678910111213141516171819202122232425262728293031[root@slave masterha]# ps aux|grep masterroot 11333 0.4 0.2 287004 23604 pts/0 S 15:36 0:00 perl /usr/local/bin/masterha_manager --conf=/etc/masterha/app1.cnfroot 11377 0.0 0.0 110456 2252 pts/0 S+ 15:37 0:00 grep --color=auto master[root@slave masterha]# cd /var/log/masterha/app1/[root@slave app1]# lltotal 8-rw-r--r-- 1 root root 36 Jul 24 15:37 app1.master_status.health-rw-r--r-- 1 root root 2833 Jul 24 15:36 manager.log[root@slave app1]# cat manager.log |tail -2Mon Jul 24 15:36:54 2017 - [info] Starting ping health check on 172.31.13.126(172.31.13.126:3306)..Mon Jul 24 15:36:54 2017 - [info] Ping(SELECT) succeeded, waiting until MySQL doesn't respond.. #正在等待主库FailOver[root@slave app1]# ifconfig #当前从库没有存在VIP：172.31.0.200eth0 Link encap:Ethernet HWaddr 02:0E:FB:F1:E9:4E inet addr:172.31.9.182 Bcast:172.31.15.255 Mask:255.255.240.0 inet6 addr: fe80::e:fbff:fef1:e94e/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:9001 Metric:1 RX packets:16565 errors:0 dropped:0 overruns:0 frame:0 TX packets:17269 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:2084631 (1.9 MiB) TX bytes:2304176 (2.1 MiB)lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:2556 errors:0 dropped:0 overruns:0 frame:0 TX packets:2556 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1 RX bytes:605471 (591.2 KiB) TX bytes:605471 (591.2 KiB)[root@slave app1]# 停止主库服务，触发主库FailOver12345678910111213141516171819202122[root@master ~]# /etc/init.d/mysqld stop #服务停止Shutting down MySQL (Percona Server)............ SUCCESS! [root@master ~]# ifconfig #VIP已经不存在eth0 Link encap:Ethernet HWaddr 02:E6:0B:68:5C:1C inet addr:172.31.13.126 Bcast:172.31.15.255 Mask:255.255.240.0 inet6 addr: fe80::e6:bff:fe68:5c1c/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:9001 Metric:1 RX packets:10242 errors:0 dropped:0 overruns:0 frame:0 TX packets:8535 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1256340 (1.1 MiB) TX bytes:1175340 (1.1 MiB)lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:92 errors:0 dropped:0 overruns:0 frame:0 TX packets:92 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1 RX bytes:17424 (17.0 KiB) TX bytes:17424 (17.0 KiB)[root@master ~]# 观察FailOver日志登录从库，查看MHAManager日志123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250[root@slave app1]# cat manager.log Mon Jul 24 15:36:52 2017 - [info] MHA::MasterMonitor version 0.57.Mon Jul 24 15:36:54 2017 - [info] Multi-master configuration is detected. Current primary(writable) master is 172.31.13.126(172.31.13.126:3306)Mon Jul 24 15:36:54 2017 - [info] Master configurations are as below: Master 172.31.13.126(172.31.13.126:3306), replicating from 172.31.9.182(172.31.9.182:3306)Master 172.31.9.182(172.31.9.182:3306), replicating from 172.31.13.126(172.31.13.126:3306), read-onlyMon Jul 24 15:36:54 2017 - [info] GTID failover mode = 1Mon Jul 24 15:36:54 2017 - [info] Dead Servers:Mon Jul 24 15:36:54 2017 - [info] Alive Servers:Mon Jul 24 15:36:54 2017 - [info] 172.31.13.126(172.31.13.126:3306)Mon Jul 24 15:36:54 2017 - [info] 172.31.9.182(172.31.9.182:3306)Mon Jul 24 15:36:54 2017 - [info] Alive Slaves:Mon Jul 24 15:36:54 2017 - [info] 172.31.9.182(172.31.9.182:3306) Version=5.7.18-15-log (oldest major version between slaves) log-bin:enabledMon Jul 24 15:36:54 2017 - [info] GTID ONMon Jul 24 15:36:54 2017 - [info] Replicating from 172.31.13.126(172.31.13.126:3306)Mon Jul 24 15:36:54 2017 - [info] Primary candidate for the new Master (candidate_master is set)Mon Jul 24 15:36:54 2017 - [info] Current Alive Master: 172.31.13.126(172.31.13.126:3306)Mon Jul 24 15:36:54 2017 - [info] Checking slave configurations..Mon Jul 24 15:36:54 2017 - [info] Checking replication filtering settings..Mon Jul 24 15:36:54 2017 - [info] binlog_do_db= , binlog_ignore_db= Mon Jul 24 15:36:54 2017 - [info] Replication filtering check ok.Mon Jul 24 15:36:54 2017 - [info] GTID (with auto-pos) is supported. Skipping all SSH and Node package checking.Mon Jul 24 15:36:54 2017 - [info] Checking SSH publickey authentication settings on the current master..Mon Jul 24 15:36:54 2017 - [info] HealthCheck: SSH to 172.31.13.126 is reachable.Mon Jul 24 15:36:54 2017 - [info] 172.31.13.126(172.31.13.126:3306) (current master) +--172.31.9.182(172.31.9.182:3306)Mon Jul 24 15:36:54 2017 - [info] Checking master_ip_failover_script status:Mon Jul 24 15:36:54 2017 - [info] /usr/local/bin/master_ip_failover --command=status --ssh_user=root --orig_master_host=172.31.13.126 --orig_master_ip=172.31.13.126 --orig_master_port=3306 Mon Jul 24 15:36:54 2017 - [info] OK.Mon Jul 24 15:36:54 2017 - [warning] shutdown_script is not defined.Mon Jul 24 15:36:54 2017 - [info] Set master ping interval 1 seconds.Mon Jul 24 15:36:54 2017 - [info] Set secondary check script: masterha_secondary_check -s 172.31.13.126 -s 172.31.9.182 --user=root hostname=172.31.13.126 --master_ip=172.31.13.126 --master_port=3306Mon Jul 24 15:36:54 2017 - [info] Starting ping health check on 172.31.13.126(172.31.13.126:3306)..Mon Jul 24 15:36:54 2017 - [info] Ping(SELECT) succeeded, waiting until MySQL doesn't respond.. #等待主库FailOverMon Jul 24 15:40:01 2017 - [warning] Got error on MySQL select ping: 2006 (MySQL server has gone away)Mon Jul 24 15:40:01 2017 - [info] Executing secondary network check script: masterha_secondary_check -s 172.31.13.126 -s 172.31.9.182 --user=root hostname=172.31.13.126 --master_ip=172.31.13.126 --master_port=3306 --user=root --master_host=172.31.13.126 --master_ip=172.31.13.126 --master_port=3306 --master_user=mha01 --master_password=mha123456 --ping_type=SELECTMon Jul 24 15:40:01 2017 - [info] Executing SSH check script: exit 0Mon Jul 24 15:40:01 2017 - [info] HealthCheck: SSH to 172.31.13.126 is reachable.Monitoring server 172.31.13.126 is reachable, Master is not reachable from 172.31.13.126. OK.Monitoring server 172.31.9.182 is reachable, Master is not reachable from 172.31.9.182. OK.Mon Jul 24 15:40:01 2017 - [info] Master is not reachable from all other monitoring servers. Failover should start.Mon Jul 24 15:40:02 2017 - [warning] Got error on MySQL connect: 2003 (Can't connect to MySQL server on '172.31.13.126' (111))Mon Jul 24 15:40:02 2017 - [warning] Connection failed 2 time(s)..Mon Jul 24 15:40:03 2017 - [warning] Got error on MySQL connect: 2003 (Can't connect to MySQL server on '172.31.13.126' (111))Mon Jul 24 15:40:03 2017 - [warning] Connection failed 3 time(s)..Mon Jul 24 15:40:04 2017 - [warning] Got error on MySQL connect: 2003 (Can't connect to MySQL server on '172.31.13.126' (111))Mon Jul 24 15:40:04 2017 - [warning] Connection failed 4 time(s)..Mon Jul 24 15:40:04 2017 - [warning] Master is not reachable from health checker!Mon Jul 24 15:40:04 2017 - [warning] Master 172.31.13.126(172.31.13.126:3306) is not reachable!Mon Jul 24 15:40:04 2017 - [warning] SSH is reachable.Mon Jul 24 15:40:04 2017 - [info] Connecting to a master server failed. Reading configuration file /etc/masterha_default.cnf and /etc/masterha/app1.cnf again, and trying to connect to all servers to check server status..Mon Jul 24 15:40:04 2017 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.Mon Jul 24 15:40:04 2017 - [info] Reading application default configuration from /etc/masterha/app1.cnf..Mon Jul 24 15:40:04 2017 - [info] Reading server configuration from /etc/masterha/app1.cnf..Mon Jul 24 15:40:05 2017 - [info] GTID failover mode = 1Mon Jul 24 15:40:05 2017 - [info] Dead Servers:Mon Jul 24 15:40:05 2017 - [info] 172.31.13.126(172.31.13.126:3306)Mon Jul 24 15:40:05 2017 - [info] Alive Servers:Mon Jul 24 15:40:05 2017 - [info] 172.31.9.182(172.31.9.182:3306)Mon Jul 24 15:40:05 2017 - [info] Alive Slaves:Mon Jul 24 15:40:05 2017 - [info] 172.31.9.182(172.31.9.182:3306) Version=5.7.18-15-log (oldest major version between slaves) log-bin:enabledMon Jul 24 15:40:05 2017 - [info] GTID ONMon Jul 24 15:40:05 2017 - [info] Replicating from 172.31.13.126(172.31.13.126:3306)Mon Jul 24 15:40:05 2017 - [info] Primary candidate for the new Master (candidate_master is set)Mon Jul 24 15:40:05 2017 - [info] Checking slave configurations..Mon Jul 24 15:40:05 2017 - [info] Checking replication filtering settings..Mon Jul 24 15:40:05 2017 - [info] Replication filtering check ok.Mon Jul 24 15:40:05 2017 - [info] Master is down!Mon Jul 24 15:40:05 2017 - [info] Terminating monitoring script.Mon Jul 24 15:40:05 2017 - [info] Got exit code 20 (Master dead).Mon Jul 24 15:40:05 2017 - [info] MHA::MasterFailover version 0.57.Mon Jul 24 15:40:05 2017 - [info] Starting master failover.Mon Jul 24 15:40:05 2017 - [info] Mon Jul 24 15:40:05 2017 - [info] * Phase 1: Configuration Check Phase..Mon Jul 24 15:40:05 2017 - [info] Mon Jul 24 15:40:07 2017 - [info] GTID failover mode = 1Mon Jul 24 15:40:07 2017 - [info] Dead Servers:Mon Jul 24 15:40:07 2017 - [info] 172.31.13.126(172.31.13.126:3306)Mon Jul 24 15:40:07 2017 - [info] Checking master reachability via MySQL(double check)...Mon Jul 24 15:40:07 2017 - [info] ok.Mon Jul 24 15:40:07 2017 - [info] Alive Servers:Mon Jul 24 15:40:07 2017 - [info] 172.31.9.182(172.31.9.182:3306)Mon Jul 24 15:40:07 2017 - [info] Alive Slaves:Mon Jul 24 15:40:07 2017 - [info] 172.31.9.182(172.31.9.182:3306) Version=5.7.18-15-log (oldest major version between slaves) log-bin:enabledMon Jul 24 15:40:07 2017 - [info] GTID ONMon Jul 24 15:40:07 2017 - [info] Replicating from 172.31.13.126(172.31.13.126:3306)Mon Jul 24 15:40:07 2017 - [info] Primary candidate for the new Master (candidate_master is set)Mon Jul 24 15:40:07 2017 - [info] Starting GTID based failover.Mon Jul 24 15:40:07 2017 - [info] Mon Jul 24 15:40:07 2017 - [info] ** Phase 1: Configuration Check Phase completed.Mon Jul 24 15:40:07 2017 - [info] Mon Jul 24 15:40:07 2017 - [info] * Phase 2: Dead Master Shutdown Phase..Mon Jul 24 15:40:07 2017 - [info] Mon Jul 24 15:40:07 2017 - [info] Forcing shutdown so that applications never connect to the current master..Mon Jul 24 15:40:07 2017 - [info] Executing master IP deactivation script:Mon Jul 24 15:40:07 2017 - [info] /usr/local/bin/master_ip_failover --orig_master_host=172.31.13.126 --orig_master_ip=172.31.13.126 --orig_master_port=3306 --command=stopssh --ssh_user=root Mon Jul 24 15:40:07 2017 - [info] done.Mon Jul 24 15:40:07 2017 - [warning] shutdown_script is not set. Skipping explicit shutting down of the dead master.Mon Jul 24 15:40:07 2017 - [info] * Phase 2: Dead Master Shutdown Phase completed.Mon Jul 24 15:40:07 2017 - [info] Mon Jul 24 15:40:07 2017 - [info] * Phase 3: Master Recovery Phase..Mon Jul 24 15:40:07 2017 - [info] Mon Jul 24 15:40:07 2017 - [info] * Phase 3.1: Getting Latest Slaves Phase..Mon Jul 24 15:40:07 2017 - [info] Mon Jul 24 15:40:07 2017 - [info] The latest binary log file/position on all slaves is mysql-bin.000011:234Mon Jul 24 15:40:07 2017 - [info] Latest slaves (Slaves that received relay log files to the latest):Mon Jul 24 15:40:07 2017 - [info] 172.31.9.182(172.31.9.182:3306) Version=5.7.18-15-log (oldest major version between slaves) log-bin:enabledMon Jul 24 15:40:07 2017 - [info] GTID ONMon Jul 24 15:40:07 2017 - [info] Replicating from 172.31.13.126(172.31.13.126:3306)Mon Jul 24 15:40:07 2017 - [info] Primary candidate for the new Master (candidate_master is set)Mon Jul 24 15:40:07 2017 - [info] The oldest binary log file/position on all slaves is mysql-bin.000011:234Mon Jul 24 15:40:07 2017 - [info] Oldest slaves:Mon Jul 24 15:40:07 2017 - [info] 172.31.9.182(172.31.9.182:3306) Version=5.7.18-15-log (oldest major version between slaves) log-bin:enabledMon Jul 24 15:40:07 2017 - [info] GTID ONMon Jul 24 15:40:07 2017 - [info] Replicating from 172.31.13.126(172.31.13.126:3306)Mon Jul 24 15:40:07 2017 - [info] Primary candidate for the new Master (candidate_master is set)Mon Jul 24 15:40:07 2017 - [info] Mon Jul 24 15:40:07 2017 - [info] * Phase 3.3: Determining New Master Phase..Mon Jul 24 15:40:07 2017 - [info] Mon Jul 24 15:40:07 2017 - [info] Searching new master from slaves..Mon Jul 24 15:40:07 2017 - [info] Candidate masters from the configuration file:Mon Jul 24 15:40:07 2017 - [info] 172.31.9.182(172.31.9.182:3306) Version=5.7.18-15-log (oldest major version between slaves) log-bin:enabledMon Jul 24 15:40:07 2017 - [info] GTID ONMon Jul 24 15:40:07 2017 - [info] Replicating from 172.31.13.126(172.31.13.126:3306)Mon Jul 24 15:40:07 2017 - [info] Primary candidate for the new Master (candidate_master is set)Mon Jul 24 15:40:07 2017 - [info] Non-candidate masters:Mon Jul 24 15:40:07 2017 - [info] Searching from candidate_master slaves which have received the latest relay log events..Mon Jul 24 15:40:07 2017 - [info] New master is 172.31.9.182(172.31.9.182:3306)Mon Jul 24 15:40:07 2017 - [info] Starting master failover..Mon Jul 24 15:40:07 2017 - [info] From:172.31.13.126(172.31.13.126:3306) (current master) +--172.31.9.182(172.31.9.182:3306)To:172.31.9.182(172.31.9.182:3306) (new master)Mon Jul 24 15:40:07 2017 - [info] Mon Jul 24 15:40:07 2017 - [info] * Phase 3.3: New Master Recovery Phase..Mon Jul 24 15:40:07 2017 - [info] Mon Jul 24 15:40:07 2017 - [info] Waiting all logs to be applied.. Mon Jul 24 15:40:07 2017 - [info] done.Mon Jul 24 15:40:07 2017 - [info] Getting new master's binlog name and position..Mon Jul 24 15:40:07 2017 - [info] mysql-bin.000008:234Mon Jul 24 15:40:07 2017 - [info] All other slaves should start replication from here. Statement should be: CHANGE MASTER TO MASTER_HOST='172.31.9.182', MASTER_PORT=3306, MASTER_AUTO_POSITION=1, MASTER_USER='slave01', MASTER_PASSWORD='xxx';Mon Jul 24 15:40:07 2017 - [info] Master Recovery succeeded. File:Pos:Exec_Gtid_Set: mysql-bin.000008, 234, 28a037e5-6d0f-11e7-b43a-02e60b685c1c:1-15,39292a50-6d0f-11e7-999e-020efbf1e94e:1-4Mon Jul 24 15:40:07 2017 - [info] Executing master IP activate script:Mon Jul 24 15:40:07 2017 - [info] /usr/local/bin/master_ip_failover --command=start --ssh_user=root --orig_master_host=172.31.13.126 --orig_master_ip=172.31.13.126 --orig_master_port=3306 --new_master_host=172.31.9.182 --new_master_ip=172.31.9.182 --new_master_port=3306 --new_master_user='mha01' --new_master_password=xxxNEW_MASTER_IP=172.31.9.182,OLD_MASTER_IP=172.31.13.126Connection to 172.31.13.126 closed.VIP_ATTACHMENT_ID=eni-attach-5b219e35ATTACHMENT eni-attach-5b219e35 detachingINSTANCE_ID=i-03135a59c242e9badeni-attach-0f209f61Mon Jul 24 15:40:22 2017 - [info] OK.Mon Jul 24 15:40:22 2017 - [info] Setting read_only=0 on 172.31.9.182(172.31.9.182:3306)..Mon Jul 24 15:40:22 2017 - [info] ok.Mon Jul 24 15:40:22 2017 - [info] ** Finished master recovery successfully.Mon Jul 24 15:40:22 2017 - [info] * Phase 3: Master Recovery Phase completed.Mon Jul 24 15:40:22 2017 - [info] Mon Jul 24 15:40:22 2017 - [info] * Phase 4: Slaves Recovery Phase..Mon Jul 24 15:40:22 2017 - [info] Mon Jul 24 15:40:22 2017 - [info] Mon Jul 24 15:40:22 2017 - [info] * Phase 4.1: Starting Slaves in parallel..Mon Jul 24 15:40:22 2017 - [info] Mon Jul 24 15:40:22 2017 - [info] All new slave servers recovered successfully.Mon Jul 24 15:40:22 2017 - [info] Mon Jul 24 15:40:22 2017 - [info] * Phase 5: New master cleanup phase..Mon Jul 24 15:40:22 2017 - [info] Mon Jul 24 15:40:22 2017 - [info] Resetting slave info on the new master..Mon Jul 24 15:40:22 2017 - [info] 172.31.9.182: Resetting slave info succeeded.Mon Jul 24 15:40:22 2017 - [info] Master failover to 172.31.9.182(172.31.9.182:3306) completed successfully.Mon Jul 24 15:40:22 2017 - [info] ----- Failover Report -----app1: MySQL Master failover 172.31.13.126(172.31.13.126:3306) to 172.31.9.182(172.31.9.182:3306) succeededMaster 172.31.13.126(172.31.13.126:3306) is down!Check MHA Manager logs at slave:/var/log/masterha/app1/manager.log for details.Started automated(non-interactive) failover.Invalidated master IP address on 172.31.13.126(172.31.13.126:3306)Selected 172.31.9.182(172.31.9.182:3306) as a new master.172.31.9.182(172.31.9.182:3306): OK: Applying all logs succeeded.172.31.9.182(172.31.9.182:3306): OK: Activated master IP address.172.31.9.182(172.31.9.182:3306): Resetting slave info succeeded.Master failover to 172.31.9.182(172.31.9.182:3306) completed successfully.Mon Jul 24 16:27:13 2017 - [info] Sending mail..defined(@array) is deprecated at /usr/share/perl5/vendor_perl/Mail/Sender.pm line 318. (Maybe you should just omit the defined()?)defined(@array) is deprecated at /usr/share/perl5/vendor_perl/Mail/Sender.pm line 2693. (Maybe you should just omit the defined()?)Option new_slave_hosts requires an argumentUnknown option: conftail: manager.log: file truncated&gt;&gt; 220 126.com Anti-spam GT for Coremail System (126com[20140526])&lt;&lt; EHLO slave&gt;&gt; 250-mail&gt;&gt; 250-PIPELINING&gt;&gt; 250-AUTH LOGIN PLAIN&gt;&gt; 250-AUTH=LOGIN PLAIN&gt;&gt; 250-coremail 1Uxr2xKj7kG0xkI17xGrU7I0s8FY2U3Uj8Cz28x1UUUUU7Ic2I0Y2Ur0Vl_3UCa0xDrUUUUj&gt;&gt; 250-STARTTLS&gt;&gt; 250 8BITMIME&lt;&lt; AUTH LOGIN&gt;&gt; 334 dXNlcm5hbWU6&lt;&lt; ZHdqNTY4NTg4QDEyNi5jb20=&gt;&gt; 334 UGFzc3dvcmQ6&lt;&lt; RHdqMTIzNDU=&gt;&gt; 235 Authentication successful&lt;&lt; MAIL FROM:&lt;dwj568588@126.com&gt;&gt;&gt; 250 Mail OK&lt;&lt; RCPT TO:&lt;duanwenjie@huan.tv&gt;&gt;&gt; 250 Mail OK&lt;&lt; DATA&gt;&gt; 354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;&lt;&lt; To: duanwenjie@huan.tv&lt;&lt; From: dwj568588@126.com&lt;&lt; Subject: app1: MySQL Master failover 172.31.13.126(172.31.13.126:3306) to 172.31.9.182(172.31.9.182:3306) succeeded&lt;&lt; Date: Mon, 24 Jul 2017 16:27:15 +0800&lt;&lt; X-Mailer: Perl script "send_report"&lt;&lt; using Mail::Sender 0.8.16 by Jenda Krynicky, Czechlands&lt;&lt; running on slave ()&lt;&lt; under account "zhouting"&lt;&lt; Message-ID: &lt;20170724_082715_056339.dwj568588@126.com&gt;&lt;&lt; MIME-Version: 1.0&lt;&lt; Content-type: text/plain; charset=utf-8&lt;&lt; &lt;&lt; Master 172.31.13.126(172.31.13.126:3306) is down!&lt;&lt; &lt;&lt; Check MHA Manager logs at slave:/var/log/masterha/app1/manager.log for details.&lt;&lt; &lt;&lt; Started automated(non-interactive) failover.&lt;&lt; Invalidated master IP address on 172.31.13.126(172.31.13.126:3306)&lt;&lt; Selected 172.31.9.182(172.31.9.182:3306) as a new master.&lt;&lt; 172.31.9.182(172.31.9.182:3306): OK: Applying all logs succeeded.&lt;&lt; 172.31.9.182(172.31.9.182:3306): OK: Activated master IP address.&lt;&lt; 172.31.9.182(172.31.9.182:3306): Resetting slave info succeeded.&lt;&lt; Master failover to 172.31.9.182(172.31.9.182:3306) completed successfully.&lt;&lt; &lt;&lt; .&gt;&gt; 250 Mail OK queued as smtp1,C8mowAAH7yZhr3VZFR+JCA--.54250S2 1500884834&lt;&lt; QUIT&gt;&gt; 221 Bye[root@slave app1]# 日志过程解析12345678910111213141516171819202122232425262728293031启动前的准备工作检查数据库服务器状态,获取相关参数设置检查GTID、candidate_master、过滤DB是否设置测试ssh连接是否成功测试MHA node是否可用创建MHA日志目录开始检查slave的差异日志应用权限确定当前的复制架构调试master_ip_failover_script调试shutdown_script设置二次检查的主机masterha_secondary_checkMHA启动完毕,进入监测状态监测master服务器挂了通过定义的二次监测,确认master是否挂了确认master挂了,开始进入failover流程再试尝试连接master和master的ssh通过MHA配置文件,监测其他slave的状态再次监测slave的配置是否有变化,是否符合failover条件正式开始failover再次对slave配置做检查对原Master做master_ip_failover_script和shutdown_script的操作开始差异日志的恢复，获取slave最后得到的binlog位置获取原master的binlog日志确定新的master在new master上应用差异的binlog日志获取new master的binlog位置。执行master_ip_failover_script,调用aws_vip_change.sh，执行VIP漂移开始恢复其他slave的差异日志差异日志应用完成以后,切换所有slave到new master。failover操作完成,生成failover报告最后发送邮件通知 确认FailOver状态1234567891011121314151617181920212223242526272829[root@slave app1]# ifconfig #vip已经添加到从库上eth0 Link encap:Ethernet HWaddr 02:0E:FB:F1:E9:4E inet addr:172.31.9.182 Bcast:172.31.15.255 Mask:255.255.240.0 inet6 addr: fe80::e:fbff:fef1:e94e/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:9001 Metric:1 RX packets:17060 errors:0 dropped:0 overruns:0 frame:0 TX packets:17883 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:2142676 (2.0 MiB) TX bytes:2390595 (2.2 MiB)eth1 Link encap:Ethernet HWaddr 02:12:25:83:A0:22 inet addr:172.31.0.200 Bcast:172.31.15.255 Mask:255.255.240.0 inet6 addr: fe80::12:25ff:fe83:a022/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:9001 Metric:1 RX packets:8 errors:0 dropped:0 overruns:0 frame:0 TX packets:18 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:798 (798.0 b) TX bytes:1828 (1.7 KiB)lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:2789 errors:0 dropped:0 overruns:0 frame:0 TX packets:2789 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1 RX bytes:669913 (654.2 KiB) TX bytes:669913 (654.2 KiB)[root@slave app1]# 查看邮件发送状态登录邮件，查看是否收到报警邮件。 手动FailOverMHA的手动FailOver不在本文范围，详情理论可参考官方文档。 参数列表 参数名 是否必须 参数使用域 默认值 例子 hostname Yes Local Only - hostname=master,hostname=slave ip No Local Only gethostbyname($hostname) ip=192.168.1.100 port No Local/App/Global 3306 port=3306 ssh_host No Local Only same as hostname ssh_host=master,ssh_host=slave ssh_ip No Local Only gethostbyname($ssh_host) ssh_ip=192.168.1.101 ssh_port No Local/App/Global 22 ssh_port=22 ssh_connection_timeout No Local/App/Global 5 ssh_connection_timeout=20 ssh_options No Local/App/Global “”(empty string) ssh_options=”-i /root/.ssh/id_dsa2” candidate_master No Local Only 0 candidate_master=1 no_master No Local Only 0 no_master=1 ignore_fail No Local Only 0 ignore_fail=1 skip_init_ssh_check No Local Only 0 skip_init_ssh_check=1 skip_reset_slave No Local/App/Global 0 skip_reset_slave=1 user No Local/App/Global root user=root password No Local/App/Global “”(empty string) password=rootpass repl_user No Local/App/Global Master_User value from SHOW SLAVE STATUS repl_user=repl repl_password No Local/App/Global (current replication password) repl_user=replpass disable_log_bin No Local/App/Global 0 disable_log_bin=1 master_pid_file No Local/App/Global “”(empty string) master_pid_file=/var/lib/mysql/master1.pid ssh_user No Local/App/Global current OS user ssh_user=root remote_workdir No Local/App/Global /var/tmp remote_workdir=/var/log/masterha/app1 master_binlog_dir No Local/App/Global /var/lib/mysql master_binlog_dir=/data/mysql1 log_level No App/Global info log_level=debug manager_workdir No App /var/tmp manager_workdir=/var/log/masterha client_bindir No App - client_bindir=/usr/mysql/bin client_libdir No App - client_libdir=/usr/lib/mysql manager_log No App STDERR manager_log=/var/log/masterha/app1.log check_repl_delay No App/Global 1 check_repl_delay=0 check_repl_filter No App/Global 1 check_repl_filter=0 latest_priority No App/Global 1 latest_priority=0 multi_tier_slave No App/Global 0 multi_tier_slave=1 ping_interval No App/Global 3 ping_interval=5 ping_type No App/Global SELECT ping_type=CONNECT secondary_check_script No App/Global null secondary_check_script= masterha_secondary_check -s remote_dc1 -s remote_dc2 master_ip_failover_script No App/Global null master_ip_failover_script=/usr/local/bin/master_ip_failover master_ip_online_change_script No App/Global null master_ip_online_change_script= /usr/local/bin/master_ip_online_change shutdown_script No App/Global null shutdown_script= /usr/local/bin/master_shutdown report_script No App/Global null report_script= /usr/local/bin/report 详情解释123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192Local Scope: 针对每个server级别有效的选项.local scope级别的参数需要在配置文件的 [server_xxx]段落配置 App Scope: 这个参数可以理解为针对一组master-slave集群. 这些参数需要在 [server_default]段落配置 Global Scope: 这个参数针对所有的MHA管理的实例. global scope级别的配置只有你在使用一个manager server管理多组master-slave时使用 hostname： 目标Mysql服务器的主机名或者IP地址,这个参数是强制的,并且必须配置在[server_xxx]段落ip： 目标Mysql服务器的IP地址,默认是通过$hostname变量获取.MHA manager和MHA Node 内部使用这个IP地址链接到Mysql和SSH.通常你不需要配置这个参数,因为它可以通过$hostname解析获得port： mysql服务器使用的端口号,默认是3306,MHA链接到mysql通过IP地址和端口ssh_host： 从0.53版本开始支持此参数,此参数的主要目的在于你mysql复制使用的IP地址由于安全策略,不能直接连接, 所以需要通过其他IP和端口连接到mysql server或者ssh,默认这个参数和hostname的值相同ssh_ip： 从0.53版本开始支持此参数,连接到目标mysql server的ssh ip地址,默认从$ssh_host获取ssh_port： 从0.53版本开始支持此参数,连接到目标mysql server的ssh端口,默认是22ssh_connection_timeout：从0.54开始支持此参数,默认是5秒,添加此参数的原因是以前我们在程序里面写死了ssh_options： 从0.53开始支持此参数,可以添加SSH命令行的参数candidate_master： 你的slave的硬件配置或者用途可能不太一样,你想要提升更加可靠的slave作为新的master如果设置candidate_master的值为1,那么这个server会优先成为master,只要它满足成为master的条件(binlog开启的,没有严重的复制延时等)所以意味着配置了candiate_master=1的服务器并不是肯定可以成为new master,但是这个参数能够帮助提高优先级如果你在多个服务器上设置了candidate_master=1,那么在配置文件中[server_xxx]的配置顺序,会成为第二排序规则,排在上面的越优先no_master： no_master=1是默认值,意思是这个server从来不会成为新的master,这个参数用来标记某些从来不用成为new master的服务器ignore_fail： 默认是0,当某个slave的ssh或者mysql当掉或者复制失败的时候,MHA manager不启动failover。但是有些环境下,你想要在某个特定的slave失败的时候继续执行failover,把么就设置这个ignore_fail=1,即时这个slave失败的时候,failover依然继续执行skip_init_ssh_check：启动的时候跳过ssh连接测试skip_reset_slave： 从0.56版本开始支持此参数,在master执行failover以后跳过执行reset slave all(译者感觉应该是方便MM复制的后期恢复)user： mysql管理员命令,建议赋予all privileges权限password： 上面mysql user的密码repl_user： mysql复制使用的用户名,需要执行change master to命令和show slave status命令等.一般赋予replication slave,replication client权限repl_password： 上面用户对应的密码.默认情况下,使用的是当前复制的密码disable_log_bin： 当这个参数设置以后,当应用差异日志到slave的时候,slave不会生成binlog. Internally MHA passes --disable-log-bin to mysqlbinlog commandmaster_pid_file： 设置master的pid文件位置,当你的服务器上运行了多个mysql的时候使用ssh_user： MHA manager和MHA node通过这个用户连接到mysql server的OS上,在对应的OS上执行相关命令和拷贝差异日志等等这个用户必须有读取mysql binary/relay 相关日志文件的权限,还有日志目录的写入权限.(remote_workdir目录)这个用户必须可以直接连接到服务器上,不用任何交互的操作.通过使用ssh public key作为认证方式.默认使用的用户是manager当前的用户remote_workdir： 每个MHA node上,MHA工作使用的目录的绝对路径.如果目录不存在,MHA会自动创建,如果权限不够,那么MHA node会意外终止,注意MHA manager和MHA node都不会检查这个目录的磁盘可用空间,你需要自己保证有足够的可用空间.默认的remote_workdir是'/var/tmp'master_binlog_dir： master mysql保存binlog的目录的绝对路径.如果参数的主要目的是在master mysql宕机以后,为了通过ssh拷贝需要的binlog event这个参数是需要的,因为当mysql宕机以后,没法自动获取binary log的目录默认情况下,master_binlog_dir的值是"/var/lib/mysql/,/var/log/mysql/",/var/lib/mysql/是大部分mysql发布版本的默认mysql输出目录,你可以设置多个目录,使用逗号分隔.比如(/data1,/data2,/data3)log_level： MHA manager 的日志级别,默认是info级别,在大多数环境下没有问题.可用的级别有.debug/info/warning/errormanager_workdir： MHA manager使用的工作目录,如果没有设置,默认使用/var/tmpclient_bindir： 如果mysql命令行工具没有安装在默认目录,可以使用这个选项配置client_libdir： 如果mysql lib没有安装在默认目录,可以使用这个选项配置manager_log： MHA manager日志文件的绝对目录和文件名,如果没有设置,那么将直接打印到标准输出和标准错误输出当执行交互式的failover时,MHA manager将会忽略manager_log设置,直接答应到标准输出和标准错误输出check_repl_delay： 默认情况下如果一个slave比master延时了100M的relay logs.MHA不会选择这个slave作为新的master.因为他需要更多的时间来recovery设置check_repl_delay=0,MHA在选择new master时将会忽略复制的延时.这个参数通常和candidate_master=1同时使用check_repl_filter： 默认情况下如果master和slave有不同的binary log/replication 过滤规则的话,MHA打印错误,不进行start monitoring或者failover这么做的目的是为了避免recover的时候出现意外的错误,例如"Table not exists",如果你100%确定你不同的过滤规则不会导致recover时候报错,那么你可以设置check_repl_fiter=0,这样的话,MHA在应用差异日志的时候将不会在检查过滤规则.使用这个参数的时候需要非常小心latest_priority： 默认情况下,接收到了最新的binlog的slave优先被选为new master,如果你想要控制优先级的顺序,比如(host2&gt;host3&gt;host4),那么设置latest_priority=0会有所帮助multi_tier_slave： MHA manager从0.5.2开始支持多主复制.默认情况下,它不支持三层以上的复制架构.例如,host2是host1的slave,host3是host2的slave,默认不允许把这个三个主机写到同一个配置文件中因为这是一个三层的复制架构,并且MHA会因此报错,并停止工作.如果设置了multi_tier_slave,MHA manager不会因为多层架构而终止,它会忽略三层及以上的主机,例如master(host1)挂掉以后,host2会被选为新的master,host3将继续从host2复制ping_interval： 这个参数声明MHA manager pings(通过执行sql来ping) master的间隔.当连续三次ping失败,MHA manager认为这个Mysql master宕机,从宕机到检测到宕机,最大的消耗时间是这个参数的四倍,这个参数默认值是3(3秒),如果MHA manager因为权限问题多次连接失败,这不认为master deadping_type：从MHA manager 0.53开始支持这个参数, MHA建立一个长连接到master,然后通过执行"SELECT 1" (ping_type=SELECT)来判断master是否可用但是在一些环境下,最好使用短连接的方式,因为这样的方式更严格,也能检测TCP连接级别的失败.设置ping_type=CONNECT可以实现.从0.56版本开始,支持ping_type=INSERTsecondary_check_script：通常情况,强力推荐使用两个或者多个路由检测Mysql master默认MHA通过一个路由检测:从manager到master.这是不推荐的MHA manager可以通过secondary_check_script参数调用一个内部脚本来实现两个或者多个路由的检测.下面是一个配置实例secondary_check_script = masterha_secondary_check -s remote_host1 -s remote_host2MHA manager包含masterha_secondary_check 脚本.内置的masterha_secondary_check脚本可以满足大多是环境,当然你也可以调用你自定义的脚本.在上面的实例中,MHA manager通过这两个路由检测master主机Manager-(A)-&gt;remote_host1-(B)-&gt;master_hostManager-(A)-&gt;remote_host2-(B)-&gt;master_host如果两条路径中,A都是成功的,B都是不成功的,那么masterha_secondary_check将会退出,返回状态0.MHA manager将会认为Mysql master宕机,开始failover如果A失败,那么masterha_secondary_check将退出,返回状态2,MHA manager网络出现问题,不会开始failover如果B检测成功,masterha_secondary_check退出并返回状态3,MHA manager明确的知道mysql master是活跃的,不开始failover通常来讲,remote_host1和remote_host2必须和 MHA manager及Mysql server不在同一个网段,这样才更有意义MHA调用secondary_check_script参数对应的脚本会自动传递以下参数(所以你不需要在配置文件中设置),masterha_secondary_check适用于大多数环境,如果你需要其他的功能可以自己写一个网络检查的脚本.--user=(SSH username of the remote hosts. ssh_user parameter value will be passed)--master_host=(master's hostname)--master_ip=(master's ip address)--master_port=(master's port number)注意:masterha_secondary_check脚本依赖于IO::Socket::INET perl包,在perl v5.6.0中默认包含,masterha_secondary_check脚本会通过ssh连接到所有的remote servers.所以SSH public key 认证需要设置.另外masterha_secondary_check脚本尝试使用TCP连接从remote server到mysql master.这意味着服务器设置的max_connections参数对此连接无效,并且如果TCP连接成功,Aborted_connects状态将会加1master_ip_failover_script：常见的HA环境下,大多是情况会给master分配一个虚拟IP,如果master宕机,HA软件像一个Pacemaker将虚拟IP转移到备用的master上另外一种常见的方法就是创建一个全局目录数据库,包含所有应用和writer/reader ip地址.例如&#123;app_master1,192.168.0.1&#125;,&#123;app_master2,192.168.0.2&#125;...,代替使用虚拟IP,这种情况,你需要在master宕机的时候更新目录数据库两种方法都有好的或者不好的地方,MHA不强制要求使用哪一种,但是提供了master_ip_failover_script参数来完成此目的换句话说,你需要写一个脚本来调整应用服务连接到新的master,然后定义master_ip_failover_script的参数,下面是一个实例master_ip_failover_script= /usr/local/bin/master_ip_failover你可以从(MHA Manager package)/samples/scripts/master_ip_failover找到一个简单的脚本.这个脚本在manager的tarball和GitHUb branch中才包含MHA manager会调用master_ip_failover_script三次,第一次,在开始master monitor之前调用(目的是检查脚本是否可用),第二次是在调用shutdown_script脚本前调用,第三次是在new master应用完所有的差异日志以后,MHA manager会传递给脚本如下参数.(你不用在配置文件中指明这些参数)Checking phase--command=status--ssh_user=(current master's ssh username)--orig_master_host=(current master's hostname)--orig_master_ip=(current master's ip address)--orig_master_port=(current master's port number)Current master shutdown phase--command=stop or stopssh--ssh_user=(dead master's ssh username, if reachable via ssh)--orig_master_host=(current(dead) master's hostname)--orig_master_ip=(current(dead) master's ip address)--orig_master_port=(current(dead) master's port number)New master activation phase--command=start--ssh_user=(new master's ssh username)--orig_master_host=(dead master's hostname)--orig_master_ip=(dead master's ip address)--orig_master_port=(dead master's port number)--new_master_host=(new master's hostname)--new_master_ip=(new master's ip address)--new_master_port(new master's port number)--new_master_user=(new master's user)--new_master_password(new master's password)如果你使用共享虚拟IP的方法,你不需要在master shutdown阶段做任何事情,只要通过shutdown_script脚本关掉原来master的电源,在激活new master阶段,你需要分配虚拟IP给new master.如果你使用目录数据库的方法,你需要在宕机的master shutdown阶段删除或者更新失效master的记录在new master生效阶段需要插入或者更新new master的记录.另外你可以做任何事情来保证应用程序可以成功的写入new master比如SET GLOBAL read_only=0，创建有写入权限的数据库用户等等MHA manager检查脚本的退出状态,如果脚本退出状态是0或者10,MHA manager继续操作,如果脚本退出状态不是0或者10,MHA manager将会意外终止,并不继续continue failover.默认这个参数是空的master_ip_online_change_script：这是几个简单版本的master_ip_failover_script参数,但是master failover命令并不调用它.master online change命令会调用它.(masterha_master_switch --master_state=alive),传递以下参数Current master write freezing phase--command=stop or stopssh--orig_master_host=(current master's hostname)--orig_master_ip=(current master's ip address)--orig_master_port=(current master's port number)--orig_master_user=(current master's user)--orig_master_password=(current master's password)--orig_master_ssh_user=(from 0.56, current master's ssh user)--orig_master_is_new_slave=(from 0.56, notifying whether the orig master will be new slave or not)New master granting write phase--command=start--orig_master_host=(orig master's hostname)--orig_master_ip=(orig master's ip address)--orig_master_port=(orig master's port number)--new_master_host=(new master's hostname)--new_master_ip=(new master's ip address)--new_master_port(new master's port number)--new_master_user=(new master's user)--new_master_password=(new master's password)--new_master_ssh_user=(from 0.56, new master's ssh user)MHA在当前的master write freezing阶段后执行FLUASH TABLES WITH READ LOCK, 在new mastergranting write阶段你可以执行一些类似master_ip_failover_script的操作比如创建一个有写入权限的用户,执行SET GLOBAL read_only=0,更新目录数据库等.如果你的脚本退出返回状态不是1或者10,那么MHA manager将会意外终止,停止master switch这个参数默认为空,所以MHA manager不做任何调用你可以从(MHA Manager package)/samples/scripts/master_ip_online_change找到一个简单的脚本这个脚本在manager的tarball和GitHUb branch中才包含shutdown_script：你可能需要强制关闭master服务器,避免他再次提供服务,这对于避免脑裂很重要.下面是一个实例shutdown_script= /usr/local/bin/power_manager你可以从(MHA Manager package)/samples/scripts/power_manager找到一个简单的脚本.这个脚本在manager的tarball和GitHUb branch中才包含在调用shutdown_script脚本之前,MHA manager内部会通过ssh尝试连接到mysql master,如果ssh可以连接(意思就是OS是存活的,但是Mysqld没有运行),MHAmanager就会传递下面的参数--command=stopssh (这个意思就是指停止服务,不会关机)--ssh_user=(ssh username so that you can connect to the master)--host=(master's hostname)--ip=(master's ip address)--port=(master's port number)--pid_file=(master's pid file)如果master主机的ssh不能连接,那么MHA会使用如下参数--command=stop (这个会通过fence设备关掉电源)--host=(master's hostname)--ip=(master's ip address)这个脚本的大概功能如下,如果--command=stopssh被调用,脚本会使用killall -9 杀掉目标服务器上所有的mysqld_safe服务如果--pid_file被设置,脚本尝试kill指定的进程.如果脚本执行成功,那么脚本会退出返回状态10.如果退出状态为10,MHA manager后面会通过ssh连接到master,获取需要的binary log.如果脚本通过ssh连接到服务器失败,那么就会传递--command=stop参数,这个参数尝试关闭机器的电源,关闭电源依赖于H/W.HP(ILO),DELL(DRAC).如果power off成功,脚本会然会状态0,其他情况会返回状态1.当返回状态是0的时候MHA manager 开始failover.如果返回状态不是0或者10,那么MHA manager会意外终止.这个参数默认是空,所以MHA manager不会调用任何脚本另外,MHA manager在启动monitoring之前调用shutdown_script.这时候会传递下面的参数.目的是检测脚本是否可用,如果发现错误,你可以提前知道--command=status--host=(master's hostname)--ip=(master's ip address)report_script：你希望当failover发生以后可以发送一个报告(例如email),report_script可以达到这个目的,MHA manager传递下面的参数--orig_master_host=(dead master's hostname)--new_master_host=(new master's hostname)--new_slave_hosts=(new slaves' hostnames, delimited by commas)--subject=(mail subject)--body=(body)默认这个参数是空的,所以MHA manager不调用任何脚本，你可以从(MHA Manager package)/samples/scripts/send_report找到一个简单的脚本这个脚本在manager的tarball和GitHUb branch中才包含init_conf_load_script：这个脚本可以在你不想在配置文件中写明文密码的时候使用.你可以覆盖全局配置参数.实例脚本如下#!/usr/bin/perlprint "password=$ROOT_PASS\n";print "repl_password=$REPL_PASS\n";这个参数默认为空,所以MHA manager默认不调用任何脚本 参考MySQL Master High Available 理论篇： https://yq.aliyun.com/articles/58004?spm=5176.100239.blogcont57855.9.jUuCt0 结束语云服务器上MySQL高可用，也可通过云负载均衡产品+MySQL复制来实现，但在数据安全性上，没有MHA+VIP+MySQL相对安全。]]></content>
      <categories>
        <category>集群高可用</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>VIP</tag>
        <tag>MHA</tag>
        <tag>AWS</tag>
        <tag>EC2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MongoDB从MMAPv1在线迁移至WiredTiger引擎]]></title>
    <url>%2FMongoDB%E4%BB%8EMMAPv1%E5%9C%A8%E7%BA%BF%E8%BF%81%E7%A7%BB%E8%87%B3WiredTiger%E5%BC%95%E6%93%8E.html</url>
    <content type="text"><![CDATA[前言MongoDB是一个开源的文档型数据库，介于关系数据库和非关系数据库之间，是非关系数据库中功能最丰富，最像关系数据库的。它支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是它支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。 存储引擎存储引擎是MongoDB的核心组件，负责管理数据如何存储在硬盘和内存上。从MongoDB3.0版本开始，MongoDB支持多数据存储引擎，如WiredTiger，MMAPv1，In-Memory等，每个存储引擎都有自己的优势，percona版本还支持RocksDB引擎。从3.2版本开始，WiredTiger成为了默认的存储引擎，在之前版本MMAPv1为默认存储引擎。这两种引擎在目前的使用量占比最大。 WiredTiger、MMAPv1对比性能MMAPv1引擎使用的是表级锁，当单个集合上有并发操作时，吞吐会受限制。Wiredtiger引擎使用文档级锁，通过多版本并发控制，带来并发和吞吐的提高。 压缩MMAPv1引擎要求数据在内存和在磁盘的形式一致(map磁盘内存映射)，因此不支持压缩和加密。Wiredtiger引擎支持对所有集合和索引进行Block压缩和前缀压缩，可以大大节省存储空间。但是消耗额外的CPU执行数据压缩和解压缩的操作。 存储方式MMAPv1引擎在数据库级别配置文件，数据库中的所有集合和索引都混合存储在数据库文件中，即使删掉了某个集合或者索引，占用的磁盘空间也很难回收。WiredTiger引擎在集合和索引级别分配文件，数据库中的所有集合和索引都存储在单独的文件中，集合或者索引删除后，磁盘空间方便回收。 内存使用MMAPv1引擎消耗内存大，无有效控制手段。WiredTiger引擎支持内存使用空间配置，可通过storage.wiredTiger.engineConfig.cacheSizeGB参控制MongoDB所能使用的最大内存。 准备操作系统：centos 6.5 x86_64 迁移变更存储引擎的常见方式有2种，分别是停机和不停机。本文只介绍在不停机的情况下从MMAPv1引擎副本集迁移至WiredTiger引擎副本集。 安装注意： 迁移的成功取决于oplog的大小是否能够满足从库完全初始化数据。 首先安装好mongodb，并依次启动，实例以3.4.4版本为例，端口分别是27017/28017/29017，部署在一台服务器，具体安装步骤省略。12345678910111213141516171819[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb1/bin/mongod -f /hwdata/data/mongodb1/conf/mongodb.conf note: noprealloc may hurt performance in many applicationsabout to fork child process, waiting until server is ready for connections.forked process: 14873child process started successfully, parent exiting[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb2/bin/mongod -f /hwdata/data/mongodb2/conf/mongodb.conf note: noprealloc may hurt performance in many applicationsabout to fork child process, waiting until server is ready for connections.forked process: 14894child process started successfully, parent exiting[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb3/bin/mongod -f /hwdata/data/mongodb3/conf/mongodb.conf note: noprealloc may hurt performance in many applicationsabout to fork child process, waiting until server is ready for connections.forked process: 14919child process started successfully, parent exiting[root@iZuf6c08fdv8duubho2b0rZ ~]# netstat -tunlp|grep mongotcp 0 0 0.0.0.0:27017 0.0.0.0:* LISTEN 14873/mongod tcp 0 0 0.0.0.0:28017 0.0.0.0:* LISTEN 14894/mongod tcp 0 0 0.0.0.0:29017 0.0.0.0:* LISTEN 14919/mongod 配置文件详情的配置文件如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445[root@iZuf6c08fdv8duubho2b0rZ ~]# cat /hwdata/data/mongodb1/conf/mongodb.conf dbpath=/hwdata/data/mongodb1/datalogpath=/hwdata/data/mongodb1/logs/mongodb.logpidfilepath=/hwdata/data/mongodb1/logs/mongodb.piddirectoryperdb=truelogappend=trueport=27017fork=truenoprealloc=truemaxConns=10000profile=1slowms=100journal=truereplSet=jiessiestorageEngine=mmapv1[root@iZuf6c08fdv8duubho2b0rZ ~]# cat /hwdata/data/mongodb2/conf/mongodb.conf dbpath=/hwdata/data/mongodb2/datalogpath=/hwdata/data/mongodb2/logs/mongodb.logpidfilepath=/hwdata/data/mongodb2/logs/mongodb.piddirectoryperdb=truelogappend=trueport=28017fork=truenoprealloc=truemaxConns=10000profile=1slowms=100journal=truereplSet=jiessiestorageEngine=mmapv1[root@iZuf6c08fdv8duubho2b0rZ ~]# cat /hwdata/data/mongodb3/conf/mongodb.conf dbpath=/hwdata/data/mongodb3/datalogpath=/hwdata/data/mongodb3/logs/mongodb.logpidfilepath=/hwdata/data/mongodb3/logs/mongodb.piddirectoryperdb=truelogappend=trueport=29017fork=truenoprealloc=truemaxConns=10000profile=1slowms=100journal=truereplSet=jiessiestorageEngine=mmapv1 搭建副本集登录其中一个实例，这里以27017为例子，搭建副本123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb1/bin/mongoMongoDB shell version v3.4.4connecting to: mongodb://127.0.0.1:27017MongoDB server version: 3.4.4&gt; cfg = &#123;_id: "jiessie", members: [&#123;_id: 0, host: "192.168.7.50:27017",priority:3&#125;,&#123;_id: 1, host: "192.168.7.50:28017",priority:2&#125;,&#123;_id: 2, host: "192.168.7.50:29017",priority:3&#125;]&#125;;&#123; "_id" : "jiessie", "members" : [ &#123; "_id" : 0, "host" : "192.168.7.50:27017", "priority" : 3 &#125;, &#123; "_id" : 1, "host" : "192.168.7.50:28017", "priority" : 2 &#125;, &#123; "_id" : 2, "host" : "192.168.7.50:29017", "priority" : 3 &#125; ]&#125;&gt; rs.initiate(cfg);&#123; "ok" : 1 &#125;jiessie:SECONDARY&gt; jiessie:PRIMARY&gt; rs.status();&#123; "set" : "jiessie", "date" : ISODate("2017-07-21T09:47:24.215Z"), "myState" : 1, "term" : NumberLong(1), "heartbeatIntervalMillis" : NumberLong(2000), "optimes" : &#123; "lastCommittedOpTime" : &#123; "ts" : Timestamp(1500630436, 1), "t" : NumberLong(1) &#125;, "appliedOpTime" : &#123; "ts" : Timestamp(1500630436, 1), "t" : NumberLong(1) &#125;, "durableOpTime" : &#123; "ts" : Timestamp(1500630436, 1), "t" : NumberLong(1) &#125; &#125;, "members" : [ &#123; "_id" : 0, "name" : "192.168.7.50:27017", "health" : 1, "state" : 1, "stateStr" : "PRIMARY", "uptime" : 1056, "optime" : &#123; "ts" : Timestamp(1500630436, 1), "t" : NumberLong(1) &#125;, "optimeDate" : ISODate("2017-07-21T09:47:16Z"), "infoMessage" : "could not find member to sync from", "electionTime" : Timestamp(1500630354, 1), "electionDate" : ISODate("2017-07-21T09:45:54Z"), "configVersion" : 1, "self" : true &#125;, &#123; "_id" : 1, "name" : "192.168.7.50:28017", "health" : 1, "state" : 2, "stateStr" : "SECONDARY", "uptime" : 99, "optime" : &#123; "ts" : Timestamp(1500630436, 1), "t" : NumberLong(1) &#125;, "optimeDurable" : &#123; "ts" : Timestamp(1500630436, 1), "t" : NumberLong(1) &#125;, "optimeDate" : ISODate("2017-07-21T09:47:16Z"), "optimeDurableDate" : ISODate("2017-07-21T09:47:16Z"), "lastHeartbeat" : ISODate("2017-07-21T09:47:22.597Z"), "lastHeartbeatRecv" : ISODate("2017-07-21T09:47:23.554Z"), "pingMs" : NumberLong(0), "syncingTo" : "192.168.7.50:29017", "configVersion" : 1 &#125;, &#123; "_id" : 2, "name" : "192.168.7.50:29017", "health" : 1, "state" : 2, "stateStr" : "SECONDARY", "uptime" : 99, "optime" : &#123; "ts" : Timestamp(1500630436, 1), "t" : NumberLong(1) &#125;, "optimeDurable" : &#123; "ts" : Timestamp(1500630436, 1), "t" : NumberLong(1) &#125;, "optimeDate" : ISODate("2017-07-21T09:47:16Z"), "optimeDurableDate" : ISODate("2017-07-21T09:47:16Z"), "lastHeartbeat" : ISODate("2017-07-21T09:47:22.597Z"), "lastHeartbeatRecv" : ISODate("2017-07-21T09:47:23.527Z"), "pingMs" : NumberLong(0), "syncingTo" : "192.168.7.50:27017", "configVersion" : 1 &#125; ], "ok" : 1&#125;jiessie:PRIMARY&gt; 查看存储引擎登录其中一个实例，这里以27017为例子，当出现mmapv1时，代表当前使用存储引擎为mmapv1123[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb1/bin/mongo --eval "db.serverStatus()"|grep name "name" : "mmapv1",[root@iZuf6c08fdv8duubho2b0rZ ~]# 测试副本集登录27017的主库，插入数据，在其他节点上查看123456789101112131415161718192021222324252627282930313233343536[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb1/bin/mongo MongoDB shell version v3.4.4connecting to: mongodb://127.0.0.1:27017MongoDB server version: 3.4.4jiessie:PRIMARY&gt; show dbs;admin 0.078GBlocal 12.072GBjiessie:PRIMARY&gt; use test11;switched to db test11jiessie:PRIMARY&gt; db.tmp11.insert(&#123;"id":"11"&#125;);WriteResult(&#123; "nInserted" : 1 &#125;)jiessie:PRIMARY&gt; db.tmp11.find();&#123; "_id" : ObjectId("5971ced335d36a3364107ac7"), "id" : "11" &#125;jiessie:PRIMARY&gt; exitbye[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb1/bin/mongo localhost:28017MongoDB shell version v3.4.4connecting to: localhost:28017MongoDB server version: 3.4.4jiessie:SECONDARY&gt; rs.slaveOk();jiessie:SECONDARY&gt; use test11;switched to db test11jiessie:SECONDARY&gt; db.tmp11.find();&#123; "_id" : ObjectId("5971ced335d36a3364107ac7"), "id" : "11" &#125;jiessie:SECONDARY&gt; exitbye[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb1/bin/mongo localhost:29017MongoDB shell version v3.4.4connecting to: localhost:29017MongoDB server version: 3.4.4jiessie:SECONDARY&gt; use test11;switched to db test11jiessie:SECONDARY&gt; rs.slaveOk();jiessie:SECONDARY&gt; db.tmp11.find();&#123; "_id" : ObjectId("5971ced335d36a3364107ac7"), "id" : "11" &#125;jiessie:SECONDARY&gt; exit 迁移步骤12345将29017的从节点设置为隐藏节点，不再成为主，对应用不可见把29017的节点存储引擎从MMAPv1设置为WiredTiger，删除原MMAPv1数据，重新加入副本集中当29017的WiredTiger节点从主节点初始化数据成功后，依次将其他从节点的引擎修改为的WiredTiger当所有从节点的引擎修改为WiredTiger后，在主节点执行rs.stepdown()将主降级，触发在其他从节点选举新主再将原主库按照以上的方式将引擎从MMAPv1设置为WiredTiger 详情请参考：http://docs.mongoing.com/manual-zh/tutorial/configure-a-hidden-replica-set-member.html 开始迁移副本集的架构下，所有节点之间都是同步的，即使存储引擎不同也不受影响。实验中的副本集端口分别为27017/28017/29017，其中主节点为27017，28017和29017为从节点。27017权重为3，28017权重为2，29017权重为1。 步骤最后一项，将原主库引擎从MMAPv1设置为WiredTiger，可在原主库上执行rs.stepDown()触发选举，也可提高其他从节点的权重，需要高于主节点。 29017实例设置节点隐藏123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb1/bin/mongoMongoDB shell version v3.4.4connecting to: mongodb://127.0.0.1:27017MongoDB server version: 3.4.4jiessie:PRIMARY&gt; cfg = rs.config();&#123; "_id" : "jiessie", "version" : 1, "protocolVersion" : NumberLong(1), "members" : [ &#123; "_id" : 0, "host" : "192.168.7.50:27017", "arbiterOnly" : false, "buildIndexes" : true, "hidden" : false, "priority" : 3, "tags" : &#123; &#125;, "slaveDelay" : NumberLong(0), "votes" : 1 &#125;, &#123; "_id" : 1, "host" : "192.168.7.50:28017", "arbiterOnly" : false, "buildIndexes" : true, "hidden" : false, "priority" : 2, "tags" : &#123; &#125;, "slaveDelay" : NumberLong(0), "votes" : 1 &#125;, &#123; "_id" : 2, "host" : "192.168.7.50:29017", "arbiterOnly" : false, "buildIndexes" : true, "hidden" : false, "priority" : 3, "tags" : &#123; &#125;, "slaveDelay" : NumberLong(0), "votes" : 1 &#125; ], "settings" : &#123; "chainingAllowed" : true, "heartbeatIntervalMillis" : 2000, "heartbeatTimeoutSecs" : 10, "electionTimeoutMillis" : 10000, "catchUpTimeoutMillis" : 2000, "getLastErrorModes" : &#123; &#125;, "getLastErrorDefaults" : &#123; "w" : 1, "wtimeout" : 0 &#125;, "replicaSetId" : ObjectId("5971cd4835e57f0331e944c8") &#125;&#125;jiessie:PRIMARY&gt; cfg.members[2].host;192.168.7.50:29017jiessie:PRIMARY&gt; cfg.members[2].priority = 0; #优化级降为0，不再参数选主0jiessie:PRIMARY&gt; cfg.members[2].hidden = true; #对应用隐藏truejiessie:PRIMARY&gt; rs.reconfig(cfg);&#123; "ok" : 1 &#125;jiessie:PRIMARY&gt; 修改引擎，删除原数据123456789101112131415161718192021222324252627[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb1/bin/mongo localhost:29017MongoDB shell version v3.4.4connecting to: localhost:29017MongoDB server version: 3.4.4jiessie:SECONDARY&gt; rs.slaveOk();jiessie:SECONDARY&gt; use admin;switched to db adminjiessie:SECONDARY&gt; db.shutdownServer(); #关闭服务server should be down...[root@iZuf6c08fdv8duubho2b0rZ ~]# rm -rf /hwdata/data/mongodb3/data/* #删除原引擎数据[root@iZuf6c08fdv8duubho2b0rZ ~]# cat /hwdata/data/mongodb3/conf/mongodb.conf |grep sto #查看原配置storageEngine=mmapv1[root@iZuf6c08fdv8duubho2b0rZ ~]# sed -i 's@storageEngine=mmapv1@storageEngine=wiredTiger@g' /hwdata/data/mongodb3/conf/mongodb.conf #修改配置文件的引擎部分[root@iZuf6c08fdv8duubho2b0rZ ~]# cat /hwdata/data/mongodb3/conf/mongodb.conf |grep sto #查看新配置storageEngine=wiredTiger[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb3/bin/mongod -f /hwdata/data/mongodb3/conf/mongodb.conf #启动服务note: noprealloc may hurt performance in many applicationsabout to fork child process, waiting until server is ready for connections.forked process: 613child process started successfully, parent exiting[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb3/bin/mongo localhost:29017 --eval "db.serverStatus()"|grep '"name"' #验证是否修改成功 "name" : "wiredTiger",[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb3/bin/mongo localhost:29017MongoDB shell version v3.4.4connecting to: localhost:29017MongoDB server version: 3.4.4jiessie:SECONDARY&gt; exit #验证初始化同步是否成功，SECONDARY状态表示已经是从节点 加入副本集12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb1/bin/mongoMongoDB shell version v3.4.4connecting to: mongodb://127.0.0.1:27017MongoDB server version: 3.4.4jiessie:PRIMARY&gt; cfg = rs.config();&#123; "_id" : "jiessie", "version" : 2, "protocolVersion" : NumberLong(1), "members" : [ &#123; "_id" : 0, "host" : "192.168.7.50:27017", "arbiterOnly" : false, "buildIndexes" : true, "hidden" : false, "priority" : 3, "tags" : &#123; &#125;, "slaveDelay" : NumberLong(0), "votes" : 1 &#125;, &#123; "_id" : 1, "host" : "192.168.7.50:28017", "arbiterOnly" : false, "buildIndexes" : true, "hidden" : false, "priority" : 2, "tags" : &#123; &#125;, "slaveDelay" : NumberLong(0), "votes" : 1 &#125;, &#123; "_id" : 2, "host" : "192.168.7.50:29017", "arbiterOnly" : false, "buildIndexes" : true, "hidden" : true, "priority" : 0, "tags" : &#123; &#125;, "slaveDelay" : NumberLong(0), "votes" : 1 &#125; ], "settings" : &#123; "chainingAllowed" : true, "heartbeatIntervalMillis" : 2000, "heartbeatTimeoutSecs" : 10, "electionTimeoutMillis" : 10000, "catchUpTimeoutMillis" : 2000, "getLastErrorModes" : &#123; &#125;, "getLastErrorDefaults" : &#123; "w" : 1, "wtimeout" : 0 &#125;, "replicaSetId" : ObjectId("5971cd4835e57f0331e944c8") &#125;&#125;jiessie:PRIMARY&gt; cfg.members[2].hidden=false; #加入副本集，对应用可见，其中[2]表示29017端口falsejiessie:PRIMARY&gt; cfg.members[2].priority = 1; #修改为之前的优先级1jiessie:PRIMARY&gt; rs.reconfig(cfg);&#123; "ok" : 1 &#125;jiessie:PRIMARY&gt; 28017实例设置节点隐藏123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb1/bin/mongoMongoDB shell version v3.4.4connecting to: mongodb://127.0.0.1:27017MongoDB server version: 3.4.4jiessie:PRIMARY&gt; cfg = rs.config();&#123; "_id" : "jiessie", "version" : 4, "protocolVersion" : NumberLong(1), "members" : [ &#123; "_id" : 0, "host" : "192.168.7.50:27017", "arbiterOnly" : false, "buildIndexes" : true, "hidden" : false, "priority" : 3, "tags" : &#123; &#125;, "slaveDelay" : NumberLong(0), "votes" : 1 &#125;, &#123; "_id" : 1, "host" : "192.168.7.50:28017", "arbiterOnly" : false, "buildIndexes" : true, "hidden" : false, "priority" : 2, "tags" : &#123; &#125;, "slaveDelay" : NumberLong(0), "votes" : 1 &#125;, &#123; "_id" : 2, "host" : "192.168.7.50:29017", "arbiterOnly" : false, "buildIndexes" : true, "hidden" : false, "priority" : 1, "tags" : &#123; &#125;, "slaveDelay" : NumberLong(0), "votes" : 1 &#125; ], "settings" : &#123; "chainingAllowed" : true, "heartbeatIntervalMillis" : 2000, "heartbeatTimeoutSecs" : 10, "electionTimeoutMillis" : 10000, "catchUpTimeoutMillis" : 2000, "getLastErrorModes" : &#123; &#125;, "getLastErrorDefaults" : &#123; "w" : 1, "wtimeout" : 0 &#125;, "replicaSetId" : ObjectId("5971cd4835e57f0331e944c8") &#125;&#125;jiessie:PRIMARY&gt; cfg.members[1].host192.168.7.50:28017jiessie:PRIMARY&gt; cfg.members[1].priority = 0;0jiessie:PRIMARY&gt; cfg.members[1].hidden = true;truejiessie:PRIMARY&gt; rs.reconfig(cfg);&#123; "ok" : 1 &#125;jiessie:PRIMARY&gt; 修改引擎，删除原数据123456789101112131415161718192021222324252627[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb1/bin/mongo localhost:28017MongoDB shell version v3.4.4connecting to: localhost:28017MongoDB server version: 3.4.4jiessie:SECONDARY&gt; rs.slaveOk();jiessie:SECONDARY&gt; use admin;switched to db adminjiessie:SECONDARY&gt; db.shutdownServer(); #关闭服务server should be down...[root@iZuf6c08fdv8duubho2b0rZ ~]# rm -rf /hwdata/data/mongodb2/data/* #删除原引擎数据[root@iZuf6c08fdv8duubho2b0rZ ~]# cat /hwdata/data/mongodb2/conf/mongodb.conf |grep sto #查看原配置storageEngine=mmapv1[root@iZuf6c08fdv8duubho2b0rZ ~]# sed -i 's@storageEngine=mmapv1@storageEngine=wiredTiger@g' /hwdata/data/mongodb2/conf/mongodb.conf #修改配置文件的引擎部分[root@iZuf6c08fdv8duubho2b0rZ ~]# cat /hwdata/data/mongodb2/conf/mongodb.conf |grep sto #查看新配置storageEngine=wiredTiger[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb2/bin/mongod -f /hwdata/data/mongodb2/conf/mongodb.conf #启动服务note: noprealloc may hurt performance in many applicationsabout to fork child process, waiting until server is ready for connections.forked process: 1275child process started successfully, parent exiting[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb2/bin/mongo localhost:28017 --eval "db.serverStatus()"|grep '"name"' #验证是否修改成功 "name" : "wiredTiger",[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb2/bin/mongo localhost:28017MongoDB shell version v3.4.4connecting to: localhost:28017MongoDB server version: 3.4.4jiessie:SECONDARY&gt; exit #验证初始化同步是否成功，SECONDARY状态表示已经是从节点 加入副本集12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb1/bin/mongo MongoDB shell version v3.4.4connecting to: mongodb://127.0.0.1:27017MongoDB server version: 3.4.4jiessie:PRIMARY&gt; cfg = rs.config();&#123; "_id" : "jiessie", "version" : 5, "protocolVersion" : NumberLong(1), "members" : [ &#123; "_id" : 0, "host" : "192.168.7.50:27017", "arbiterOnly" : false, "buildIndexes" : true, "hidden" : false, "priority" : 3, "tags" : &#123; &#125;, "slaveDelay" : NumberLong(0), "votes" : 1 &#125;, &#123; "_id" : 1, "host" : "192.168.7.50:28017", "arbiterOnly" : false, "buildIndexes" : true, "hidden" : true, "priority" : 0, "tags" : &#123; &#125;, "slaveDelay" : NumberLong(0), "votes" : 1 &#125;, &#123; "_id" : 2, "host" : "192.168.7.50:29017", "arbiterOnly" : false, "buildIndexes" : true, "hidden" : false, "priority" : 1, "tags" : &#123; &#125;, "slaveDelay" : NumberLong(0), "votes" : 1 &#125; ], "settings" : &#123; "chainingAllowed" : true, "heartbeatIntervalMillis" : 2000, "heartbeatTimeoutSecs" : 10, "electionTimeoutMillis" : 10000, "catchUpTimeoutMillis" : 2000, "getLastErrorModes" : &#123; &#125;, "getLastErrorDefaults" : &#123; "w" : 1, "wtimeout" : 0 &#125;, "replicaSetId" : ObjectId("5971cd4835e57f0331e944c8") &#125;&#125;jiessie:PRIMARY&gt; cfg.members[1].hidden = false; #加入副本集，对应用可见，其中[1]表示28017端口falsejiessie:PRIMARY&gt; cfg.members[1].priority = 2; #修改为之前的优先级2jiessie:PRIMARY&gt; rs.reconfig(cfg);&#123; "ok" : 1 &#125;jiessie:PRIMARY&gt; 27017实例设置节点隐藏123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb1/bin/mongoMongoDB shell version v3.4.4connecting to: mongodb://127.0.0.1:27017MongoDB server version: 3.4.4jiessie:PRIMARY&gt; jiessie:PRIMARY&gt; rs.stepDown();2017-07-22T21:51:26.392+0800 E QUERY [thread1] Error: error doing query: failed: network error while attempting to run command 'replSetStepDown' on host '127.0.0.1:27017' :DB.prototype.runCommand@src/mongo/shell/db.js:132:1DB.prototype.adminCommand@src/mongo/shell/db.js:150:16rs.stepDown@src/mongo/shell/utils.js:1261:12@(shell):1:12017-07-22T21:51:26.394+0800 I NETWORK [thread1] trying reconnect to 127.0.0.1:27017 (127.0.0.1) failed2017-07-22T21:51:26.394+0800 I NETWORK [thread1] reconnect 127.0.0.1:27017 (127.0.0.1) okjiessie:SECONDARY&gt; rs.slaveOk();jiessie:SECONDARY&gt; rs.status(); #等待几秒，查看状态，此时28017实例是已经提升为新主库&#123; "set" : "jiessie", "date" : ISODate("2017-07-22T13:51:34.336Z"), "myState" : 2, "term" : NumberLong(12), "heartbeatIntervalMillis" : NumberLong(2000), "optimes" : &#123; "lastCommittedOpTime" : &#123; "ts" : Timestamp(1500731480, 1), "t" : NumberLong(12) &#125;, "appliedOpTime" : &#123; "ts" : Timestamp(1500731480, 1), "t" : NumberLong(12) &#125;, "durableOpTime" : &#123; "ts" : Timestamp(1500731480, 1), "t" : NumberLong(12) &#125; &#125;, "members" : [ &#123; "_id" : 0, "name" : "192.168.7.50:27017", "health" : 1, "state" : 2, "stateStr" : "SECONDARY", "uptime" : 102106, "optime" : &#123; "ts" : Timestamp(1500731480, 1), "t" : NumberLong(12) &#125;, "optimeDate" : ISODate("2017-07-22T13:51:20Z"), "infoMessage" : "could not find member to sync from", "configVersion" : 6, "self" : true &#125;, &#123; "_id" : 1, "name" : "192.168.7.50:28017", "health" : 1, "state" : 2, "stateStr" : "SECONDARY", "uptime" : 2403, "optime" : &#123; "ts" : Timestamp(1500731480, 1), "t" : NumberLong(12) &#125;, "optimeDurable" : &#123; "ts" : Timestamp(1500731480, 1), "t" : NumberLong(12) &#125;, "optimeDate" : ISODate("2017-07-22T13:51:20Z"), "optimeDurableDate" : ISODate("2017-07-22T13:51:20Z"), "lastHeartbeat" : ISODate("2017-07-22T13:51:31.557Z"), "lastHeartbeatRecv" : ISODate("2017-07-22T13:51:33.176Z"), "pingMs" : NumberLong(0), "syncingTo" : "192.168.7.50:29017", "configVersion" : 6 &#125;, &#123; "_id" : 2, "name" : "192.168.7.50:29017", "health" : 1, "state" : 2, "stateStr" : "SECONDARY", "uptime" : 4846, "optime" : &#123; "ts" : Timestamp(1500731480, 1), "t" : NumberLong(12) &#125;, "optimeDurable" : &#123; "ts" : Timestamp(1500731480, 1), "t" : NumberLong(12) &#125;, "optimeDate" : ISODate("2017-07-22T13:51:20Z"), "optimeDurableDate" : ISODate("2017-07-22T13:51:20Z"), "lastHeartbeat" : ISODate("2017-07-22T13:51:31.557Z"), "lastHeartbeatRecv" : ISODate("2017-07-22T13:51:30.019Z"), "pingMs" : NumberLong(0), "configVersion" : 6 &#125; ], "ok" : 1&#125;jiessie:SECONDARY&gt; exitbye[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb1/bin/mongo localhost:28017 #登录新主库，原27017实例修改实例引擎MongoDB shell version v3.4.4connecting to: localhost:28017MongoDB server version: 3.4.4jiessie:PRIMARY&gt; cfg = rs.config();&#123; "_id" : "jiessie", "version" : 6, "protocolVersion" : NumberLong(1), "members" : [ &#123; "_id" : 0, "host" : "192.168.7.50:27017", "arbiterOnly" : false, "buildIndexes" : true, "hidden" : false, "priority" : 3, "tags" : &#123; &#125;, "slaveDelay" : NumberLong(0), "votes" : 1 &#125;, &#123; "_id" : 1, "host" : "192.168.7.50:28017", "arbiterOnly" : false, "buildIndexes" : true, "hidden" : false, "priority" : 2, "tags" : &#123; &#125;, "slaveDelay" : NumberLong(0), "votes" : 1 &#125;, &#123; "_id" : 2, "host" : "192.168.7.50:29017", "arbiterOnly" : false, "buildIndexes" : true, "hidden" : false, "priority" : 1, "tags" : &#123; &#125;, "slaveDelay" : NumberLong(0), "votes" : 1 &#125; ], "settings" : &#123; "chainingAllowed" : true, "heartbeatIntervalMillis" : 2000, "heartbeatTimeoutSecs" : 10, "electionTimeoutMillis" : 10000, "catchUpTimeoutMillis" : 2000, "getLastErrorModes" : &#123; &#125;, "getLastErrorDefaults" : &#123; "w" : 1, "wtimeout" : 0 &#125;, "replicaSetId" : ObjectId("5971cd4835e57f0331e944c8") &#125;&#125;jiessie:PRIMARY&gt; cfg.members[0].priority = 0;0jiessie:PRIMARY&gt; cfg.members[0].hidden = true;truejiessie:PRIMARY&gt; rs.reconfig(cfg);&#123; "ok" : 1 &#125;jiessie:PRIMARY&gt; 修改引擎，删除原数据123456789101112131415161718192021222324252627[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb1/bin/mongo localhost:27017MongoDB shell version v3.4.4connecting to: localhost:27017MongoDB server version: 3.4.4jiessie:SECONDARY&gt; rs.slaveOk();jiessie:SECONDARY&gt; use admin;switched to db adminjiessie:SECONDARY&gt; db.shutdownServer(); #关闭服务server should be down...[root@iZuf6c08fdv8duubho2b0rZ ~]# rm -rf /hwdata/data/mongodb1/data/* #删除原引擎数据[root@iZuf6c08fdv8duubho2b0rZ ~]# cat /hwdata/data/mongodb1/conf/mongodb.conf |grep sto #查看原配置storageEngine=mmapv1[root@iZuf6c08fdv8duubho2b0rZ ~]# sed -i 's@storageEngine=mmapv1@storageEngine=wiredTiger@g' /hwdata/data/mongodb1/conf/mongodb.conf #修改配置文件的引擎部分[root@iZuf6c08fdv8duubho2b0rZ ~]# cat /hwdata/data/mongodb2/conf/mongodb.conf |grep sto #查看新配置storageEngine=wiredTiger[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb1/bin/mongod -f /hwdata/data/mongodb1/conf/mongodb.conf #启动服务note: noprealloc may hurt performance in many applicationsabout to fork child process, waiting until server is ready for connections.forked process: 2157child process started successfully, parent exiting[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb1/bin/mongo localhost:27017 --eval "db.serverStatus()"|grep '"name"' #验证是否修改成功 "name" : "wiredTiger",[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb1/bin/mongo localhost:27017MongoDB shell version v3.4.4connecting to: localhost:27017MongoDB server version: 3.4.4jiessie:SECONDARY&gt; exit #验证初始化同步是否成功，SECONDARY状态表示已经是从节点 加入副本集12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273[root@iZuf6c08fdv8duubho2b0rZ ~]# /usr/local/mongodb1/bin/mongo localhost:28017MongoDB shell version v3.4.4connecting to: mongodb://127.0.0.1:27017MongoDB server version: 3.4.4jiessie:PRIMARY&gt; cfg = rs.config();&#123; "_id" : "jiessie", "version" : 7, "protocolVersion" : NumberLong(1), "members" : [ &#123; "_id" : 0, "host" : "192.168.7.50:27017", "arbiterOnly" : false, "buildIndexes" : true, "hidden" : true, "priority" : 0, "tags" : &#123; &#125;, "slaveDelay" : NumberLong(0), "votes" : 1 &#125;, &#123; "_id" : 1, "host" : "192.168.7.50:28017", "arbiterOnly" : false, "buildIndexes" : true, "hidden" : false, "priority" : 2, "tags" : &#123; &#125;, "slaveDelay" : NumberLong(0), "votes" : 1 &#125;, &#123; "_id" : 2, "host" : "192.168.7.50:29017", "arbiterOnly" : false, "buildIndexes" : true, "hidden" : false, "priority" : 1, "tags" : &#123; &#125;, "slaveDelay" : NumberLong(0), "votes" : 1 &#125; ], "settings" : &#123; "chainingAllowed" : true, "heartbeatIntervalMillis" : 2000, "heartbeatTimeoutSecs" : 10, "electionTimeoutMillis" : 10000, "catchUpTimeoutMillis" : 2000, "getLastErrorModes" : &#123; &#125;, "getLastErrorDefaults" : &#123; "w" : 1, "wtimeout" : 0 &#125;, "replicaSetId" : ObjectId("5971cd4835e57f0331e944c8") &#125;&#125;jiessie:PRIMARY&gt; cfg.members[0].hidden = false; #加入副本集，对应用可见，其中[0]表示27017端口falsejiessie:PRIMARY&gt; cfg.members[0].priority = 3; #修改为之前的优先级3jiessie:PRIMARY&gt; rs.reconfig(cfg);&#123; "ok" : 1 &#125;jiessie:SECONDARY&gt; #等待几秒后，PRIMARY会变成SECONDARY 结束语mongodb作为发展迅速的开源数据库一员，版本迭代升级很快，目前使用旧引擎的公司不在小数，新引擎的优点足以促使其升级引擎。]]></content>
      <categories>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>mongo</tag>
        <tag>mongodb</tag>
        <tag>MMAPv1</tag>
        <tag>WiredTiger</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Percona Data Recovery Tool for InnoDB恢复数据]]></title>
    <url>%2F%E4%BD%BF%E7%94%A8Percona-Data-Recovery-Tool-for-InnoDB%E6%81%A2%E5%A4%8D%E6%95%B0%E6%8D%AE.html</url>
    <content type="text"><![CDATA[前言数据是一个企业最重要的资产，备份的重要性不言而喻，有效的备份能够减少意外情况下的公司损失。当使用MySQL数据库时，mysqldump、mysqlpump、mydumper、xtrabackup等都是不错的备份工具，极端情况下，当开启了binlog，也可以成为恢复的救命稻草。但是，还有存在无备份，没有开启binlog的情况，如果是InnoDB表，这时percona推出的Percona Data Recovery Tool工具可以派上用场。 注意事项123456此工具仅支持InnoDB/XtraDB表，不支持MyISAM表此工具可恢复数据文件的副本，并不要求是正在运行的MySQL服务器此工具并不保证数据一定可恢复，如数据被覆盖支持的误操作类型：DELETE、TRUNCATE，表格式为Compact在文件系统级别删除的文件如数据文件损失，此工具也无法恢复 原理通过尝试在页面中找到有效的行来工作，InnoDB的数据都是索引的方式组织的，所有的数据都是存储在16KB的数据块中，每个页面都有属于特定表的特定索引。恢复时分解所有的数据文件为单个16kb大小的页面，根据每个页面的标记的数据起点开始尝试匹配，如果与给定表定义的属于匹配，则输出匹配记录。 表空间当服务器设置了innodb_file_per_table=1时，工具不需要再额外的从ibdata1中拆分数据，所有的数据都保存在ibd文件中。当服务器设置了innodb_file_per_table=0时，工具需要先使用page_parser，把数据文件从ibdata1中拆分出来，再按照规则匹配记录。 准备操作系统：centos 6.5 x86_64 安装依赖1yum -y install gcc gcc-c++ glibc glibc-static perl-DBI perl-DBD-MySQL 安装Percona Data Recovery Tool123456789101112131415161718192021222324252627282930[root@iZuf6c08fdv8duubho2b0rZ ~]# cd /usr/src/[root@iZuf6c08fdv8duubho2b0rZ src]# wget https://launchpad.net/percona-data-recovery-tool-for-innodb/trunk/release-0.5/+download/percona-data-recovery-tool-for-innodb-0.5.tar.gz --no-check-certificate [root@iZuf6c08fdv8duubho2b0rZ src]# tar -zxf percona-data-recovery-tool-for-innodb-0.5.tar.gz [root@iZuf6c08fdv8duubho2b0rZ src]# cd percona-data-recovery-tool-for-innodb-0.5/mysql-source/[root@iZuf6c08fdv8duubho2b0rZ mysql-source]# ./configure [root@iZuf6c08fdv8duubho2b0rZ mysql-source]# cd ..[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# make[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# ll总用量 3168-rw-r--r-- 1 510 wheel 6269 8月 28 2011 check_data.c-rwxr-xr-x 1 root root 748761 7月 17 09:06 constraints_parser-rw-r--r-- 1 510 wheel 22172 8月 28 2011 constraints_parser.c-rwxr-xr-x 1 510 wheel 12051 8月 28 2011 create_defs.pldrwxr-xr-x 2 510 wheel 4096 8月 28 2011 docs-rwxr-xr-x 1 510 wheel 1978 8月 28 2011 fetch_data.sh-rwxr-xr-x 1 root root 979051 7月 17 09:06 ibdconnect-rw-r--r-- 1 510 wheel 12200 8月 28 2011 ibdconnect.cdrwxr-xr-x 2 510 wheel 4096 8月 28 2011 include-rw-r--r-- 1 510 wheel 8262 8月 28 2011 incrementalupdate.c-rwxr-xr-x 1 root root 14873 7月 17 09:06 innochecksum-rw-r--r-- 1 510 wheel 9117 8月 28 2011 innochecksum.c-rw-r--r-- 1 510 wheel 74 8月 28 2011 INSTALLdrwxr-xr-x 2 root root 4096 7月 17 09:06 lib-rw-r--r-- 1 510 wheel 2676 8月 28 2011 Makefiledrwxr-xr-x 40 510 wheel 4096 7月 17 09:06 mysql-source-rwxr-xr-x 1 root root 1346155 7月 17 09:06 page_parser-rw-r--r-- 1 510 wheel 15239 8月 28 2011 page_parser.c-rw-r--r-- 1 510 wheel 10608 8月 28 2011 print_data.c-rwxr-xr-x 1 510 wheel 302 8月 28 2011 split_dump.pl-rw-r--r-- 1 510 wheel 2046 8月 28 2011 tables_dict.c 恢复实战(delete误操作)innodb_file_per_table=1模拟数据被误删除1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# mysql -uroot -p123456Warning: Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 35514Server version: 5.6.36-82.0-log Source distributionCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [(none)] 09:25:34 &gt; create database test111;Query OK, 1 row affected (0.00 sec)MySQL [(none)] 09:25:40 &gt; use test111;Database changedMySQL [test111] 09:25:43 &gt; create table t222(id int unsigned not null auto_increment,name varchar(20),age int,primary key(`id`),key idx_age(`age`)); Query OK, 0 rows affected (0.02 sec)MySQL [test111] 09:25:51 &gt; insert into t222 values(null,'jiessie',18); Query OK, 1 row affected (0.00 sec)MySQL [test111] 09:26:00 &gt; insert into t222 (name,age) select name,age from t222; Query OK, 1 row affected (0.00 sec)Records: 1 Duplicates: 0 Warnings: 0MySQL [test111] 09:26:10 &gt; insert into t222 (name,age) select name,age from t222;Query OK, 2 rows affected (0.00 sec)Records: 2 Duplicates: 0 Warnings: 0MySQL [test111] 09:26:11 &gt; insert into t222 (name,age) select name,age from t222;Query OK, 4 rows affected (0.00 sec)Records: 4 Duplicates: 0 Warnings: 0MySQL [test111] 09:26:11 &gt; insert into t222 (name,age) select name,age from t222;Query OK, 8 rows affected (0.00 sec)Records: 8 Duplicates: 0 Warnings: 0MySQL [test111] 09:26:12 &gt; insert into t222 (name,age) select name,age from t222;Query OK, 16 rows affected (0.00 sec)Records: 16 Duplicates: 0 Warnings: 0MySQL [test111] 09:26:12 &gt; insert into t222 (name,age) select name,age from t222;Query OK, 32 rows affected (0.00 sec)Records: 32 Duplicates: 0 Warnings: 0MySQL [test111] 09:26:12 &gt; insert into t222 (name,age) select name,age from t222;Query OK, 64 rows affected (0.00 sec)Records: 64 Duplicates: 0 Warnings: 0MySQL [test111] 09:26:13 &gt; insert into t222 (name,age) select name,age from t222;Query OK, 128 rows affected (0.01 sec)Records: 128 Duplicates: 0 Warnings: 0MySQL [test111] 09:26:13 &gt; insert into t222 (name,age) select name,age from t222;Query OK, 256 rows affected (0.00 sec)Records: 256 Duplicates: 0 Warnings: 0MySQL [test111] 09:26:14 &gt; insert into t222 (name,age) select name,age from t222;Query OK, 512 rows affected (0.01 sec)Records: 512 Duplicates: 0 Warnings: 0MySQL [test111] 09:26:14 &gt; select count(*) from t222;+----------+| count(*) |+----------+| 1024 |+----------+1 row in set (0.00 sec)MySQL [test111] 09:26:21 &gt; exitBye[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# mysql -uroot -p123456 test111 -e "delete from t222;select count(*) from t222;" &amp;&amp; cp /hwdata/data/percona/test111/t222.* /tmp/Warning: Using a password on the command line interface can be insecure.+----------+| count(*) |+----------+| 0 |+----------+ 解析ibd文件实战mysql安装在/usr/local/percona，数据目录在/hwdata/data/percona，注意保存数据文件。此过程会将表的idb文件解析为很多的page，innodb的page分为两大部分，一部分一级索引部分（primary key），另一部分为二级索引部分（secondary key），所以解析出来的ibd包括了主键数据和索引数据两大部分（如果该表有多个二级索引，则会生成多个文件123456789101112131415161718192021222324252627282930313233343536373839404142434445[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# ll -t /tmp/t222*-rw-r----- 1 root root 163840 7月 17 09:26 /tmp/t222.ibd-rw-r----- 1 root root 8614 7月 17 09:26 /tmp/t222.frm[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# ./page_parser -5 -f /tmp/t222.ibd Opening file: /tmp/t222.ibd:64513 ID of device containing file1597422 inode number33184 protection1 number of hard links0 user ID of owner0 group ID of owner0 device ID (if special file)163840 total size, in bytes4096 blocksize for filesystem I/O320 number of blocks allocated1500254806 time of last access1500254806 time of last modification1500254806 time of last status change163840 Size to process in bytes104857600 Disk cache size in bytes19.97% done. 2017-07-17 09:27:37 ETA(in 00:00 hours). Processing speed: 32723 B/sec[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# ll -t总用量 3172drwxr-xr-x 3 root root 4096 7月 17 09:27 pages-1500254852-rwxr-xr-x 1 root root 1346155 7月 17 09:21 page_parser-rwxr-xr-x 1 root root 748729 7月 17 09:21 constraints_parserdrwxr-xr-x 2 root root 4096 7月 17 09:21 lib-rwxr-xr-x 1 root root 979051 7月 17 09:06 ibdconnect-rwxr-xr-x 1 root root 14873 7月 17 09:06 innochecksumdrwxr-xr-x 40 510 wheel 4096 7月 17 09:06 mysql-sourcedrwxr-xr-x 2 510 wheel 4096 8月 28 2011 docsdrwxr-xr-x 2 510 wheel 4096 8月 28 2011 include-rw-r--r-- 1 510 wheel 6269 8月 28 2011 check_data.c-rw-r--r-- 1 510 wheel 22172 8月 28 2011 constraints_parser.c-rwxr-xr-x 1 510 wheel 12051 8月 28 2011 create_defs.pl-rwxr-xr-x 1 510 wheel 1978 8月 28 2011 fetch_data.sh-rw-r--r-- 1 510 wheel 12200 8月 28 2011 ibdconnect.c-rw-r--r-- 1 510 wheel 8262 8月 28 2011 incrementalupdate.c-rw-r--r-- 1 510 wheel 9117 8月 28 2011 innochecksum.c-rw-r--r-- 1 510 wheel 74 8月 28 2011 INSTALL-rw-r--r-- 1 510 wheel 2676 8月 28 2011 Makefile-rw-r--r-- 1 510 wheel 15239 8月 28 2011 page_parser.c-rw-r--r-- 1 510 wheel 10608 8月 28 2011 print_data.c-rwxr-xr-x 1 510 wheel 302 8月 28 2011 split_dump.pl-rw-r--r-- 1 510 wheel 2046 8月 28 2011 tables_dict.c 参数解释：-5：代表 row format为Compact mysql5.0后的版本，-4 代表mysql5.0前版本-f：代表要解析的文件 结果分析从下面的解析后的结果看到，当前目录多了pages-1500254852，其中39为主键索引的index_id,40为二级索引的index_id,该id可以通过开启innodb_table_monitor查看1234567891011[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# ll pages-1500254852/FIL_PAGE_INDEX/0-*pages-1500254852/FIL_PAGE_INDEX/0-39:总用量 64-rw-r--r-- 1 root root 16384 7月 17 09:27 0-00000003.page-rw-r--r-- 1 root root 16384 7月 17 09:27 2-00000005.page-rw-r--r-- 1 root root 16384 7月 17 09:27 3-00000006.page-rw-r--r-- 1 root root 16384 7月 17 09:27 4-00000007.pagepages-1500254852/FIL_PAGE_INDEX/0-40:总用量 16-rw-r--r-- 1 root root 16384 7月 17 09:27 1-00000004.page 生成表定义由于该工具在解析数据pages的时候，需要获得该table的表结构定义，所以需要执行如下命令。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# ./create_defs.pl --host localhost --user root --password 123456 --db test111 --table t222 &gt; include/table_defs.h[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# cat include/table_defs.h#ifndef table_defs_h#define table_defs_h// Table definitionstable_def_t table_definitions[] = &#123; &#123; name: "t222", &#123; &#123; /* int(10) unsigned */ name: "id", type: FT_UINT, fixed_length: 4, has_limits: FALSE, limits: &#123; can_be_null: FALSE, uint_min_val: 0, uint_max_val: 4294967295ULL &#125;, can_be_null: FALSE &#125;, &#123; /* */ name: "DB_TRX_ID", type: FT_INTERNAL, fixed_length: 6, can_be_null: FALSE &#125;, &#123; /* */ name: "DB_ROLL_PTR", type: FT_INTERNAL, fixed_length: 7, can_be_null: FALSE &#125;, &#123; /* varchar(20) */ name: "name", type: FT_CHAR, min_length: 0, max_length: 60, has_limits: FALSE, limits: &#123; can_be_null: TRUE, char_min_len: 0, char_max_len: 60, char_ascii_only: TRUE &#125;, can_be_null: TRUE &#125;, &#123; /* int(11) */ name: "age", type: FT_INT, fixed_length: 4, has_limits: FALSE, limits: &#123; can_be_null: TRUE, int_min_val: -2147483648LL, int_max_val: 2147483647LL &#125;, can_be_null: TRUE &#125;, &#123; type: FT_NONE &#125; &#125; &#125;,&#125;;#endif[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# [root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# makegcc -DHAVE_OFFSET64_T -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE=1 -D_LARGEFILE_SOURCE=1 -Wall -O3 -g -I include -I mysql-source/include -I mysql-source/innobase/include -c tables_dict.c -o lib/tables_dict.ogcc -DHAVE_OFFSET64_T -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE=1 -D_LARGEFILE_SOURCE=1 -Wall -O3 -g -I include -I mysql-source/include -I mysql-source/innobase/include -c check_data.c -o lib/check_data.ogcc -DHAVE_OFFSET64_T -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE=1 -D_LARGEFILE_SOURCE=1 -Wall -O3 -g -I include -I mysql-source/include -I mysql-source/innobase/include -o constraints_parser constraints_parser.c lib/tables_dict.o lib/print_data.o lib/check_data.o lib/libut.a lib/libmystrings.agcc -DHAVE_OFFSET64_T -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE=1 -D_LARGEFILE_SOURCE=1 -Wall -O3 -g -I include -I mysql-source/include -I mysql-source/innobase/include -static -lrt -o page_parser page_parser.c lib/tables_dict.o lib/libut.a [root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# makegcc -DHAVE_OFFSET64_T -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE=1 -D_LARGEFILE_SOURCE=1 -Wall -O3 -g -I include -I mysql-source/include -I mysql-source/innobase/include -c tables_dict.c -o lib/tables_dict.ogcc -DHAVE_OFFSET64_T -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE=1 -D_LARGEFILE_SOURCE=1 -Wall -O3 -g -I include -I mysql-source/include -I mysql-source/innobase/include -c print_data.c -o lib/print_data.o gcc -DHAVE_OFFSET64_T -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE=1 -D_LARGEFILE_SOURCE=1 -Wall -O3 -g -I include -I mysql-source/include -I mysql-source/innobase/include -o constraints_parser constraints_parser.c lib/tables_dict.o lib/print_data.o lib/check_data.o lib/libut.a lib/libmystrings.agcc -DHAVE_OFFSET64_T -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE=1 -D_LARGEFILE_SOURCE=1 -Wall -O3 -g -I include -I mysql-source/include -I mysql-source/innobase/include -static -lrt -o page_parser page_parser.c lib/tables_dict.o lib/libut.a 上面的命令会将t222表的表定义传入到table_defs.h中，在生成了表结构定义后，重新make该恢复工具 注意：需要make 2次 开始提取page中删除的数据123456789101112131415[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# ./constraints_parser -5 -f pages-1500254852/FIL_PAGE_INDEX/0-39/ &gt; /tmp/t222.sqlLOAD DATA INFILE '/usr/src/percona-data-recovery-tool-for-innodb-0.5/dumps/default/t222' REPLACE INTO TABLE `t222` FIELDS TERMINATED BY '\t' OPTIONALLY ENCLOSED BY '"' LINES STARTING BY 't222\t' (id, name, age);[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# cat /tmp/t222.sql |wc -l1024[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# head -10 /tmp/t222.sql t222 1 "jiessie" 18t222 2 "jiessie" 18t222 3 "jiessie" 18t222 4 "jiessie" 18t222 6 "jiessie" 18t222 7 "jiessie" 18t222 8 "jiessie" 18t222 9 "jiessie" 18t222 13 "jiessie" 18t222 14 "jiessie" 18 参数解释：-5 -f的参数和page_parser相同，代表 row format为Compact ；-D:该参数的含义为代表恢复删除的数据页； 恢复数据使用上面constraints_parser执行后的load data导入数据，需要注意目录123456789101112131415161718192021222324252627282930313233343536373839404142434445[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# mysql -uroot -p123456 Warning: Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 35598Server version: 5.6.36-82.0-log Source distributionCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [(none)] 09:32:33 &gt; use test111;Database changedMySQL [test111] 09:32:35 &gt; LOAD DATA INFILE '/tmp/t222.sql' REPLACE INTO TABLE `t222` FIELDS TERMINATED BY '\t' OPTIONALLY ENCLOSED BY '"' LINES STARTING BY 't222\t' (id, name, age);Query OK, 1024 rows affected (0.00 sec)Records: 1024 Deleted: 0 Skipped: 0 Warnings: 0MySQL [test111] 09:32:53 &gt; select count(*) from t222;+----------+| count(*) |+----------+| 1024 |+----------+1 row in set (0.00 sec)MySQL [test111] 09:32:59 &gt; select * from t222 limit 10;+----+---------+------+| id | name | age |+----+---------+------+| 1 | jiessie | 18 || 2 | jiessie | 18 || 3 | jiessie | 18 || 4 | jiessie | 18 || 6 | jiessie | 18 || 7 | jiessie | 18 || 8 | jiessie | 18 || 9 | jiessie | 18 || 13 | jiessie | 18 || 14 | jiessie | 18 |+----+---------+------+10 rows in set (0.00 sec) 查看数据，数据恢复成功。从实验来看，当delete误操作，第一时间要保护好ibd数据，拷贝到其他目录。 恢复脚本当误操作的数据量大时，constraints_parser恢复是单线程，速度较慢，此处引用了2个恢复脚本详情请参考：http://www.orczhou.com/index.php/2013/07/how-to-recover-data-from-mysql-innodb-data-file-ibd-file/123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# pwd/usr/src/percona-data-recovery-tool-for-innodb-0.5[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# cat parallel_exec.sh #!/bin/bashws=/usr/src/percona-data-recovery-tool-for-innodb-0.5/pagedir=/usr/src/percona-data-recovery-tool-for-innodb-0.5/pages-1500255306/FIL_PAGE_INDEXlogdir=/usr/src/percona-data-recovery-tool-for-innodb-0.5/logrectool=/usr/src/percona-data-recovery-tool-for-innodb-0.5/constraints_parsercd `dirname $rectool`count=0page_count=353894page_done=0startdate=`date +%s`for d1 in `ls $pagedir`do count=$(($count+1)) echo "in page $d2 at dir $d1" &gt; $logdir/$count.log thedate=`date +%s` echo "$page_done / $page_count at $thedate from $startdate" total=`ls -l $pagedir/$d1/|wc -l` page_done=$(($page_done+$total)) threads=`ps axu|grep parser_jobs|grep -v grep|wc -l` echo $threads while [ $threads -gt 48 ]; do sleep 1 threads=`ps axu|grep parser_jobs|grep -v grep|wc -l` done $ws/parser_jobs.sh $pagedir/$d1 &gt; $ws/job.log 2&gt;&amp;1 &amp;done[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# cat parser_jobs.sh #!/bin/bashpagedir=/usr/src/percona-data-recovery-tool-for-innodb-0.5/pages-1500255306/FIL_PAGE_INDEXlogdir=/usr/src/percona-data-recovery-tool-for-innodb-0.5/logrectool=/usr/src/percona-data-recovery-tool-for-innodb-0.5/constraints_parserlogfile="$logdir/`basename $1`.log"echo "$1" &gt; $logfileif [ -d $1 ];then for d2 in `ls $1` do $rectool -5 -f $1/$d2 &gt;&gt; $logfile 2&gt;/dev/null donefi[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# ./parallel_exec.sh 0 / 353894 at 1500255771 from 15002557710[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# ll log/总用量 296-rw-r--r-- 1 root root 296770 7月 17 09:42 0-41.log-rw-r--r-- 1 root root 21 7月 17 09:42 1.log[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# cat log/0-41.log |wc -l10001[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# head -10 log/0-41.log /usr/src/percona-data-recovery-tool-for-innodb-0.5/pages-1500255306/FIL_PAGE_INDEX/0-41employee 3670 3670 "test3670"employee 3671 3671 "test3671"employee 3672 3672 "test3672"employee 3673 3673 "test3673"employee 3674 3674 "test3674"employee 3675 3675 "test3675"employee 3676 3676 "test3676"employee 3677 3677 "test3677"employee 3678 3678 "test3678" 用法：1.修改脚本路2.修改page_parser后的pages目录3.创建log目录4.执行parallel_exec脚本5.注意，上面演示的示例，0-41.log中在第一行多了一句待恢复innodb页的路径，实际恢复中应删除 innodb_file_per_table=0模拟数据被误删除1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# mysql -uroot -p123456 -e "show variables like 'innodb_file_per_table'"Warning: Using a password on the command line interface can be insecure.+-----------------------+-------+| Variable_name | Value |+-----------------------+-------+| innodb_file_per_table | OFF |+-----------------------+-------+[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# mysql -uroot -p123456Warning: Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 9Server version: 5.6.36-82.0-log Source distributionCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [(none)] 09:58:22 &gt; create database test111;Query OK, 1 row affected (0.00 sec)MySQL [(none)] 09:58:31 &gt; use test111;Database changedMySQL [test111] 09:58:34 &gt; create table t222(id int unsigned not null auto_increment,name varchar(20),age int,primary key(`id`),key idx_age(`age`)); Query OK, 0 rows affected (0.01 sec)MySQL [test111] 09:58:52 &gt; insert into t222 values(null,'jiessie',18); Query OK, 1 row affected (0.00 sec)MySQL [test111] 09:58:57 &gt; insert into t222 (name,age) select name,age from t222; Query OK, 1 row affected (0.00 sec)Records: 1 Duplicates: 0 Warnings: 0MySQL [test111] 09:59:02 &gt; insert into t222 (name,age) select name,age from t222; Query OK, 2 rows affected (0.00 sec)Records: 2 Duplicates: 0 Warnings: 0MySQL [test111] 09:59:03 &gt; insert into t222 (name,age) select name,age from t222; Query OK, 4 rows affected (0.00 sec)Records: 4 Duplicates: 0 Warnings: 0MySQL [test111] 09:59:04 &gt; insert into t222 (name,age) select name,age from t222; Query OK, 8 rows affected (0.00 sec)Records: 8 Duplicates: 0 Warnings: 0MySQL [test111] 09:59:04 &gt; insert into t222 (name,age) select name,age from t222; Query OK, 16 rows affected (0.00 sec)Records: 16 Duplicates: 0 Warnings: 0MySQL [test111] 09:59:06 &gt; insert into t222 (name,age) select name,age from t222; Query OK, 32 rows affected (0.00 sec)Records: 32 Duplicates: 0 Warnings: 0MySQL [test111] 09:59:07 &gt; insert into t222 (name,age) select name,age from t222; Query OK, 64 rows affected (0.00 sec)Records: 64 Duplicates: 0 Warnings: 0MySQL [test111] 09:59:07 &gt; insert into t222 (name,age) select name,age from t222; Query OK, 128 rows affected (0.00 sec)Records: 128 Duplicates: 0 Warnings: 0MySQL [test111] 09:59:08 &gt; insert into t222 (name,age) select name,age from t222; Query OK, 256 rows affected (0.00 sec)Records: 256 Duplicates: 0 Warnings: 0MySQL [test111] 09:59:08 &gt; insert into t222 (name,age) select name,age from t222; Query OK, 512 rows affected (0.00 sec)Records: 512 Duplicates: 0 Warnings: 0MySQL [test111] 09:59:09 &gt; select count(*) from t222;+----------+| count(*) |+----------+| 1024 |+----------+1 row in set (0.00 sec) 解析ibd文件实战mysql安装在/usr/local/percona，数据目录在/hwdata/data/percona，注意保存数据文件。当设置了使用共享表空间(innodb_file_per_table=0)时，所有数据文件存在在ibdata1文件里面，不再是存在在单独表中，此时需要从ibdata1提取出需要被恢复的表12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# ./page_parser -5 -f /tmp/ibdata1 Opening file: /tmp/ibdata1:64513 ID of device containing file1597426 inode number33184 protection1 number of hard links0 user ID of owner0 group ID of owner0 device ID (if special file)1073741824 total size, in bytes4096 blocksize for filesystem I/O2097160 number of blocks allocated1500256783 time of last access1500256790 time of last modification1500256790 time of last status change1073741824 Size to process in bytes104857600 Disk cache size in bytes1.65% done. 2017-07-17 10:03:48 ETA(in 00:00 hours). Processing speed: 17666552 B/sec3.41% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19000304 B/sec5.18% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19005354 B/sec6.96% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19008049 B/sec8.73% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19015298 B/sec10.47% done. 2017-07-17 10:03:45 ETA(in 00:00 hours). Processing speed: 18719062 B/sec12.24% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19008805 B/sec14.01% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19009523 B/sec15.78% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19007004 B/sec17.55% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19008533 B/sec19.32% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19008676 B/sec21.06% done. 2017-07-17 10:03:45 ETA(in 00:00 hours). Processing speed: 18715203 B/sec22.83% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19007750 B/sec24.60% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19002802 B/sec26.37% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 18998409 B/sec28.14% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 18991699 B/sec29.88% done. 2017-07-17 10:03:45 ETA(in 00:00 hours). Processing speed: 18708371 B/sec31.65% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 18999365 B/sec33.42% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 18997104 B/sec35.19% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19001358 B/sec36.96% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 18999823 B/sec38.73% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 18997814 B/sec40.47% done. 2017-07-17 10:03:45 ETA(in 00:00 hours). Processing speed: 18706585 B/sec42.24% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 18996668 B/sec44.01% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 18998094 B/sec45.78% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 18998427 B/sec47.55% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19002403 B/sec49.30% done. 2017-07-17 10:03:45 ETA(in 00:00 hours). Processing speed: 18724158 B/sec51.06% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 18997507 B/sec52.83% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 18999524 B/sec54.60% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 18998796 B/sec56.37% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19000200 B/sec58.14% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 18998670 B/sec59.88% done. 2017-07-17 10:03:45 ETA(in 00:00 hours). Processing speed: 18699601 B/sec61.65% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19000413 B/sec63.42% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 18997737 B/sec65.19% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 18996538 B/sec66.96% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 18999244 B/sec68.70% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 18704824 B/sec70.47% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19002702 B/sec72.24% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19002732 B/sec74.01% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 18999341 B/sec75.78% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19001510 B/sec77.55% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 18998098 B/sec79.29% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 18706109 B/sec81.06% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19007616 B/sec82.83% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19007630 B/sec84.60% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19004630 B/sec86.37% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19004716 B/sec88.12% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 18717386 B/sec89.89% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19005803 B/sec91.66% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19007785 B/sec93.43% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19006419 B/sec95.20% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19004360 B/sec96.97% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 19008201 B/sec98.73% done. 2017-07-17 10:03:44 ETA(in 00:00 hours). Processing speed: 18940047 B/sec[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# ll -t总用量 3172drwxr-xr-x 4 root root 4096 7月 17 10:18 pages-1500257904-rwxr-xr-x 1 root root 979051 7月 17 10:18 ibdconnect-rwxr-xr-x 1 root root 14873 7月 17 10:18 innochecksum-rwxr-xr-x 1 root root 1346155 7月 17 10:18 page_parser-rwxr-xr-x 1 root root 748761 7月 17 10:18 constraints_parserdrwxr-xr-x 2 root root 4096 7月 17 10:18 libdrwxr-xr-x 40 510 wheel 4096 7月 17 10:18 mysql-sourcedrwxr-xr-x 2 510 wheel 4096 8月 28 2011 docsdrwxr-xr-x 2 510 wheel 4096 8月 28 2011 include-rw-r--r-- 1 510 wheel 6269 8月 28 2011 check_data.c-rw-r--r-- 1 510 wheel 22172 8月 28 2011 constraints_parser.c-rwxr-xr-x 1 510 wheel 12051 8月 28 2011 create_defs.pl-rwxr-xr-x 1 510 wheel 1978 8月 28 2011 fetch_data.sh-rw-r--r-- 1 510 wheel 12200 8月 28 2011 ibdconnect.c-rw-r--r-- 1 510 wheel 8262 8月 28 2011 incrementalupdate.c-rw-r--r-- 1 510 wheel 9117 8月 28 2011 innochecksum.c-rw-r--r-- 1 510 wheel 74 8月 28 2011 INSTALL-rw-r--r-- 1 510 wheel 2676 8月 28 2011 Makefile-rw-r--r-- 1 510 wheel 15239 8月 28 2011 page_parser.c-rw-r--r-- 1 510 wheel 10608 8月 28 2011 print_data.c-rwxr-xr-x 1 510 wheel 302 8月 28 2011 split_dump.pl-rw-r--r-- 1 510 wheel 2046 8月 28 2011 tables_dict.c 从ibdata1提取待恢复数据由于ibdata1恢复的是所有数据，需要从这些数据找到误操作的表，通过查询元数据，得到表空间的id和name123456789101112131415161718192021222324252627282930313233343536373839404142434445464748[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# mysql -uroot -p123456 Warning: Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 39Server version: 5.6.36-82.0-log Source distributionCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [(none)] 10:06:55 &gt; use information_schema;Database changedMySQL [information_schema] 10:06:58 &gt; select i.INDEX_ID, i.NAME FROM INNODB_SYS_INDEXES as i INNER JOIN INNODB_SYS_TABLES as t USING(TABLE_ID) WHERE t.NAME='test111/t222';+----------+---------+| INDEX_ID | NAME |+----------+---------+| 20 | PRIMARY || 21 | idx_age |+----------+---------+2 rows in set (0.00 sec)MySQL [information_schema] 10:06:59 &gt; exitBye[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# ll pages-1500256968/FIL_PAGE_INDEX/总用量 68drwxr-xr-x 2 root root 4096 7月 17 10:02 0-1drwxr-xr-x 2 root root 4096 7月 17 10:02 0-11drwxr-xr-x 2 root root 4096 7月 17 10:02 0-12drwxr-xr-x 2 root root 4096 7月 17 10:02 0-13drwxr-xr-x 2 root root 4096 7月 17 10:02 0-14drwxr-xr-x 2 root root 4096 7月 17 10:02 0-15drwxr-xr-x 2 root root 4096 7月 17 10:02 0-16drwxr-xr-x 2 root root 4096 7月 17 10:02 0-17drwxr-xr-x 2 root root 4096 7月 17 10:02 0-18drwxr-xr-x 2 root root 4096 7月 17 10:02 0-19drwxr-xr-x 2 root root 4096 7月 17 10:02 0-2drwxr-xr-x 2 root root 4096 7月 17 10:02 0-20drwxr-xr-x 2 root root 4096 7月 17 10:02 0-21drwxr-xr-x 2 root root 4096 7月 17 10:02 0-3drwxr-xr-x 2 root root 4096 7月 17 10:02 0-4drwxr-xr-x 2 root root 4096 7月 17 10:02 0-5drwxr-xr-x 2 root root 4096 7月 17 10:02 4294967295-0[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# 结果分析从下面的解析后的结果看到，当前目录pages-1500257904，其中20为主键索引的index_id,21为二级索引的index_id,该id可以通过开启innodb_table_monitor查看1234567891011121314[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# ll pages-1500256968/FIL_PAGE_INDEX/0-20/总用量 128-rw-r--r-- 1 root root 16384 7月 17 10:02 15-00000054.page-rw-r--r-- 1 root root 16384 7月 17 10:02 17-00000056.page-rw-r--r-- 1 root root 16384 7月 17 10:02 18-00000057.page-rw-r--r-- 1 root root 16384 7月 17 10:02 19-00000058.page-rw-r--r-- 1 root root 16384 7月 17 10:02 20-00000054.page-rw-r--r-- 1 root root 16384 7月 17 10:02 22-00000057.page-rw-r--r-- 1 root root 16384 7月 17 10:02 23-00000056.page-rw-r--r-- 1 root root 16384 7月 17 10:02 24-00000058.page[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# ll pages-1500256968/FIL_PAGE_INDEX/0-21总用量 32-rw-r--r-- 1 root root 16384 7月 17 10:02 16-00000055.page-rw-r--r-- 1 root root 16384 7月 17 10:02 21-00000055.page 生成表定义由于该工具在解析数据pages的时候，需要获得该table的表结构定义，所以需要执行如下命令。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# ./create_defs.pl --host localhost --user root --password 123456 --db test111 --table t222 &gt; include/table_defs.h[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# cat include/table_defs.h#ifndef table_defs_h#define table_defs_h// Table definitionstable_def_t table_definitions[] = &#123; &#123; name: "t222", &#123; &#123; /* int(10) unsigned */ name: "id", type: FT_UINT, fixed_length: 4, has_limits: FALSE, limits: &#123; can_be_null: FALSE, uint_min_val: 0, uint_max_val: 4294967295ULL &#125;, can_be_null: FALSE &#125;, &#123; /* */ name: "DB_TRX_ID", type: FT_INTERNAL, fixed_length: 6, can_be_null: FALSE &#125;, &#123; /* */ name: "DB_ROLL_PTR", type: FT_INTERNAL, fixed_length: 7, can_be_null: FALSE &#125;, &#123; /* varchar(20) */ name: "name", type: FT_CHAR, min_length: 0, max_length: 60, has_limits: FALSE, limits: &#123; can_be_null: TRUE, char_min_len: 0, char_max_len: 60, char_ascii_only: TRUE &#125;, can_be_null: TRUE &#125;, &#123; /* int(11) */ name: "age", type: FT_INT, fixed_length: 4, has_limits: FALSE, limits: &#123; can_be_null: TRUE, int_min_val: -2147483648LL, int_max_val: 2147483647LL &#125;, can_be_null: TRUE &#125;, &#123; type: FT_NONE &#125; &#125; &#125;,&#125;;#endif[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# [root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# makegcc -DHAVE_OFFSET64_T -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE=1 -D_LARGEFILE_SOURCE=1 -Wall -O3 -g -I include -I mysql-source/include -I mysql-source/innobase/include -c tables_dict.c -o lib/tables_dict.ogcc -DHAVE_OFFSET64_T -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE=1 -D_LARGEFILE_SOURCE=1 -Wall -O3 -g -I include -I mysql-source/include -I mysql-source/innobase/include -c check_data.c -o lib/check_data.ogcc -DHAVE_OFFSET64_T -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE=1 -D_LARGEFILE_SOURCE=1 -Wall -O3 -g -I include -I mysql-source/include -I mysql-source/innobase/include -o constraints_parser constraints_parser.c lib/tables_dict.o lib/print_data.o lib/check_data.o lib/libut.a lib/libmystrings.agcc -DHAVE_OFFSET64_T -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE=1 -D_LARGEFILE_SOURCE=1 -Wall -O3 -g -I include -I mysql-source/include -I mysql-source/innobase/include -static -lrt -o page_parser page_parser.c lib/tables_dict.o lib/libut.a [root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# makegcc -DHAVE_OFFSET64_T -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE=1 -D_LARGEFILE_SOURCE=1 -Wall -O3 -g -I include -I mysql-source/include -I mysql-source/innobase/include -c tables_dict.c -o lib/tables_dict.ogcc -DHAVE_OFFSET64_T -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE=1 -D_LARGEFILE_SOURCE=1 -Wall -O3 -g -I include -I mysql-source/include -I mysql-source/innobase/include -c print_data.c -o lib/print_data.o gcc -DHAVE_OFFSET64_T -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE=1 -D_LARGEFILE_SOURCE=1 -Wall -O3 -g -I include -I mysql-source/include -I mysql-source/innobase/include -o constraints_parser constraints_parser.c lib/tables_dict.o lib/print_data.o lib/check_data.o lib/libut.a lib/libmystrings.agcc -DHAVE_OFFSET64_T -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE=1 -D_LARGEFILE_SOURCE=1 -Wall -O3 -g -I include -I mysql-source/include -I mysql-source/innobase/include -static -lrt -o page_parser page_parser.c lib/tables_dict.o lib/libut.a 上面的命令会将t222表的表定义传入到table_defs.h中，在生成了表结构定义后，重新make该恢复工具 注意：需要make 2次 开始提取page中删除的数据123456789101112131415[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# ./constraints_parser -5 -f pages-1500258331/FIL_PAGE_INDEX/0-20/ &gt; /tmp/0_t222.sql LOAD DATA INFILE '/usr/src/percona-data-recovery-tool-for-innodb-0.5/dumps/default/t222' REPLACE INTO TABLE `t222` FIELDS TERMINATED BY '\t' OPTIONALLY ENCLOSED BY '"' LINES STARTING BY 't222\t' (id, name, age);[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# cat /tmp/0_t222.sql |wc -l2048[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# head -10 /tmp/0_t222.sql t222 1145 "jiessie" 18t222 1146 "jiessie" 18t222 1147 "jiessie" 18t222 1148 "jiessie" 18t222 1149 "jiessie" 18t222 1150 "jiessie" 18t222 1151 "jiessie" 18t222 1152 "jiessie" 18t222 1153 "jiessie" 18t222 1154 "jiessie" 18 从结果上来看，数据重复了一份，通过load data导入只导入一份正常的数据参数解释：-5 -f的参数和page_parser相同，代表 row format为Compact ；-D:该参数的含义为代表恢复删除的数据页； 恢复数据使用上面constraints_parser执行后的load data导入数据，需要注意目录123456789101112131415161718192021222324252627282930313233343536373839404142434445[root@iZuf6c08fdv8duubho2b0rZ percona-data-recovery-tool-for-innodb-0.5]# mysql -uroot -p123456Warning: Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 108Server version: 5.6.36-82.0-log Source distributionCopyright (c) 2009-2017 Percona LLC and/or its affiliatesCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [(none)] 10:28:16 &gt; use test111;Database changedMySQL [test111] 10:28:20 &gt; LOAD DATA INFILE '/tmp/0_t222.sql' REPLACE INTO TABLE `t222` FIELDS TERMINATED BY '\t' OPTIONALLY ENCLOSED BY '"' LINES STARTING BY 't222\t' (id, name, age);Query OK, 2048 rows affected (0.01 sec)Records: 2048 Deleted: 0 Skipped: 0 Warnings: 0MySQL [test111] 10:28:39 &gt; select count(*) from t222;+----------+| count(*) |+----------+| 1024 |+----------+1 row in set (0.00 sec)MySQL [test111] 10:28:44 &gt; select * from t222 limit 10;+----+---------+------+| id | name | age |+----+---------+------+| 1 | jiessie | 18 || 2 | jiessie | 18 || 3 | jiessie | 18 || 4 | jiessie | 18 || 6 | jiessie | 18 || 7 | jiessie | 18 || 8 | jiessie | 18 || 9 | jiessie | 18 || 13 | jiessie | 18 || 14 | jiessie | 18 |+----+---------+------+10 rows in set (0.00 sec) 从结果看，数据恢复完成 结束语Percona Data Recovery Tool for InnoDB工具并不保证100%能够恢复数据，而且会存在丢失数据的现象，特别是当发生误删除后，数据文件并没有第一时间保存起来，而导致了被重写。truncate操作在此不做演示，建议还是做好备份恢复工作，并做日常的演练。]]></content>
      <categories>
        <category>备份恢复</category>
      </categories>
      <tags>
        <tag>percona</tag>
        <tag>innodb</tag>
        <tag>recovery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[percona server 5.6 自制rpm包]]></title>
    <url>%2Fpercona-server-5-6-%E8%87%AA%E5%88%B6rpm%E5%8C%85.html</url>
    <content type="text"><![CDATA[前言RPM是Red-hat系统的软件管理工具，目前，RPM已发展成为业界认可的Linux系统软件工具。RPM制作灵活方便，在安装、升级、卸载等方面有着显著的优点。mysql通过自制RPM包方式，可以缩短编译安装时间，简化安装过程，自定义数据库配置，非常灵活方便，可以极大的提升效率。123456优点：RPM内含已编译过的程序与设置文件等数据，可以让用户免除重新编译的困扰。RPM在被安装之前，会先检查系统的硬盘容量、操作系统版本等，可避免文件被错误安装。RPM文件本身提供软件版本信息、依赖属性软件名称、软件用途说明、软件所含文件信息，便于了解软件。RPM管理的方式使用数据库记录RPM文件的相关参数，便于升级、删除、查询与验证。详情请参考：http://rpm.org/documentation.html 准备操作系统：centos 6.5 x86_64构建工具：rpmbuild RPM常用命令列出已安装的RPM包列出系统中已安装的全部RPM包1234567891011[root@iZuf6c08fdv8duubho2b0rZ ~]# rpm -qa|head -10 #由于包太多，用head过滤了前10条glib2-2.28.8-5.el6.x86_64gnome-icon-theme-2.28.0-8.el6.noarchbind-libs-9.8.2-0.23.rc1.el6_5.1.x86_64mhash-0.9.9.9-3.el6.x86_64libreport-2.0.9-19.el6.centos.x86_64libcroco-0.6.2-5.el6.x86_64libcap-2.16-5.5.el6.x86_64libxml2-python-2.7.6-21.el6_8.1.x86_64abrt-addon-kerneloops-2.0.8-21.el6.centos.x86_64libasyncns-0.8-1.1.el6.x86_64 列出系统中以mysql开头的RPM包12345[root@iZuf6c08fdv8duubho2b0rZ ~]# rpm -qa "mysql*"mysql-community-libs-5.7.16-1.el6.x86_64mysql-libs-5.1.73-3.el6_5.x86_64mysql-devel-5.1.73-8.el6_8.x86_64mysql-5.7.17-1.el6.x86_64 列出系统中包括mysql关键字的RPM包12345678[root@iZuf6c08fdv8duubho2b0rZ ~]# rpm -qa|grep "mysql" php56w-mysql-5.6.30-1.w6.x86_64mysql-community-libs-5.7.16-1.el6.x86_64zabbix-server-mysql-3.0.9-1.el6.x86_64mysql-libs-5.1.73-3.el6_5.x86_64mysql-devel-5.1.73-8.el6_8.x86_64mysql-5.7.17-1.el6.x86_64zabbix-web-mysql-3.0.9-1.el6.noarch 列出系统中近期安装的RPM包1234567891011[root@iZuf6c08fdv8duubho2b0rZ ~]# rpm -qa --last | head tree-1.5.3-3.el6.x86_64 2017年07月13日 星期四 09时35分13秒git-1.7.1-8.el6.x86_64 2017年07月12日 星期三 10时29分20秒perl-Git-1.7.1-8.el6.noarch 2017年07月12日 星期三 10时29分19秒elfutils-0.164-2.el6.x86_64 2017年07月11日 星期二 10时30分26秒perf-2.6.32-696.3.2.el6.x86_64 2017年07月11日 星期二 10时30分25秒elfutils-libs-0.164-2.el6.x86_64 2017年07月11日 星期二 10时30分25秒elfutils-libelf-0.164-2.el6.x86_64 2017年07月11日 星期二 10时30分25秒pmm-client-1.1.6-1.x86_64 2017年07月10日 星期一 16时58分04秒gcc-gfortran-4.4.7-18.el6.x86_64 2017年07月06日 星期四 15时40分43秒gcc-c++-4.4.7-18.el6.x86_64 2017年07月06日 星期四 15时40分43秒 查找特定RPM包查找某RPM包是否安装12345678[root@iZuf6c08fdv8duubho2b0rZ ~]# rpm -q mysql-serverpackage mysql-server is not installed[root@iZuf6c08fdv8duubho2b0rZ ~]# [root@iZuf6c08fdv8duubho2b0rZ ~]# rpm -q zabbixpackage zabbix is not installed[root@iZuf6c08fdv8duubho2b0rZ ~]# [root@iZuf6c08fdv8duubho2b0rZ ~]# rpm -q gccgcc-4.4.7-18.el6.x86_64 查找某RPM包的基本信息123456789101112131415161718[root@iZuf6c08fdv8duubho2b0rZ ~]# rpm -q percona-serverpercona-server-5.6.36-82.0.x86_64[root@iZuf6c08fdv8duubho2b0rZ ~]# [root@iZuf6c08fdv8duubho2b0rZ ~]# rpm -qi percona-serverName : percona-server Relocations: /usr/local/percona Version : 5.6.36 Vendor: JiessieRelease : 82.0 Build Date: 2017年06月20日 星期二 13时08分20秒Install Date: 2017年06月20日 星期二 13时42分36秒 Build Host: iZuf6c08fdv8duubho2b0rZGroup : applications/database Source RPM: percona-server-5.6.36-82.0.src.rpmSize : 460543421 License: GPLSignature : (none)Packager : dwj999@163.comURL : https://www.percona.com/downloads/Percona-Server-5.6/Percona-Server-5.6.36-82.0/source/tarball/percona-server-5.6.36-82.0.tar.gzSummary : percona-server-5.6.36-82.0Description :Percona Server is an enhanced, drop-in MySQL® replacement which has been downloaded more than 1,000,000 times.A free open source solution, Percona Server is a MySQL alternative which offers breakthrough performance, scalability, features, and instrumentation. Self-tuning algorithms and support for extremely high-performance hardware make it the clear choice for organizations that demand excellent performance and reliability from their MySQL database server.[root@iZuf6c08fdv8duubho2b0rZ ~]# 查找某RPM包的配置信息12345678910111213141516171819202122232425262728[root@iZuf6c08fdv8duubho2b0rZ ~]# rpm -qc httpd/etc/httpd/conf.d/welcome.conf/etc/httpd/conf/httpd.conf/etc/httpd/conf/magic/etc/logrotate.d/httpd/etc/sysconfig/htcacheclean/etc/sysconfig/httpd/var/www/error/HTTP_BAD_GATEWAY.html.var/var/www/error/HTTP_BAD_REQUEST.html.var/var/www/error/HTTP_FORBIDDEN.html.var/var/www/error/HTTP_GONE.html.var/var/www/error/HTTP_INTERNAL_SERVER_ERROR.html.var/var/www/error/HTTP_LENGTH_REQUIRED.html.var/var/www/error/HTTP_METHOD_NOT_ALLOWED.html.var/var/www/error/HTTP_NOT_FOUND.html.var/var/www/error/HTTP_NOT_IMPLEMENTED.html.var/var/www/error/HTTP_PRECONDITION_FAILED.html.var/var/www/error/HTTP_REQUEST_ENTITY_TOO_LARGE.html.var/var/www/error/HTTP_REQUEST_TIME_OUT.html.var/var/www/error/HTTP_REQUEST_URI_TOO_LARGE.html.var/var/www/error/HTTP_SERVICE_UNAVAILABLE.html.var/var/www/error/HTTP_UNAUTHORIZED.html.var/var/www/error/HTTP_UNSUPPORTED_MEDIA_TYPE.html.var/var/www/error/HTTP_VARIANT_ALSO_VARIES.html.var/var/www/error/contact.html.var/var/www/error/include/bottom.html/var/www/error/include/spacer.html/var/www/error/include/top.html 查找某RPM包的文档信息123456789101112[root@iZuf6c08fdv8duubho2b0rZ ~]# rpm -qd httpd/usr/share/doc/httpd-2.2.15/ABOUT_APACHE/usr/share/doc/httpd-2.2.15/CHANGES/usr/share/doc/httpd-2.2.15/LICENSE/usr/share/doc/httpd-2.2.15/NOTICE/usr/share/doc/httpd-2.2.15/README/usr/share/doc/httpd-2.2.15/VERSIONING/usr/share/man/man8/apachectl.8.gz/usr/share/man/man8/htcacheclean.8.gz/usr/share/man/man8/httpd.8.gz/usr/share/man/man8/rotatelogs.8.gz/usr/share/man/man8/suexec.8.gz 查找某RPM包的状态1234567891011121314151617181920212223242526[root@iZuf6c08fdv8duubho2b0rZ ~]# rpm -qs rsyncnormal /etc/xinetd.d/rsyncnormal /usr/bin/rsyncnormal /usr/share/doc/rsync-3.0.6normal /usr/share/doc/rsync-3.0.6/COPYINGnormal /usr/share/doc/rsync-3.0.6/NEWSnormal /usr/share/doc/rsync-3.0.6/OLDNEWSnormal /usr/share/doc/rsync-3.0.6/READMEnormal /usr/share/doc/rsync-3.0.6/supportnormal /usr/share/doc/rsync-3.0.6/support/Makefilenormal /usr/share/doc/rsync-3.0.6/support/atomic-rsyncnormal /usr/share/doc/rsync-3.0.6/support/cvs2includesnormal /usr/share/doc/rsync-3.0.6/support/deny-rsyncnormal /usr/share/doc/rsync-3.0.6/support/file-attr-restorenormal /usr/share/doc/rsync-3.0.6/support/files-to-excludesnormal /usr/share/doc/rsync-3.0.6/support/git-set-file-timesnormal /usr/share/doc/rsync-3.0.6/support/logfilternormal /usr/share/doc/rsync-3.0.6/support/lshnormal /usr/share/doc/rsync-3.0.6/support/mnt-exclnormal /usr/share/doc/rsync-3.0.6/support/munge-symlinksnormal /usr/share/doc/rsync-3.0.6/support/rrsyncnormal /usr/share/doc/rsync-3.0.6/support/rsyncstatsnormal /usr/share/doc/rsync-3.0.6/support/savetransfer.cnormal /usr/share/doc/rsync-3.0.6/tech_report.texnormal /usr/share/man/man1/rsync.1.gznormal /usr/share/man/man5/rsyncd.conf.5.gz RPM包的状态 状态 说明 Normal 正常，表明文件未被其他软件包修改过 not installed 未安装，表明文件未安装 Replaced 已替换，表明文件已被其他软件包修改替换过，不再是原先的文件 net shared 网络共享，表明文件处于网络共享状态 查找某RPM包的所有文件1234567891011121314151617181920212223242526[root@iZuf6c08fdv8duubho2b0rZ ~]# rpm -ql rsync/etc/xinetd.d/rsync/usr/bin/rsync/usr/share/doc/rsync-3.0.6/usr/share/doc/rsync-3.0.6/COPYING/usr/share/doc/rsync-3.0.6/NEWS/usr/share/doc/rsync-3.0.6/OLDNEWS/usr/share/doc/rsync-3.0.6/README/usr/share/doc/rsync-3.0.6/support/usr/share/doc/rsync-3.0.6/support/Makefile/usr/share/doc/rsync-3.0.6/support/atomic-rsync/usr/share/doc/rsync-3.0.6/support/cvs2includes/usr/share/doc/rsync-3.0.6/support/deny-rsync/usr/share/doc/rsync-3.0.6/support/file-attr-restore/usr/share/doc/rsync-3.0.6/support/files-to-excludes/usr/share/doc/rsync-3.0.6/support/git-set-file-times/usr/share/doc/rsync-3.0.6/support/logfilter/usr/share/doc/rsync-3.0.6/support/lsh/usr/share/doc/rsync-3.0.6/support/mnt-excl/usr/share/doc/rsync-3.0.6/support/munge-symlinks/usr/share/doc/rsync-3.0.6/support/rrsync/usr/share/doc/rsync-3.0.6/support/rsyncstats/usr/share/doc/rsync-3.0.6/support/savetransfer.c/usr/share/doc/rsync-3.0.6/tech_report.tex/usr/share/man/man1/rsync.1.gz/usr/share/man/man5/rsyncd.conf.5.gz 查找某RPM包的安装、卸载前后的脚本12345678910111213141516171819202122[root@iZuf6c08fdv8duubho2b0rZ ~]# rpm -q --scripts httpd preinstall scriptlet (using /bin/sh):# Add the "apache" usergetent group apache &gt;/dev/null || groupadd -g 48 -r apachegetent passwd apache &gt;/dev/null || \ useradd -r -u 48 -g apache -s /sbin/nologin \ -d /var/www -c "Apache" apacheexit 0postinstall scriptlet (using /bin/sh):# Register the httpd service/sbin/chkconfig --add httpd/sbin/chkconfig --add htcachecleanpreuninstall scriptlet (using /bin/sh):if [ $1 = 0 ]; then /sbin/service httpd stop &gt; /dev/null 2&gt;&amp;1 /sbin/chkconfig --del httpd /sbin/service htcacheclean stop &gt; /dev/null 2&gt;&amp;1 /sbin/chkconfig --del htcachecleanfiposttrans scriptlet (using /bin/sh):test -f /etc/sysconfig/httpd-disable-posttrans || \ /sbin/service httpd condrestart &gt;/dev/null 2&gt;&amp;1 || : 查找某RPM包的修改历史1234567891011[root@iZuf6c08fdv8duubho2b0rZ ~]# rpm -q --changelog python |head -10* 二 8月 09 2016 Charalampos Stratakis &lt;cstratak@redhat.com&gt; - 2.6.6-66- Fix for CVE-2016-1000110 HTTPoxy attackResolves: rhbz#1359161* 二 6月 21 2016 Tomas Orsava &lt;torsava@redhat.com&gt; - 2.6.6-65- Fix for CVE-2016-0772 python: smtplib StartTLS stripping attack (rhbz#1303647) Raise an error when STARTTLS fails (upstream patch)- Fix for CVE-2016-5699 python: http protocol steam injection attack (rhbz#1303699) Disabled HTTP header injections in httplib (upstream patch)Resolves: rhbz#1346354 查找某个组群里的RPM包123456789101112131415161718192021[root@iZuf6c08fdv8duubho2b0rZ ~]# rpm -qg Applications/Databases db4-utils-4.7.25-18.el6_4.x86_64mysql-libs-5.1.73-3.el6_5.x86_64percona-xtrabackup-2.3.6-1.el6.x86_64Percona-Server-client-51-5.1.73-rel14.12.624.rhel6.x86_64rh-postgresql95-postgresql-libs-9.5.4-1.el6.x86_64postgresql95-libs-9.5.5-1PGDG.rhel6.x86_64postgresql95-9.5.5-1PGDG.rhel6.x86_64postgresql95-contrib-9.5.5-1PGDG.rhel6.x86_64postgresql95-server-9.5.5-1PGDG.rhel6.x86_64sqlite-3.6.20-1.el6_7.2.x86_64mongodb-2.4.14-4.el6.x86_64mongodb-server-2.4.14-4.el6.x86_64mysql-devel-5.1.73-8.el6_8.x86_64innotop-1.11.4-1.el6.noarchPercona-Server-shared-56-5.6.35-rel80.0.el6.x86_64mysql-community-libs-5.7.16-1.el6.x86_64redis-2.4.10-1.el6.x86_64percona-toolkit-3.0.3-1.el6.x86_64percona-zabbix-templates-1.1.7-2.noarchpmm-client-1.1.6-1.x86_64 通常，RPM 可以分为这几大类：娱乐（Amusement）、开发（Development）、文档（Document）、硬件（Hardware）、综合包（Metapackages）、多媒体（Multimedia）、生产力（Productivity）和系统（System）。 查询特定RPM包依赖查询RPM包依赖1234567891011[root@iZuf6c08fdv8duubho2b0rZ ~]# rpm -q --requires percona-servercoreutils shadow-utils /bin/sh /bin/sh /bin/sh /bin/sh rpmlib(FileDigests) &lt;= 4.6.0-1rpmlib(PayloadFilesHavePrefix) &lt;= 4.0-1rpmlib(CompressedFileNames) &lt;= 3.0.4-1rpmlib(PayloadIsXz) &lt;= 5.2-1 查询RPM包提供12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455[root@iZuf6c08fdv8duubho2b0rZ ~]# rpm -q --provides percona-serveradt_null.so()(64bit) audit_log.so()(64bit) auth.so()(64bit) auth_socket.so()(64bit) auth_test_plugin.so()(64bit) connection_control.so()(64bit) ha_tokudb.so()(64bit) handlersocket.so()(64bit) innodb_engine.so()(64bit) libHotBackup.so()(64bit) libdaemon_example.so()(64bit) libfnv1a_udf.so()(64bit) libfnv_udf.so()(64bit) libmemcached.so()(64bit) libmurmur_udf.so()(64bit) libperconaserverclient.so.18()(64bit) libperconaserverclient.so.18(libperconaserverclient_18)(64bit) mypluglib.so()(64bit) mysql_no_login.so()(64bit) perl(My::Config) perl(My::Config::Group) perl(My::Config::Option) perl(My::ConfigFactory) perl(My::CoreDump) perl(My::Exec) perl(My::File::Path) perl(My::Find) perl(My::Handles) perl(My::Memcache) perl(My::Memcache::Binary) perl(My::Options) perl(My::Platform) perl(My::SafeProcess) perl(My::SafeProcess::Base) perl(My::Suite::Query_response_time) perl(My::SysInfo) perl(My::Test) perl(Subunit) = 0.0.2perl(mtr_cases) perl(mtr_match) perl(mtr_report) perl(mtr_results) perl(mtr_unique) qa_auth_client.so()(64bit) qa_auth_interface.so()(64bit) qa_auth_server.so()(64bit) query_response_time.so()(64bit) semisync_master.so()(64bit) semisync_slave.so()(64bit) test_udf_services.so()(64bit) tokudb_backup.so()(64bit) validate_password.so()(64bit) percona-server = 5.6.36-82.0percona-server(x86-64) = 5.6.36-82.0 查询某依赖的RPM包123[root@iZuf6c08fdv8duubho2b0rZ ~]# rpm -q --whatrequires openssl postfix-2.6.6-6.el6_5.x86_64openssl-devel-1.0.1e-48.el6_8.4.x86_64 RPM包的验证验证某个RPM包状态123456[root@iZuf6c08fdv8duubho2b0rZ ~]# rpm -V percona-servermissing /usr/local/percona/datamissing /usr/local/percona/data/testmissing /usr/local/percona/data/test/db.optmissing /usr/local/percona/my.cnf此处由于自定义了RPM包，配置文件和数据目录转移了，显示missing RPM包的备份与恢复RPM的Database文件存放在/var/lib/rpm目录。除了 __db.00* 是数据文件外，其他文件都属于 Berkeley DB 格式,所以要注意备份此目录。 RPM延伸其他高级用法，请参考：https://docs.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/RPM_Guide/index.html 安装依赖1yum -y install rpm-build readline-devel redhat-rpm-config gcc gcc-c++ cmake make zlib-devel openssl-devel perl libtool automake autoconf time ccache bison libaio-devel gperf 创建用户及配置创建用户12useradd jiessie su - jiessie 创建目录12mkdir -p ~/rpmbuild/&#123;BUILD,RPMS,SOURCES,SPECS,SRPMS&#125; echo '%_topdir /home/jiessie/rpmbuild' &gt; ~/.rpmmacros RPMBUILD目录结构123456789[root@iZuf6c08fdv8duubho2b0rZ jiessie]# tree rpmbuild/rpmbuild/├── BUILD #编译生成的临时文件├── RPMS #RPM包存放目录├── SOURCES #源码存放目录├── SPECS #SPEC文件目录└── SRPMS #SRC RPM包存放目录5 directories, 0 files 编写SPEC文件详情，请参考：https://fedoraproject.org/wiki/How_to_create_an_RPM_package/zh-cn#.25prep_.E9.83.A8.E5.88.86123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130-bash-4.1$ cat percona.5.6.36.spec Name: percona-server #软件包名Version:5.6.36 #版本号Release: 82.0 #发布序列号License: GPL #软件授权方式 Vendor: Jiessie #作者信息 Group: applications/database #软件包所属类别URL: https://www.percona.com/downloads/Percona-Server-5.6/Percona-Server-5.6.36-82.0/source/tarball/percona-server-5.6.36-82.0.tar.gz #软件的项目主页BuildRoot: %&#123;_tmppath&#125;/%&#123;name&#125;-%&#123;version&#125;-%&#123;release&#125;-root #安装或编译时使用的虚拟目录，在生成rpm的过程中，执行make install时就会把软件安装到该路径中，默认构建根目录为%&#123;_topdir&#125;/BUILDROOT，可以用$RPM_BUILD_ROOT方式引用BuildRequires: cmake #编译过程中需要的包列表Requires: coreutils,shadow-utils #程序安装时需要的包列表Packager: dwj999@163.com #打包者信息Autoreq: noSource: percona-server-5.6.36-82.0.tar.gz #源代码包prefix: /usr/local/percona #rpm包安装的路径Summary: percona-server-5.6.36-82.0 #一行简短的软件包介绍%description #软件包详细说明，可写在多个行上Percona Server is an enhanced, drop-in MySQL® replacement which has been downloaded more than 1,000,000 times.A free open source solution, Percona Server is a MySQL alternative which offers breakthrough performance, scalability, features, and instrumentation. Self-tuning algorithms and support for extremely high-performance hardware make it the clear choice for organizations that demand excellent performance and reliability from their MySQL database server.%define MYSQL_USER mysql #定义的MYSQL_USER变量%define MYSQL_GROUP mysql #定义的MYSQL_GROUP变量%define __os_install_post %&#123;nil&#125;%prep #这个段是预处理段，通常用来执行一些解开源程序包的命令，为下一步的编译安装作准备。读取位于%_sourcedir(~/rpmbuild/SOURCES)目录的源代码和patch，随后会解压源代码至%_builddir(~/rpmbuild/BUILD)下的子目录并应用所有patch，描述解压源代码的方法，包含%setup和%patch命令%setup -q -n %&#123;name&#125;-%&#123;version&#125;-%&#123;release&#125; #-q不输出信息，-n解压到指定目录中%build #包含构建阶段执行的命令，构建完成后便开始后续安装CFLAGS="-O3 -g -static-libgcc -fno-omit-frame-pointer -fno-strict-aliasing"CXX=g++CXXFLAGS="-O3 -g -fno-rtti -static-libgcc -fno-omit-frame-pointer -fno-strict-aliasing"export CFLAGS CXX CXXFLAGScmake . \ -DSYSCONFDIR:PATH=%&#123;prefix&#125; \ -DCMAKE_INSTALL_PREFIX:PATH=%&#123;prefix&#125; \ -DCMAKE_BUILD_TYPE:STRING=Release \ -DENABLE_PROFILING:BOOL=ON \ -DWITH_DEBUG:BOOL=OFF \ -DWITH_VALGRIND:BOOL=OFF \ -DENABLE_DEBUG_SYNC:BOOL=OFF \ -DWITH_EXTRA_CHARSETS:STRING=all \ -DWITH_SSL:STRING=bundled \ -DWITH_UNIT_TESTS:BOOL=OFF \ -DWITH_ZLIB:STRING=bundled \ -DWITH_PARTITION_STORAGE_ENGINE:BOOL=ON \ -DWITH_INNOBASE_STORAGE_ENGINE:BOOL=ON \ -DWITH_TOKUDB_STORAGE_ENGINE:BOOL=ON \ -DWITH_ARCHIVE_STORAGE_ENGINE:BOOL=ON \ -DWITH_BLACKHOLE_STORAGE_ENGINE:BOOL=ON \ -DWITH_PERFSCHEMA_STORAGE_ENGINE:BOOL=ON \ -DDEFAULT_CHARSET=utf8mb4 \ -DDEFAULT_COLLATION=utf8mb4_general_ci \ -DENABLED_LOCAL_INFILE:BOOL=ON \ -DWITH_EMBEDDED_SERVER=0 \ -DINSTALL_LAYOUT:STRING=STANDALONE \ -DCOMMUNITY_BUILD:BOOL=ON \ -DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \ -DWITHOUT_NDBCLUSTER_STORAGE_ENGINE=1 \ -DENABLED_PROFILING=1 \ -DINNODB_PAGE_ATOMIC_REF_COUNT=1 \ -DWITH_INNODB_MEMCACHED=1;make -j `cat /proc/cpuinfo | grep processor| wc -l`%install #包含安装阶段执行的命令。命令将文件从 %&#123;_builddir&#125; 目录安装至 %&#123;buildroot&#125; 目录make DESTDIR=$RPM_BUILD_ROOT installcp %&#123;_sourcedir&#125;/my.cnf $RPM_BUILD_ROOT%&#123;prefix&#125;/ #拷贝模板配置文件,下文会介绍配置文件%clean #清理安装目录的命令rm -rf $RPM_BUILD_ROOTrm -rf $RPM_BUILD_DIR/*%files #需要被打包/安装的文件列表%defattr(-, %&#123;MYSQL_USER&#125;, %&#123;MYSQL_GROUP&#125;) #设置默认文件权限格式%defattr(&lt;file permissions&gt;, &lt;user&gt;, &lt;group&gt;, &lt;directory permissions&gt;)，-使用默认的权限，文本文件是0644，可执行文件是0755%attr(755, %&#123;MYSQL_USER&#125;, %&#123;MYSQL_GROUP&#125;) %&#123;prefix&#125;/* %pre #软件安装之前执行的脚本if ! id %&#123;MYSQL_USER&#125; &gt; /dev/null 2&gt;&amp;1;thenuseradd -M -s /sbin/nologin %&#123;MYSQL_USER&#125; #创建MySQL用户fi%post #软件安装之后执行的脚本if [ -f %&#123;prefix&#125;/support-files/mysql.server &gt; /dev/null 2&gt;&amp;1 ] &amp;&amp; [ ! -f %&#123;_initddir&#125;/mysql &gt; /dev/null 2&gt;&amp;1 ];thencp %&#123;prefix&#125;/support-files/mysql.server %&#123;_initddir&#125;/mysqld #拷贝启动脚本chmod +x %&#123;_initddir&#125;/mysqld #添加启动脚本执行权限chkconfig --level 2345 %&#123;_initddir&#125;/mysqld on #添加到系统启动服务中fiif [ ! -f %&#123;_sysconfdir&#125;/my.cnf ];thencp %&#123;prefix&#125;/my.cnf %&#123;_sysconfdir&#125;/my.cnf #拷贝配置文件elsecp %&#123;prefix&#125;/my.cnf %&#123;_sysconfdir&#125;/my.cnf.rpmnew #如存在文件，则重命名fimkdir -p /hwdata/data/percona #创建数据目录chown -R mysql:mysql /hwdata/data/percona #授权数据目录rm -rf %&#123;prefix&#125;/my.cnf #删除prefix目录的my.cnfrm -rf %&#123;prefix&#125;/data #删除prefix目录的data目录%&#123;prefix&#125;/scripts/mysql_install_db --rpm --user=mysql --basedir=%&#123;prefix&#125; #初始化安装 --datadir=/hwdata/data/percona/etc/init.d/mysqld start #开启MySQL服务%&#123;prefix&#125;/bin/mysqladmin -uroot password '123456'%&#123;prefix&#125;/bin/mysql -uroot -p123456 -e "grant all privileges on *.* to root@'127.0.0.1' identified by '123456' with grant option;"%&#123;prefix&#125;/bin/mysql -uroot -p123456 -e "grant all privileges on *.* to root@'localhost' identified by '123456' with grant option;"%&#123;prefix&#125;/bin/mysql -uroot -p123456 -e "delete from mysql.user where Password='';"%&#123;prefix&#125;/bin/mysql -uroot -p123456 -e "delete from mysql.db where User='';"%&#123;prefix&#125;/bin/mysql -uroot -p123456 -e "delete from mysql.proxies_priv where Host!='localhost';"%&#123;prefix&#125;/bin/mysql -uroot -p123456 -e "drop database test;"%&#123;prefix&#125;/bin/mysql -uroot -p123456 -e "reset master;"echo "PATH=/usr/local/percona/bin/:$PATH:$HOME/bin" &gt;&gt; /etc/profile #添加环境变量echo "export PATH" &gt;&gt; /etc/profile source /etc/profile #环境变量生效%preun #rpm卸载前执行的脚本，在升级的时候会执行if [ -f %&#123;_sysconfdir&#125;/my.cnf ];thenmv %&#123;_sysconfdir&#125;/my.cnf %&#123;_sysconfdir&#125;/my.cnf.rpmoldfiif [ -f %&#123;_initddir&#125;/mysql ];thenmv %&#123;_initddir&#125;/mysql %&#123;_initddir&#125;/mysql.rpmoldfi%postun #rpm卸载后执行的脚本，在升级rpm包的时候不会执行rm -rf %&#123;prefix&#125;rm -rf /hwdata/data/percona userdel -r %&#123;MYSQL_USER&#125; &gt;/dev/null 2&gt;&amp;1%changelog #RPM 包变更日志 MySQL模板文件(my.cnf)以下为my.cnf配置模板文件，不做过多解释，请参考：https://dev.mysql.com/doc/refman/5.6/en/option-files.html123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144-bash-4.1$ cat my.cnf [client]port = 3306socket = /tmp/mysql.sockdefault-character-set = utf8[mysql]#prompt="MySQL [\d]&gt; "prompt="MySQL [\d] \R:\m:\\s &gt; "no-auto-rehash[mysqld]# basic setting #port = 3306socket = /tmp/mysql.sockbasedir = /usr/local/perconadatadir = /hwdata/data/perconapid-file = /hwdata/data/percona/mysql.piduser = mysqlbind-address = 0.0.0.0server-id = 1autocommit = 1auto_increment_increment = 1auto_increment_offset = 1event_scheduler = 1 #slave need off#read_only=ON #slave need onskip-name-resolveskip-external-lockingtransaction_isolation = READ-COMMITTEDinit-connect = 'SET NAMES utf8'character-set-server = utf8query_cache_size = 0query_cache_type = 0max_connections = 2000max_connect_errors = 100000max_length_for_sort_data = 8192max_allowed_packet = 32Mmax_heap_table_size = 128Mtmp_table_size = 128Mopen_files_limit = 65535table_open_cache = 1024table_definition_cache = 2048table_open_cache = 1024read_buffer_size = 4Mread_rnd_buffer_size = 8Msort_buffer_size = 4Mjoin_buffer_size = 16Mkey_buffer_size = 256Mback_log = 300expire_logs_days = 7log_error = /hwdata/data/percona/mysql-error.loglog_bin = mysql-binlog_warnings = 2log_queries_not_using_indexes = 1binlog_format = ROWslow_query_log = 1slow_query_log_file = /hwdata/data/percona/mysql-slow.loglong_query_time = 1log_slow_rate_limit=100log_slow_rate_type=querylog_slow_verbosity=fullslow_query_log_always_write_time=1slow_query_log_use_global_control=alllog_slow_admin_statements = 1log_slow_slave_statements = 1log_throttle_queries_not_using_indexes = 10min_examined_row_limit = 100binlog-rows-query-log-events = 1log-bin-trust-function-creators = 1binlog_cache_size = 1Muserstat=1performance_schema = 0#lower_case_table_names = 1default_storage_engine = InnoDBinnodb_page_size = 16384innodb_data_file_path = ibdata1:1024M:autoextendinnodb_file_per_table = 1innodb_open_files = 1024innodb_buffer_pool_size = 4096Minnodb_buffer_pool_instances = 8innodb_buffer_pool_load_at_startup = 1innodb_buffer_pool_dump_at_shutdown = 1innodb_write_io_threads = 8innodb_read_io_threads = 8innodb_io_capacity = 4000innodb_io_capacity_max = 8000innodb_lru_scan_depth = 4000innodb_thread_concurrency = 0innodb_purge_threads = 1innodb_flush_log_at_trx_commit = 2innodb_flush_method=O_DIRECTinnodb_file_format = Barracudainnodb_file_format_max = Barracudainnodb_undo_logs = 128innodb_undo_tablespaces = 3innodb_log_buffer_size = 16Minnodb_log_file_size = 1536Minnodb_log_files_in_group = 3innodb_max_dirty_pages_pct = 75innodb_lock_wait_timeout = 120innodb_large_prefix = 1innodb_print_all_deadlocks = 1innodb_autoinc_lock_mode = 2innodb_online_alter_log_max_size=1Ginnodb_sync_spin_loops = 100innodb_spin_wait_delay = 30metadata_locks_hash_instances = 8gtid_mode = onenforce_gtid_consistency = 1log_slave_updatesslave_skip_errors = ddl_exist_errorsslave-rows-search-algorithms = 'INDEX_SCAN,HASH_SCAN'slave_net_timeout = 60master_info_repository = TABLErelay_log_info_repository = TABLEthread_cache_size = 64thread_handling = pool-of-threadsthread_pool_oversubscribe = 10bulk_insert_buffer_size = 8Mmyisam_sort_buffer_size = 64Mmyisam_max_sort_file_size = 10Gmyisam_repair_threads = 1interactive_timeout = 1800wait_timeout = 1800lock_wait_timeout = 1800[mysqldump]quickmax_allowed_packet = 16M[myisamchk]key_buffer_size = 256Msort_buffer_size = 8Mread_buffer = 4Mwrite_buffer = 4M-bash-4.1$ 上传源码文件及模板文件12345-bash-4.1$ ls -l rpmbuild/SOURCES/总用量 54808-rw-r--r-- 1 jiessie jiessie 3629 7月 14 10:22 my.cnf-rw-r--r-- 1 jiessie jiessie 56116691 7月 14 10:22 percona-server-5.6.36-82.0.tar.gz-bash-4.1$ 执行编译过程rpmbuild -bb percona.5.6.36.spec123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119-bash-4.1$ pwd/home/jiessie/rpmbuild/SPECS-bash-4.1$ rpmbuild -bb percona.5.6.36.spec Executing(%prep): /bin/sh -e /var/tmp/rpm-tmp.YmJTDn+ umask 022+ cd /home/jiessie/rpmbuild/BUILD+ LANG=C+ export LANG+ unset DISPLAY+ cd /home/jiessie/rpmbuild/BUILD+ rm -rf percona-server-5.6.36-82.0+ /usr/bin/gzip -dc /home/jiessie/rpmbuild/SOURCES/percona-server-5.6.36-82.0.tar.gz+ /bin/tar -xf -+ STATUS=0+ '[' 0 -ne 0 ']'+ cd percona-server-5.6.36-82.0+ /bin/chmod -Rf a+rX,u+w,g-w,o-w .+ exit 0Executing(%build): /bin/sh -e /var/tmp/rpm-tmp.vvnRcl+ umask 022+ cd /home/jiessie/rpmbuild/BUILD+ cd percona-server-5.6.36-82.0+ LANG=C+ export LANG+ unset DISPLAY+ CFLAGS='-O3 -g -static-libgcc -fno-omit-frame-pointer -fno-strict-aliasing'+ CXX=g+++ CXXFLAGS='-O3 -g -fno-rtti -static-libgcc -fno-omit-frame-pointer -fno-strict-aliasing'+ export CFLAGS CXX CXXFLAGS+ cmake . -DSYSCONFDIR:PATH=/usr/local/percona -DCMAKE_INSTALL_PREFIX:PATH=/usr/local/percona -DCMAKE_BUILD_TYPE:STRING=Release -DENABLE_PROFILING:BOOL=ON -DWITH_DEBUG:BOOL=OFF -DWITH_VALGRIND:BOOL=OFF -DENABLE_DEBUG_SYNC:BOOL=OFF -DWITH_EXTRA_CHARSETS:STRING=all -DWITH_SSL:STRING=bundled -DWITH_UNIT_TESTS:BOOL=OFF -DWITH_ZLIB:STRING=bundled -DWITH_PARTITION_STORAGE_ENGINE:BOOL=ON -DWITH_INNOBASE_STORAGE_ENGINE:BOOL=ON -DWITH_TOKUDB_STORAGE_ENGINE:BOOL=ON -DWITH_ARCHIVE_STORAGE_ENGINE:BOOL=ON -DWITH_BLACKHOLE_STORAGE_ENGINE:BOOL=ON -DWITH_PERFSCHEMA_STORAGE_ENGINE:BOOL=ON -DDEFAULT_CHARSET=utf8mb4 -DDEFAULT_COLLATION=utf8mb4_general_ci -DENABLED_LOCAL_INFILE:BOOL=ON -DWITH_EMBEDDED_SERVER=0 -DINSTALL_LAYOUT:STRING=STANDALONE -DCOMMUNITY_BUILD:BOOL=ON -DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 -DWITHOUT_NDBCLUSTER_STORAGE_ENGINE=1 -DENABLED_PROFILING=1 -DINNODB_PAGE_ATOMIC_REF_COUNT=1 -DWITH_INNODB_MEMCACHED=1-- Running cmake version 2.8.12.2-- Found Git: /usr/bin/git (found version "1.7.1") -- The C compiler identification is GNU 4.4.7-- The CXX compiler identification is GNU 4.4.7-- Check for working C compiler: /usr/bin/cc-- Check for working C compiler: /usr/bin/cc -- works-- Detecting C compiler ABI info-- Detecting C compiler ABI info - done-- Check for working CXX compiler: /usr/bin/g++-- Check for working CXX compiler: /usr/bin/g++ -- works-- Detecting CXX compiler ABI info-- Detecting CXX compiler ABI info - done-- ...省略部分...-- Not building tokudb-backup-plugin-- Library perconaserverclient depends on OSLIBS -lpthread;m;rt;dl-- Skipping deb packaging on unsupported platform Final.-- CMAKE_BUILD_TYPE: Release-- COMPILE_DEFINITIONS: HAVE_CONFIG_H-- CMAKE_C_FLAGS: -O3 -g -static-libgcc -fno-omit-frame-pointer -fno-strict-aliasing -Wall -Wextra -Wformat-security -Wvla -Wwrite-strings -Wdeclaration-after-statement-- CMAKE_CXX_FLAGS: -O3 -g -fno-rtti -static-libgcc -fno-omit-frame-pointer -fno-strict-aliasing -Wall -Wextra -Wformat-security -Wvla -Woverloaded-virtual -Wno-unused-parameter-- CMAKE_C_FLAGS_RELEASE: -O3 -DNDEBUG -DDBUG_OFF-- CMAKE_CXX_FLAGS_RELEASE: -O3 -DNDEBUG -DDBUG_OFF-- Configuring done-- Generating doneCMake Warning: Manually-specified variables were not used by the project: COMMUNITY_BUILD ENABLE_DEBUG_SYNC ENABLE_PROFILING WITH_TOKUDB_STORAGE_ENGINE-- Build files have been written to: /home/jiessie/rpmbuild/BUILD/percona-server-5.6.36-82.0++ cat /proc/cpuinfo++ grep processor++ wc -l+ make -j 4Scanning dependencies of target abi_checkScanning dependencies of target INFO_BINScanning dependencies of target INFO_SRCScanning dependencies of target zlib[ 0%] [ 0%] Building C object zlib/CMakeFiles/zlib.dir/adler32.c.o[100%] ...省略部分...[100%] Built target udf_example+ exit 0Executing(%install): /bin/sh -e /var/tmp/rpm-tmp.MNmU8M+ umask 022+ cd /home/jiessie/rpmbuild/BUILD+ '[' /home/jiessie/rpmbuild/BUILDROOT/percona-server-5.6.36-82.0.x86_64 '!=' / ']'+ rm -rf /home/jiessie/rpmbuild/BUILDROOT/percona-server-5.6.36-82.0.x86_64++ dirname /home/jiessie/rpmbuild/BUILDROOT/percona-server-5.6.36-82.0.x86_64+ mkdir -p /home/jiessie/rpmbuild/BUILDROOT+ mkdir /home/jiessie/rpmbuild/BUILDROOT/percona-server-5.6.36-82.0.x86_64+ cd percona-server-5.6.36-82.0+ LANG=C+ export LANG+ unset DISPLAY+ make DESTDIR=/home/jiessie/rpmbuild/BUILDROOT/percona-server-5.6.36-82.0.x86_64 install[ 0%] Built target INFO_BIN[100%] ...省略部分...[100%] Built target my_safe_processInstall the project...-- Install configuration: "Release"-- Installing: /home/jiessie/rpmbuild/BUILDROOT/percona-server-5.6.36-82.0.x86_64/usr/local/percona/docs/mysql.info-- ...省略部分...cpio: percona-server-5.6.36-82.0/storage/innobase/pars0lex.l: Cannot stat: No such file or directory97189 blocks+ /usr/lib/rpm/check-buildrootProcessing files: percona-server-5.6.36-82.0.x86_64Provides: adt_null.so()(64bit) audit_log.so()(64bit) auth.so()(64bit) auth_socket.so()(64bit) auth_test_plugin.so()(64bit) connection_control.so()(64bit) handlersocket.so()(64bit) innodb_engine.so()(64bit) libdaemon_example.so()(64bit) libfnv1a_udf.so()(64bit) libfnv_udf.so()(64bit) libmemcached.so()(64bit) libmurmur_udf.so()(64bit) libperconaserverclient.so.18()(64bit) libperconaserverclient.so.18(libperconaserverclient_18)(64bit) mypluglib.so()(64bit) mysql_no_login.so()(64bit) perl(My::Config) perl(My::Config::Group) perl(My::Config::Option) perl(My::ConfigFactory) perl(My::CoreDump) perl(My::Exec) perl(My::File::Path) perl(My::Find) perl(My::Handles) perl(My::Memcache) perl(My::Memcache::Binary) perl(My::Options) perl(My::Platform) perl(My::SafeProcess) perl(My::SafeProcess::Base) perl(My::Suite::Query_response_time) perl(My::SysInfo) perl(My::Test) perl(Subunit) = 0.0.2 perl(mtr_cases) perl(mtr_match) perl(mtr_report) perl(mtr_results) perl(mtr_unique) qa_auth_client.so()(64bit) qa_auth_interface.so()(64bit) qa_auth_server.so()(64bit) query_response_time.so()(64bit) semisync_master.so()(64bit) semisync_slave.so()(64bit) test_udf_services.so()(64bit) validate_password.so()(64bit)Requires(interp): /bin/sh /bin/sh /bin/sh /bin/shRequires(rpmlib): rpmlib(FileDigests) &lt;= 4.6.0-1 rpmlib(PayloadFilesHavePrefix) &lt;= 4.0-1 rpmlib(CompressedFileNames) &lt;= 3.0.4-1Requires(pre): /bin/shRequires(post): /bin/shRequires(preun): /bin/shRequires(postun): /bin/shProcessing files: percona-server-debuginfo-5.6.36-82.0.x86_64Checking for unpackaged file(s): /usr/lib/rpm/check-files /home/jiessie/rpmbuild/BUILDROOT/percona-server-5.6.36-82.0.x86_64Wrote: /home/jiessie/rpmbuild/RPMS/x86_64/percona-server-5.6.36-82.0.x86_64.rpmWrote: /home/jiessie/rpmbuild/RPMS/x86_64/percona-server-debuginfo-5.6.36-82.0.x86_64.rpmExecuting(%clean): /bin/sh -e /var/tmp/rpm-tmp.FOVDND+ umask 022+ cd /home/jiessie/rpmbuild/BUILD+ cd percona-server-5.6.36-82.0+ rm -rf /home/jiessie/rpmbuild/BUILDROOT/percona-server-5.6.36-82.0.x86_64+ rm -rf /home/jiessie/rpmbuild/BUILD/percona-server-5.6.36-82.0+ exit 0-bash-4.1$ 查看生成的RPM文件12345-bash-4.1$ ls -l rpmbuild/RPMS/x86_64/总用量 99528-rw-rw-r-- 1 jiessie jiessie 53752860 7月 14 10:34 percona-server-5.6.36-82.0.x86_64.rpm-rw-rw-r-- 1 jiessie jiessie 48158544 7月 14 10:35 percona-server-debuginfo-5.6.36-82.0.x86_64.rpm-bash-4.1$ percona-server-5.6.36-82.0.x86_64.rpm 此文件即是编译后生成的RPM安装文件 结束语随着云计算时代的到来，docker被越来越多的应用的实际生产中，但对于公司规模较小，自动化平台还不够完善的企业，自制RPM包安装MySQL也是一种不错的选择。]]></content>
      <categories>
        <category>安装配置</category>
      </categories>
      <tags>
        <tag>percona</tag>
        <tag>mysql</tag>
        <tag>rpm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo next 在github上搭建个人博客]]></title>
    <url>%2Fhexo-next-%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html</url>
    <content type="text"><![CDATA[前言目前网上的很多平台都提供了博客功能，如csdn，51cto，cnblog，iteye等等，只要你想写博客，这些平台都可以选择。只需注册个帐号，就可以写博客，实现比较简单，但是局限性也很大，风格千篇一律，没有个性化，扩展也稍麻烦。并且，广告很多，这点很受不了。在此选择了hexo+next+github建立个人的博客平台。 准备github：https://github.com/dwj999发布平台：centos6.5 x86_64发布工具：git编写平台：windows7 x86_64编写工具：有道云笔记框架：hexo主题：next 安装Node.js操作系统为centos6.5，首先删除旧版本1yum -y remove nodejs node使用最新版本，下载源码包123wget https://nodejs.org/dist/v8.1.4/node-v8.1.4-linux-x64.tar.xz tar -xvJf node-v8.1.4-linux-x64.tar.xz mv node-v8.1.4-linux-x64 /usr/local/node 配置系统环境变量123456vim /etc/profile 在底部添加 PATH 变量 export PATH=$PATH:/usr/local/node/bin 最后保存并使其生效即可 source /etc/profile 查看版本：node -v 安装Git(已安装可跳过)1yum install git-core 安装Hexo这里以我的github为例，地址为：https://github.com/dwj999123456789101112创建目录 mkdir /hwdata/dwj999 切换目录 cd /hwdata/dwj999 安装 Hexo npm config set user 0 npm config set unsafe-perm true npm install -g hexo-cli 初始化 Hexo(如果报Error: ENOENT: no such file or directory, uv_cwd,可能是删除的旧版本nodejs导致,重启服务器再试) hexo init 生成静态网页hexo generate 安装插件12345678910111213npm install hexo-generator-index --save npm install hexo-generator-archive --save npm install hexo-generator-category --save npm install hexo-generator-tag --save npm install hexo-server --save npm install hexo-deployer-git --save npm install hexo-deployer-heroku --save npm install hexo-deployer-rsync --save npm install hexo-deployer-openshift --save npm install hexo-renderer-marked --save npm install hexo-renderer-stylus --save npm install hexo-generator-feed --save npm install hexo-generator-sitemap --save 目录结构12345678910|-- _config.yml |-- db.json |-- node_modules |-- package.json |-- package-lock.json |-- public |-- scaffolds |-- source |-- _posts |-- themes 目录结构说明12345678910_config.yml #全局配置文件，网站的很多信息都在这里配置，诸如网站名称，副标题，描述，作者，语言，主题，部署等等参数。请参考：https://hexo.io/zh-cn/docs/configuration.htmldb.json #缓存文件node_modules #hexo插件package.json #hexo框架的参数package-lock.json #根据package.json自动创建锁定依赖版本，删掉会重新创建public #生成的静态网页文件scaffolds #模板文件夹，请参考：https://hexo.io/zh-cn/docs/writing.htmlsource #资源文件夹，用于存放用户资源。旧版本有两个文件夹，_drafts和_posts。新版本只有_posts，用于存放博客的正文。themes #网站主题目录，请参考：https://hexo.io/zh-cn/docs/themes.html详情请参考：请参考：https://hexo.io/zh-cn/docs/setup.html 部署到GitHub站点配置修改Hexo站点配置文件/hwdata/dwj999/_config.yml,以下为例1234567891011121314# Site title: Jiessie's' Blog #标题 subtitle: 没伞的孩子必须努力奔跑 #副标题description: 最怕一生碌碌无为,还说平凡难能可贵！ author: Jiessie language: zh-Hans url: http://dwj999.github.io deploy: type: git repo: git@github.com:dwj999/dwj999.github.io.git branch: master message: '站点更新:&#123;&#123;now("YYYY-MM-DD HH/mm/ss")&#125;&#125;' github创建项目仓库的名字必须和你的帐号对应，比如我的github地址：https://github.com/dwj999 新建仓库名为dwj999.github.io,因我的项目已创建，此为演示，故有提醒，可忽略 git配置123git config --global user.email "dwj999@163.com" git config --global user.name "dwj999"ssh-keygen -t rsa -C "dwj999@163.com" #一路回车，如已生成过，可覆盖成功后会~/.ssh目录生成key，复制id_rsa.pub内容 添加key 打开github地址：https://github.com/settings/ssh，打开ssh keys，添加key 代码上传1234# linux编译hexo generate# 在主机的hexo目录下 执行以下命令将自动更新到Githubhexo d 站点访问，左面菜单和主题已经配置过 主题和配置文件切换到站点目录，下载主题代码12cd /hwdata/dwj999git clone https://github.com/iissnan/hexo-theme-next themes/next #主题的配置文件，位于 hexo/theme/next/_config.yml 配置主题1234vim _config.yml# 找到theme:修改后面的参数，默认是landscapetheme: nexthexo d -g #重新编译，上传 主题和第三方服务说明官方文档很详情请参考：http://theme-next.iissnan.com/getting-started.htmlhttp://theme-next.iissnan.com/theme-settings.htmlhttp://theme-next.iissnan.com/third-party-services.html 发布文章由于hexo支持markdown写文章，并且我使用的是windows机器，代码发布在linux机器上，所以选择了有道云笔记的markdown笔记来写文章，虽然语法支持有缺陷，但是以前习惯了使用有道云，没有使用其他工具，像Cmd Markdown的在线编辑器也不错。1hexo new "hexo next 在github上搭建个人博客" #创建了一个博客文章 再使用有道云的markdown进行写文章，写好后，导出，上传到github。]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>github</tag>
      </tags>
  </entry>
</search>